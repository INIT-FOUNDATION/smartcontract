---
import StickyHeaderObserver from "./StickyHeaderObserver"
---

<StickyHeaderObserver client:media="(min-width: 50em)" />
<article id="article">
  <slot />
</article>

<style is:inline>
  article {
    margin-top: var(--space-10x);
  }

  article * {
    margin-top: 0;
    margin-bottom: 0;
    max-width: 100%;
  }

  article section {
    margin-top: 0;
  }

  article section:target {
    scroll-margin-top: var(--theme-navbar-height);
  }

  article section > section:target {
    scroll-margin-top: calc(var(--theme-navbar-height) + var(--space-12x));
  }

  article > :not(section, astro-slot, astro-island, ul, ol),
  article :where(section, astro-slot, astro-island) > :not(section, astro-slot, astro-island, ul, ol) {
    margin-top: var(--space-5x);
  }

  article section > h2 + :not(section, astro-slot, astro-island) {
    margin-top: 0 !important;
  }

  article section > :is(h1, h3, h4) + :not(section, astro-slot, astro-island) {
    margin-top: var(--space-5x) !important;
  }

  article section > :is(h1, h2, h3, h4, h5, h6) {
    margin-top: 0;
  }

  article :is(h1, h2, h3, h4, h5, h6, p, li) {
    word-break: break-word;
  }

  article section > :is(h1, h2, h3, h4, h5, h6) > a {
    display: inline-block;
    color: inherit;
    width: 100%;
  }

  article section > :is(h2, h3, h4, h5, h6) {
    color: black;
    margin-top: 0;
  }

  article section > h2 {
    font-size: 24px;
    top: 0;
    position: sticky;
    z-index: 3;
    background: rgba(255, 255, 255, 0.93);
    background: linear-gradient(0deg, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.93) 15%);
    padding-top: var(--space-8x);
    padding-bottom: var(--space-5x);
  }

  article section > h2 > a {
    overflow: hidden;
    text-overflow: ellipsis;
    line-clamp: 3;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
  }

  article section > h3 {
    padding-top: var(--space-6x);
    font-size: 20px;
  }

  article section > :is(h4, h5, h6) {
    padding-top: var(--space-6x);
    font-size: 16px;
  }

  article ul {
    padding-left: calc(var(--space-2x) + 2px);
    list-style: none;
  }

  article ol {
    padding-left: calc(var(--space-6x) + 2px);
  }

  article :is(ul, ol) {
    margin-top: var(--space-3x);
  }

  article :is(ul, ol) > li,
  article :is(ul, ol) > li > :is(ul, ol) {
    margin-top: var(--space-1x);
  }

  article li {
    line-height: 1.5;
  }

  article li > * {
    margin-top: var(--space-2x);
  }

  article ul > li {
    position: relative;
    left: 0.5rem;
    padding-right: 1rem;
  }

  article ul > li::before {
    position: absolute;
    content: "●";
    font-size: 0.5rem;
    top: 6.5px;
    left: -1rem;
  }

  @media (min-width: 48em) {
    article {
      margin-top: 0;
    }

    article > :not(section, astro-slot, astro-island, ul, ol),
    article :where(section, astro-slot, astro-island) > :not(section, astro-slot, astro-island, ul, ol) {
      margin-top: var(--space-6x);
    }

    article section > :is(h1, h3, h4) + :not(section, astro-slot, astro-island) {
      margin-top: var(--space-5x) !important;
    }

    article section > :is(h2, h3, h4, h5, h6) {
      color: var(--blue-800, #1a2b6b);
    }

    article section > h2 {
      font-size: 28px;
      padding-bottom: var(--space-5x);
    }

    article section > h3 {
      font-size: 24px;
    }

    article section > :is(h4, h5, h6) {
      font-size: 20px;
    }
  }

  @media (min-width: 50em) {
    article section > h2 {
      background: none;
      padding-top: var(--space-5x);
    }
  }
</style>

<script>
  /**
   * Creates sticky headers which interact with
   * intersection observers for nested h3, h4 headers
   */
  const wrapHeaders = (start: Element, isParent?: boolean) => {
    const wrapper = document.createElement("section")
    const elements: Element[] = []
    elements.push(start)
    let next = start.nextElementSibling
    while (
      next && // Just bear with me
      (next.nodeName !== "ASTRO-ISLAND" || // Not an island
        !next.hasChildNodes() || // Island doesn't have HTML content
        next.children[0].nodeName !== "SECTION" || // First child of the island is not a section
        !next.children[0].id) && // Section does not have an id
      (!next.id || ["H5", "H6"].includes(next.nodeName) || (isParent && !["H1", "H2"].includes(next.nodeName)))
    ) {
      elements.push(next)
      next = next.nextElementSibling
    }
    wrapper.id = start.id
    start.parentNode!.insertBefore(wrapper, start)
    if (isParent) {
      start.setAttribute("data-sticky", "")
    }
    elements.forEach((e) => wrapper.appendChild(e))
    return wrapper
  }

  /**
   * Only get direct descendants of the article content
   * Grabs mdx headers without getting nested headers in components
   */
  const headers = document.body.querySelectorAll("article > :where(h1, h2, h3, h4)")
  headers.forEach((e) => wrapHeaders(e, ["H1", "H2"].includes(e.nodeName)))

  // Wrap "above the fold" (ATF) content that lives before first header
  const wrapATF = (start: Element) => {
    const wrapper = document.createElement("section")
    const elements: Element[] = []
    elements.push(start)
    let next = start.nextElementSibling
    while (
      next && // Just bear with me
      (next.nodeName !== "ASTRO-ISLAND" || // Not an island
        !next.hasChildNodes() || // Island doesn't have HTML content
        next.children[0].nodeName !== "SECTION" || // First child of the island is not a section
        !next.children[0].id) && // Section does not have an id
      (!next.id || !["SECTION"].includes(next.nodeName))
    ) {
      elements.push(next)
      next = next.nextElementSibling
    }
    start.parentNode!.insertBefore(wrapper, start)
    elements.forEach((e) => wrapper.appendChild(e))
  }

  const firstElement = document.body.querySelector("article > :not(section)")
  firstElement && wrapATF(firstElement)
</script>
