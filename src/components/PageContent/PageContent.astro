---
import Overview from "./Overview.astro"
import { MarkdownHeading } from "astro"

export type Props = {
  titleHeading: MarkdownHeading
}
const { titleHeading } = Astro.props
---

<article id="article">
  <Overview title={titleHeading} />
  <slot />
</article>

<style is:inline>
  /* Required for floating content i.e. copy-code-button-wrapper */
  article {
    position: relative;
  }

  article :is(h1, h2, h3, h4, h5, h6) > a {
    display: inline-block;
    color: inherit;
    width: 100%;
  }

  article astro-slot > :first-child {
    margin-top: 0;
  }

  article table {
    margin-top: var(--space-2x);
  }

  /* Using padding instead of margin so intersection observers work without spaces */
  article > section {
    padding-top: var(--space-5x);
  }

  article * {
    word-break: break-word;
    max-width: 100%;
    margin-bottom: 0;
  }

  article :is(p, li) {
    line-height: 28px;
  }

  article label {
    display: flex;
    align-items: center;
    gap: var(--space-2x);
  }

  article :where(section, astro-slot) > :not(section, astro-slot),
  article > :not(section, astro-slot) {
    margin-top: var(--space-5x);
  }

  article :where(section, astro-slot) > :is(h1, h2) {
    margin: 0;
  }

  article :where(section, astro-slot) > :is(h3, h4) {
    padding-top: var(--space-8x);
  }

  article :where(section, astro-slot) > :is(h3, h4, li) {
    margin-top: 0;
  }

  article :where(section, astro-slot) > h1 {
    font-size: 32px;
  }

  article :where(section, astro-slot) > h2 {
    font-size: 28px;
    padding-top: var(--space-6x);
  }

  article :where(section, astro-slot) > h4 {
    font-size: 20px;
  }

  article :is(ul, ol) {
    margin-top: var(--space-3x);
  }
  article :is(ul, ol) > * + *,
  article :is(ul, ol) > li > :is(ul, ol) {
    margin-top: var(--space-2x);
  }

  article ul {
    padding-left: var(--space-4x);
  }

  article ol {
    padding-left: var(--space-8x);
  }

  article li > :is(p, pre, blockquote):not(:first-child) {
    margin-top: var(--space-4x);
  }

  article ::marker {
    font-weight: bold;
    color: var(--theme-text-light);
  }

  article iframe {
    width: 100%;
    height: auto;
    aspect-ratio: 16 / 9;
  }

  /* Offsets padding */
  section:target {
    scroll-margin-top: calc(var(--theme-navbar-height) + var(--space-12x));
  }

  /* section > section:target {
    scroll-margin-top: calc(var(--theme-navbar-height) + var(--space-12x));
  } */

  @media (min-width: 50em) {
    article :where(section, astro-slot) > :is(h1, h2) {
      position: sticky;
      top: 0;
      z-index: 3;
      background: white;
      border-bottom: 2px solid var(--blue-200, #dfe7fb);
      padding: var(--space-6x) 0;
    }
    article :where(section, astro-slot) > h1 {
      font-size: 40px;
    }

    article :where(section, astro-slot) > h2 {
      font-size: 32px;
    }

    article :where(section, astro-slot) > h3 {
      font-size: 28px;
    }

    section:target {
      scroll-margin-top: calc(-1 * var(--space-5x));
    }

    section > section:target {
      scroll-margin-top: var(--space-24x);
    }
  }
</style>

<script>
  /**
   * Creates sticky headers which interact with
   * intersection observers for nested h3, h4 headers
   */
  // TODO: Allow h3 elements to be parents to h4 elements(?)
  const wrapElements = (start: Element, isParent?: boolean) => {
    const wrapper = document.createElement("section")
    const elements: Element[] = []
    elements.push(start)
    let next = start.nextElementSibling
    while (
      next &&
      (next.nodeName !== "ASTRO-ISLAND" || // Not an island
        !next.hasChildNodes() || // Island doesn't have HTML content
        next.children[0].nodeName !== "SECTION" || // First child of the island is not a section
        !next.children[0].id) && // Section does not have an id
      (!next.id || (isParent && !["H1", "H2"].includes(next.nodeName)))
    ) {
      elements.push(next)
      next = next.nextElementSibling
    }
    wrapper.id = start.id
    start.parentNode!.insertBefore(wrapper, start)
    elements.forEach((e) => wrapper.appendChild(e))
    return wrapper
  }

  // Only get direct descendants of the article content
  // Grabs mdx headers without getting nested headers in components
  const elements = document.body.querySelectorAll("article > :where(h1, h2, h3, h4)")
  elements.forEach((e) => wrapElements(e, ["H1", "H2"].includes(e.nodeName)))
</script>
