---
import { BaseFrontmatter } from "~/content/config"
// import TableOfContents from "../RightSidebar/TableOfContents"
import { MarkdownHeading } from "astro"
import { ContentObserver } from "./ContentObserver/ContentObserver"

export type Props = {
  frontmatter: BaseFrontmatter
}
const { frontmatter } = Astro.props
const title = frontmatter.title
const overview: MarkdownHeading = {
  depth: 1,
  slug: "overview",
  text: title,
}
---

<!-- TODO: Get TOC out of article, use general layout from Quickstarts -->
<article id="article">
  <ContentObserver client:only="preact" />
  <h1 id={overview.slug}>{overview.text}</h1>
  <!-- <span class="sm:hidden">
    <TableOfContents client:media="(max-width: 50em)" />
  </span> -->
  <slot />
</article>

<!-- TODO: Use is:inline instead of :global on quickstarts -->
<style is:inline>
  article {
    position: relative;
  }

  article * {
    max-width: 100%;
    margin-bottom: 0;
  }

  article :where(section) > :not(section) {
    margin-top: var(--space-5x);
  }

  article :is(h1, h2) {
    position: sticky;
    top: var(--theme-navbar-height, 2rem);
    z-index: 3;
    background: white;
    padding: var(--space-8x) 0;
    border-bottom: 2px solid var(--blue-200, #dfe7fb);
  }

  article :is(h3, h4) {
    padding-top: var(--space-8x);
  }

  article :is(h3, h4, li) {
    margin-top: 0;
  }

  article > :first-child {
    margin-top: 0;
  }

  article :is(ul) {
    padding-left: var(--space-4x);
  }

  article :is(ul, ol) {
    margin-top: var(--space-3x);
  }

  /* article :is(ul, ol) > li > :is(ul, ol) {
    margin-top: 0.5rem;
  } */
  article :is(ul, ol) > * + * {
    margin-top: 0.5rem;
  }

  article li > :is(p, pre, blockquote):not(:first-child) {
    margin-top: var(--space-4x);
  }

  article :is(ol) {
    padding-left: var(--space-8x);
  }

  article ::marker {
    font-weight: bold;
    color: var(--theme-text-light);
  }

  article iframe {
    width: 100%;
    height: auto;
    aspect-ratio: 16 / 9;
  }

  /* TODO: Add margin for top bar on mobile */
  section:target {
    scroll-margin-top: var(--theme-navbar-height, 2rem);
  }

  section > section:target {
    scroll-margin-top: calc(var(--theme-navbar-height, 2rem) + 6rem);
  }

  @media (min-width: 48em) {
    article :is(h1, h2) {
      top: 0;
    }
    section:target {
      scroll-margin-top: 0;
    }

    section > section:target {
      scroll-margin-top: 6rem;
    }
  }
</style>

<script>
  /**
   * Looks janky, but is necessary to achieve sticky h2 headers
   * with functioning intersection observers for nested h3, h4 headers
   */
  const wrapElements = (start: Element, isParent?: boolean) => {
    const wrapper = document.createElement("section")
    const elements: Element[] = []
    elements.push(start)
    let next = start.nextElementSibling
    // TODO: Un-jank this, maybe create a helper for wrapping elements
    // which the islands can use in their render
    while (
      next &&
      (next.nodeName !== "ASTRO-ISLAND" || // Not an island
        !next.hasChildNodes() || // Island doesn't have HTML content
        next.children[0].nodeName !== "SECTION" || // First child of the island is not a section
        !next.children[0].id) && // Section does not have an id
      (!next.id || (isParent && !["H1", "H2"].includes(next.nodeName)))
    ) {
      elements.push(next)
      next = next.nextElementSibling
    }
    wrapper.id = start.id
    start.parentNode!.insertBefore(wrapper, start)
    elements.forEach((e) => wrapper.appendChild(e))
    // If parent header (H1, H2), wrap all lesser headers as children
    if (isParent) {
      // Create a nested wrapper for non-subheading elements
      const wrapper = wrapElements(start)
      // Extract the header from the first nested wrapper to use as sticky header
      if (wrapper.firstElementChild) {
        wrapper.parentNode!.insertBefore(wrapper.firstElementChild, wrapper)
        // If there's nothing after the title element, remove the now-empty wrapper
        if (!wrapper.hasChildNodes()) {
          wrapper.remove()
        }
      }
    }
    return wrapper
  }

  const elements = document.body.querySelectorAll("article :where(h1, h2, h3, h4)")
  elements.forEach((e) => wrapElements(e, ["H1", "H2"].includes(e.nodeName)))
</script>
