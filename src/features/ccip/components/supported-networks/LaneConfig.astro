---
import { LaneConfig } from "@config/data/ccip/types"
import { loadReferenceData, Environment } from "@config/data/ccip/"
import { SupportedChain } from "@config"
import { Address, Aside } from "@components"
import { BigNumber, BigNumberish, utils } from "ethers"
import { getExplorer, getExplorerAddressUrl } from "@features/utils"

type ConfigProps = {
  laneConfig: LaneConfig
  sourceChain: SupportedChain // key in SupportedChain
  sourceChainRefId: string // id in reference directory
  environment: Environment
}

const contactUrl = "https://chainlinkcommunity.typeform.com/ccip-form?typeform-source=docs.chain.link#ref_id=ccip_docs"
const { laneConfig, sourceChain, environment, sourceChainRefId } = Astro.props as ConfigProps
const { rateLimiterConfig, supportedTokens } = laneConfig

const normalizeNumber = (bigNum: BigNumberish, decimals: number = 18) => {
  const bigNumberValue = BigNumber.from(bigNum)
  return bigNumberValue.div(BigNumber.from(10).pow(decimals))
}
const display = (bigNum: BigNumberish, decimals: number = 18) => {
  const numberWithoutDecimals = normalizeNumber(bigNum, decimals).toString()
  return utils.commify(numberWithoutDecimals)
}

const displayRate = (capacity: BigNumberish, rate: BigNumberish, symbol: string, decimals: number = 18) => {
  const rateBN = BigNumber.from(rate)
  const capacityBN = normalizeNumber(capacity, decimals) // normalize capacity

  const units = [
    { unit: "second", factor: BigNumber.from(1) },
    { unit: "10 minutes", factor: BigNumber.from(600) },
    { unit: "30 minutes", factor: BigNumber.from(1800) },
    { unit: "hour", factor: BigNumber.from(3600) },
    { unit: "2 hours", factor: BigNumber.from(7200) },
    { unit: "3 hours", factor: BigNumber.from(10800) },
    { unit: "6 hours", factor: BigNumber.from(21600) },
    { unit: "12 hours", factor: BigNumber.from(43200) },
    { unit: "24 hours", factor: BigNumber.from(86400) },
  ]

  let result = ""
  let unit = ""

  for (const { unit: currentUnit, factor } of units) {
    const tempResult = rateBN.mul(factor)
    const formattedResult = normalizeNumber(tempResult, decimals)

    if (formattedResult.gt(capacityBN)) {
      break
    }
    if (!formattedResult.isZero()) {
      result = formattedResult.toString()
      unit = currentUnit
      break
    }
  }

  if (result === "") {
    throw new Error(
      `Error while displaying rate ${rate} using ${decimals} decimals. The rate is too small to display with the provided units.`
    )
  }

  return `${utils.commify(result)} ${symbol}/${unit}`
}

const explorerUrl = getExplorer(sourceChain)

if (!explorerUrl) throw Error(`Explorer url not found for ${sourceChain}`)

let tokensWithExtraInfo: {
  token: string
  address: any
  rateLimiterConfig: { capacity: string; isEnabled: boolean; rate: string }
  name?: string
  decimals: number
}[] = []

const tokensReferenceData = loadReferenceData(environment).tokensReferenceData
if (supportedTokens) {
  tokensWithExtraInfo = Object.keys(supportedTokens)
    .filter((supportedToken) => {
      const tokenData = tokensReferenceData[supportedToken]
      if (!tokenData) {
        console.error(`Token data not found for supportedToken: ${supportedToken}`)
        return false
      }
      if (!tokenData[sourceChainRefId]) {
        console.error(
          `Chain reference data not found for supportedToken: ${supportedToken}, chainRefId: ${sourceChainRefId}`
        )
        return false
      }

      return !tokenData[sourceChainRefId].allowListEnabled
    })
    .map((supportedToken) => {
      const { tokenAddress, decimals } = tokensReferenceData[supportedToken][sourceChainRefId]
      return {
        token: supportedToken,
        address: tokenAddress,
        rateLimiterConfig: supportedTokens[supportedToken].rateLimiterConfig,
        decimals: decimals,
      }
    })
}
---

{
  tokensWithExtraInfo.length > 0 ? (
    <>
      {rateLimiterConfig && rateLimiterConfig.isEnabled ? (
        <table>
          <>
            <thead>
              <tr>
                <>
                  <th>Aggregate Rate Limit</th>
                  <th>Value</th>
                </>
              </tr>
            </thead>
            <tbody>
              <>
                <tr>
                  <>
                    <td>Capacity</td>
                    <td>{display(rateLimiterConfig.capacity)} USD</td>
                  </>
                </tr>
                <tr>
                  <>
                    <td>Refill rate</td>
                    <td>{display(rateLimiterConfig.rate)} USD/second</td>
                  </>
                </tr>
              </>
            </tbody>
          </>
        </table>
      ) : null}
      <>
        <p>
          <strong>Supported tokens:</strong>
        </p>
        <table>
          <thead>
            <tr>
              <th>Symbol</th>
              <th>Token Address</th>
              <th>Attributes</th>
            </tr>
          </thead>
          <tbody>
            {tokensWithExtraInfo.map((tokenWithExtraInfo) => {
              return (
                <tr>
                  <td>{tokenWithExtraInfo.token}</td>
                  <td>
                    <Address
                      contractUrl={getExplorerAddressUrl(explorerUrl)(tokenWithExtraInfo.address)}
                      endLength={7}
                    />
                  </td>
                  <td>
                    <ul>
                      <li>
                        <strong>Decimals: </strong>
                        {tokenWithExtraInfo.decimals}
                      </li>
                      {tokenWithExtraInfo.rateLimiterConfig?.isEnabled && (
                        <>
                          <li>
                            <strong>Rate limit capacity: </strong>
                            {display(tokenWithExtraInfo.rateLimiterConfig.capacity, tokenWithExtraInfo.decimals) +
                              " " +
                              tokenWithExtraInfo.token}
                          </li>
                          <li>
                            <strong>Rate limit refill rate: </strong>
                            {displayRate(
                              tokenWithExtraInfo.rateLimiterConfig.capacity,
                              tokenWithExtraInfo.rateLimiterConfig.rate,
                              tokenWithExtraInfo.token,
                              tokenWithExtraInfo.decimals
                            )}
                          </li>
                        </>
                      )}
                    </ul>
                  </td>
                </tr>
              )
            })}{" "}
          </tbody>
        </table>
      </>
    </>
  ) : (
    <Aside>
      No tokens have currently been listed on this lane. Token issuers may <a href={contactUrl}>contact us</a> to have
      their token listed.
    </Aside>
  )
}
