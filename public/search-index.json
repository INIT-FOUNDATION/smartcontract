{
  "index": [
    {
      "title": "README",
      "headings": [
        {
          "depth": 2,
          "slug": "using-directives",
          "text": "Using Directives"
        },
        {
          "depth": 3,
          "slug": "callouts",
          "text": "Callouts"
        },
        {
          "depth": 3,
          "slug": "solidity-remix",
          "text": "Solidity Remix"
        },
        {
          "depth": 2,
          "slug": "using-variables",
          "text": "Using variables"
        },
        {
          "depth": 3,
          "slug": "usage",
          "text": "Usage"
        },
        {
          "depth": 2,
          "slug": "click-to-zoom",
          "text": "Click-to-zoom"
        },
        {
          "depth": 2,
          "slug": "code-tabs",
          "text": "Code Tabs"
        },
        {
          "depth": 3,
          "slug": "network-tab",
          "text": "Network Tab"
        },
        {
          "depth": 4,
          "slug": "usage-1",
          "text": "Usage"
        },
        {
          "depth": 3,
          "slug": "package-manager-tabs",
          "text": "Package Manager Tabs"
        },
        {
          "depth": 4,
          "slug": "usage-2",
          "text": "Usage"
        },
        {
          "depth": 3,
          "slug": "custom-tabs",
          "text": "Custom tabs"
        }
      ],
      "url": "/README",
      "section": "gettingStarted",
      "description": "Learn the basic concepts about what smart contracts are and, how to write them, and how Chainlink oracles work with smart contracts.",
      "content": "\n## Using Directives\n\nCustom markdown is written using directives. Theres two type of directives, `nodeDirectives` like the ones used in the callouts:\n\n```\n// usage\n:::directiveName[title]\ncontent\n:::\n\n//example\n:::tip[did you know?]\ntip\n:::\n```\n\nAnd `leafDirectives` like the ones used for solidityRemix examples\n\n```\n::solidity-remix[/samples/PriceFeeds/PriceConsumerV3.sol]\n```\n\n### Callouts\n\n:::tip\nCustom markdown is written using directives. Theres two type of directives, nodeDirectives like the ones used in the callouts:\n:::\n\n:::danger[did you know?]\ndanger\n:::\n\n:::caution[did you know?]\ninfo\n:::\n\n:::note[did you know?]\nwarning\n:::\n\n```\n:::tip[did you know?]\ntip\n:::\n\n:::danger[did you know?]\ndanger\n:::\n\n:::caution[did you know?]\ninfo\n:::\n\n:::note[did you know?]\nwarning\n:::\n```\n\n### Solidity Remix\n\n::solidity-remix[/samples/PriceFeeds/PriceConsumerV3.sol]\n\n```\n::solidity-remix[/samples/PriceFeeds/PriceConsumerV3.sol]\n```\n\n## Using variables\n\nYou can use variables by importing the variables object into the current page\n\n<Tabs client:visible>\n<Fragment slot=\"tab.1\">Usage in .md</Fragment>\n<Fragment slot=\"tab.2\">Usage in .mdx</Fragment>\n<Fragment slot=\"panel.1\">\n```\nsetup: |\n  import { variables } from \"@variables\"\n```\n</Fragment>\n<Fragment slot=\"panel.2\">\n```\nimport { variables } from \"@variables\"\n```\n</Fragment>\n</Tabs>\n\n### Usage\n\n{variables.GOERLI_LINK_TOKEN}\n\n```\n{variables.GOERLI_LINK_TOKEN}\n```\n\n## Click-to-zoom\n\nWe can enable click-to-zoom functionality on some large images. To do this we can make use of the `<ClickToZoom />` component. This will open the image on a popup in tablets and larger screens.\n\n<ClickToZoom src=\"/files/8c35025-Request__Receive_Data.png\" />\n\n```jsx\n<ClickToZoom src=\"/files/8c35025-Request__Receive_Data.png\" />\n```\n\n## Code Tabs\n\nCodetabs use nanostores to sync up throughout the page.\n\nIdeally we will create components such as the `<CodeTabs />` component or the `<NetworkTabs />` component, which use a `sharedStore` to change all tabs to the same value throughout the page.\n\n<Tabs client:visible>\n  <Fragment slot=\"tab.1\">Usage in .md</Fragment>\n  <Fragment slot=\"tab.2\">Usage in .mdx</Fragment>\n  <Fragment slot=\"panel.1\">\n  ```markdown\n  setup: |\n    import { Tabs } from \"@components/Tabs/Tabs\"\n    import { NetworkTabs, PackageManagerTabs } from \"@components\"\n    ```\n  </Fragment>\n  <Fragment slot=\"panel.2\">\n  ```markdown\n  import { Tabs } from \"../../components/tabs/Tabs\"\n  import { NetworkTabs, PackageManagerTabs } from \"@components\"\n  ```\n  </Fragment>\n</Tabs>\n\n### Network Tab\n\nCreate a local directory to persist the data:\n\n<NetworkTabs>\n  <Fragment slot=\"Goerli\">\n  ```shell Goerli\n  mkdir ~/.geth-goerli\n  ```\n  </Fragment>\n  <Fragment slot=\"Mainnet\">\n  ```shell Mainnet\n  mkdir ~/.geth\n  ```\n  </Fragment>\n</NetworkTabs>\n\nRun the container:\n\n<NetworkTabs>\n  <Fragment slot=\"Goerli\">\n  ```shell Goerli\n  docker run --name eth -p 8546:8546 -v ~/.geth-goerli:/geth -it \\\n          ethereum/client-go --goerli --ws --ipcdisable \\\n          --ws.addr 0.0.0.0 --ws.origins=\"*\" --datadir /geth\n  ```\n  </Fragment>\n  <Fragment slot=\"Mainnet\">\n  ```shell Mainnet\n  docker run --name eth -p 8546:8546 -v ~/.geth:/geth -it \\\n          ethereum/client-go --ws --ipcdisable \\\n          --ws.addr 0.0.0.0 --ws.origins=\"*\" --datadir /geth\n  ```\n  </Fragment>\n</NetworkTabs>\n\n#### Usage\n\n````\nCreate a local directory to persist the data:\n\n<NetworkTabs>\n  <Fragment slot=\"Goerli\">\n  ```shell Goerli\n  mkdir ~/.geth-goerli\n  ```\n  </Fragment>\n  <Fragment slot=\"Mainnet\">\n  ```shell Mainnet\n  mkdir ~/.geth\n  ```\n  </Fragment>\n</NetworkTabs>\n\nRun the container:\n\n<NetworkTabs>\n  <Fragment slot=\"Goerli\">\n  ```shell Goerli\n  docker run --name eth -p 8546:8546 -v ~/.geth-goerli:/geth -it \\\n          ethereum/client-go --goerli --ws --ipcdisable \\\n          --ws.addr 0.0.0.0 --ws.origins=\"*\" --datadir /geth\n  ```\n  </Fragment>\n  <Fragment slot=\"Mainnet\">\n  ```shell Mainnet\n  docker run --name eth -p 8546:8546 -v ~/.geth:/geth -it \\\n          ethereum/client-go --ws --ipcdisable \\\n          --ws.addr 0.0.0.0 --ws.origins=\"*\" --datadir /geth\n  ```\n  </Fragment>\n</NetworkTabs>\n````\n\n### Package Manager Tabs\n\n<PackageManagerTabs>\n  <Fragment slot=\"npm\">\n  ```\n  npm i -g @chainlink/solana-sdk\n  ```\n  </Fragment>\n  <Fragment slot=\"yarn\">\n  ```\n  yarn add @chainlink/solana-sdk\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n#### Usage\n\n````\n<PackageManagerTabs>\n  <Fragment slot=\"npm\">\n  ```\n  npm i -g @chainlink/solana-sdk\n  ```\n  </Fragment>\n  <Fragment slot=\"yarn\">\n  ```\n  yarn add @chainlink/solana-sdk\n  ```\n  </Fragment>\n</PackageManagerTabs>\n````\n\n### Custom tabs\n\nWe can still use the tabs without creating an Astro component or without the sharedStore property.\n\n:::note\nTo create a custom tab we _MUST_ import it relatively from the current file `import { Tabs } from \"../../components/tabs/Tabs\"` and not from `@components`\n:::\n\n```\n// whithout shared store\n<Tabs client:visible>\n  <Fragment slot=\"tab.1\">Tab 1</Fragment>\n  <Fragment slot=\"tab.2\">Tab 2</Fragment>\n  <Fragment slot=\"panel.1\">Content 1</Fragment>\n  <Fragment slot=\"panel.2\">Content 2</Fragment>\n</Tabs>\n\n// with sharedStore (syncs up all tabs in the page)\n<Tabs sharedStore=\"networks\" client:visible>\n  <Fragment slot=\"tab.1\">Tab 1</Fragment>\n  <Fragment slot=\"tab.2\">Tab 2</Fragment>\n  <Fragment slot=\"panel.1\">Content 1</Fragment>\n  <Fragment slot=\"panel.2\">Content 2</Fragment>\n</Tabs>\n\n```\n"
    },
    {
      "title": "ChainlinkClient API Reference",
      "headings": [
        {
          "depth": 2,
          "slug": "index",
          "text": "Index"
        },
        {
          "depth": 3,
          "slug": "methods",
          "text": "Methods"
        },
        {
          "depth": 3,
          "slug": "events",
          "text": "Events"
        },
        {
          "depth": 3,
          "slug": "modifiers",
          "text": "Modifiers"
        },
        {
          "depth": 3,
          "slug": "constants",
          "text": "Constants"
        },
        {
          "depth": 3,
          "slug": "structs",
          "text": "Structs"
        },
        {
          "depth": 2,
          "slug": "methods-1",
          "text": "Methods"
        },
        {
          "depth": 3,
          "slug": "setchainlinkoracle",
          "text": "setChainlinkOracle"
        },
        {
          "depth": 3,
          "slug": "setchainlinktoken",
          "text": "setChainlinkToken"
        },
        {
          "depth": 3,
          "slug": "buildchainlinkrequest",
          "text": "buildChainlinkRequest"
        },
        {
          "depth": 3,
          "slug": "buildoperatorrequest",
          "text": "buildOperatorRequest"
        },
        {
          "depth": 3,
          "slug": "sendchainlinkrequest",
          "text": "sendChainlinkRequest"
        },
        {
          "depth": 3,
          "slug": "sendchainlinkrequestto",
          "text": "sendChainlinkRequestTo"
        },
        {
          "depth": 3,
          "slug": "sendoperatorrequest",
          "text": "sendOperatorRequest"
        },
        {
          "depth": 3,
          "slug": "sendoperatorrequestto",
          "text": "sendOperatorRequestTo"
        },
        {
          "depth": 3,
          "slug": "validatechainlinkcallback",
          "text": "validateChainlinkCallback"
        },
        {
          "depth": 3,
          "slug": "addchainlinkexternalrequest",
          "text": "addChainlinkExternalRequest"
        },
        {
          "depth": 3,
          "slug": "cancelchainlinkrequest",
          "text": "cancelChainlinkRequest"
        },
        {
          "depth": 3,
          "slug": "usechainlinkwithens",
          "text": "useChainlinkWithENS"
        },
        {
          "depth": 3,
          "slug": "updatechainlinkoraclewithens",
          "text": "updateChainlinkOracleWithENS"
        },
        {
          "depth": 3,
          "slug": "chainlinktokenaddress",
          "text": "chainlinkTokenAddress"
        },
        {
          "depth": 3,
          "slug": "chainlinkoracleaddress",
          "text": "chainlinkOracleAddress"
        },
        {
          "depth": 2,
          "slug": "events-1",
          "text": "Events"
        },
        {
          "depth": 3,
          "slug": "chainlinkrequested",
          "text": "ChainlinkRequested"
        },
        {
          "depth": 3,
          "slug": "chainlinkfulfilled",
          "text": "ChainlinkFulfilled"
        },
        {
          "depth": 3,
          "slug": "chainlinkcancelled",
          "text": "ChainlinkCancelled"
        },
        {
          "depth": 2,
          "slug": "constants-1",
          "text": "Constants"
        },
        {
          "depth": 3,
          "slug": "link_divisibility",
          "text": "LINK_DIVISIBILITY"
        },
        {
          "depth": 2,
          "slug": "modifiers-1",
          "text": "Modifiers"
        },
        {
          "depth": 3,
          "slug": "recordchainlinkfulfillment",
          "text": "recordChainlinkFulfillment"
        },
        {
          "depth": 2,
          "slug": "chainlinkrequest",
          "text": "Chainlink.Request"
        },
        {
          "depth": 3,
          "slug": "attributes",
          "text": "Attributes"
        },
        {
          "depth": 3,
          "slug": "methods-2",
          "text": "Methods"
        },
        {
          "depth": 4,
          "slug": "add",
          "text": "add"
        },
        {
          "depth": 4,
          "slug": "addbytes",
          "text": "addBytes"
        },
        {
          "depth": 4,
          "slug": "addint",
          "text": "addInt"
        },
        {
          "depth": 4,
          "slug": "adduint",
          "text": "addUint"
        },
        {
          "depth": 4,
          "slug": "addstringarray",
          "text": "addStringArray"
        },
        {
          "depth": 4,
          "slug": "setbuffer",
          "text": "setBuffer"
        }
      ],
      "url": "/any-api/api-reference",
      "section": "ethereum",
      "content": "\r\n:::note[ API reference for `ChainlinkClient` [contract](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/ChainlinkClient.sol).]\r\n\r\n`ChainlinkClient` contracts can communicate with legacy `Oracle` [contracts](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.4/Oracle.sol) or `Operator` [contracts](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol).\r\n\r\n:::\r\n\r\n## Index\r\n\r\n### Methods\r\n\r\n| Name                                                          | Description                                                                                                                                                                                                                        |\r\n| :------------------------------------------------------------ | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| [setChainlinkOracle](#setchainlinkoracle)                     | Sets the stored address for the oracle contract                                                                                                                                                                                    |\r\n| [setChainlinkToken](#setchainlinktoken)                       | Sets the stored address for the LINK token                                                                                                                                                                                         |\r\n| [buildChainlinkRequest](#buildchainlinkrequest)               | Instantiates a Request object with the required parameters                                                                                                                                                                         |\r\n| [buildOperatorRequest](#buildoperatorrequest)                 | Instantiates a Request object with the required parameters. **Note** the oracle must be an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol)                       |\r\n| [sendChainlinkRequest](#sendchainlinkrequest)                 | Sends the request payload to the stored address stored as chainlinkOracleAddress                                                                                                                                                   |\r\n| [sendChainlinkRequestTo](#sendchainlinkrequestto)             | Sends a request to the oracle address specified                                                                                                                                                                                    |\r\n| [sendOperatorRequest](#sendoperatorrequest)                   | Sends the request payload to the stored address stored as chainlinkOracleAddress. **Note** the oracle must be an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol) |\r\n| [sendOperatorRequestTo](#sendoperatorrequestto)               | Sends a request to the oracle address specified. **Note** the oracle must be an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol)                                  |\r\n| [validateChainlinkCallback](#validatechainlinkcallback)       | Secures the fulfillment callback to make sure it is only called by permissioned senders                                                                                                                                            |\r\n| [addChainlinkExternalRequest](#addchainlinkexternalrequest)   | Allows a Chainlinked contract to track unfulfilled requests that it hasn't created itself                                                                                                                                          |\r\n| [cancelChainlinkRequest](#cancelchainlinkrequest)             | Cancels Chainlink requests attempting to contact an unresponsive node                                                                                                                                                              |\r\n| [useChainlinkWithENS](#usechainlinkwithens)                   | Looks up the addresses of the LINK token and Oracle contract through ENS                                                                                                                                                           |\r\n| [updateChainlinkOracleWithENS](#updatechainlinkoraclewithens) | Updates the stored oracle address with the latest address resolved through ENS                                                                                                                                                     |\r\n| [chainlinkTokenAddress](#chainlinktokenaddress)               | Returns the stored address of the LINK token                                                                                                                                                                                       |\r\n| [chainlinkOracleAddress](#chainlinkoracleaddress)             | Returns the stored address of the oracle contract                                                                                                                                                                                  |\r\n\r\n### Events\r\n\r\n| Name                                      | Description                                                                  |\r\n| :---------------------------------------- | ---------------------------------------------------------------------------- |\r\n| [ChainlinkRequested](#chainlinkrequested) | Emitted from a Chainlinked contract when a request is sent to an oracle      |\r\n| [ChainlinkFulfilled](#chainlinkfulfilled) | Emitted from a Chainlinked contract when a request is fulfilled by an oracle |\r\n| [ChainlinkCancelled](#chainlinkcancelled) | Emitted from a Chainlinked contract when a request is cancelled              |\r\n\r\n### Modifiers\r\n\r\n| Name                                                      | Description                                                                                                                                              |\r\n| :-------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| [recordChainlinkFulfillment](#recordchainlinkfulfillment) | Used on fulfillment callbacks to ensure that the caller and requestId are valid. This is the modifier equivalent of the method validateChainlinkCallback |\r\n\r\n### Constants\r\n\r\n| Name                                    | Description                                                                       |\r\n| :-------------------------------------- | --------------------------------------------------------------------------------- |\r\n| [LINK_DIVISIBILITY](#link_divisibility) | Helper uint256 to represent the divisibility of a LINK token. Equivalent to 10^18 |\r\n\r\n### Structs\r\n\r\n| Name                                   | Description                                                          |\r\n| :------------------------------------- | -------------------------------------------------------------------- |\r\n| [Chainlink.Request](#chainlinkrequest) | All of the parameters that can be passed over in a Chainlink request |\r\n\r\n## Methods\r\n\r\nBelow you'll find each helper explained in greater detail alongside respective implementation examples to help you leverage these methods once you start building your own Chainlinked contract.\r\n\r\nAfter the function signature and a short description, two code examples are provided, one focusing on the exact usage of the method and one where the helper is presented in the context of a full contract.\r\n\r\n### setChainlinkOracle\r\n\r\n```solidity\r\nfunction setChainlinkOracle(\r\n  address _oracle\r\n)\r\n```\r\n\r\nSets a private storage variable provided for convenience if your contract only needs to talk to one oracle and you do not want to specify it on every request. Once an oracle is set with `setChainlinkOracle` that is the address used with [sendChainlinkRequest](#sendchainlinkrequest).\r\n\r\nRetrieve the oracle address using [chainlinkOracleAddress](#chainlinkoracleaddress). These getters and setters are provided to enforce that changes to the oracle are explicitly made in the code.\r\n\r\n```solidity example\r\nconstructor(address _oracle)\r\n{\r\n  setChainlinkOracle(_oracle);\r\n}\r\n```\r\n\r\n### setChainlinkToken\r\n\r\n```solidity example\r\nsetChainlinkToken(\r\n  address _link\r\n)\r\n```\r\n\r\nSets the stored address for the LINK token which is used to send requests to Oracles. There are different token addresses on different network. See [LINK Token Contracts](/resources/link-token-contracts/) for the address of the LINK token on the network you're deploying to.\r\n\r\n```solidity example\r\nconstructor(address _link)\r\n  public\r\n{\r\n  setChainlinkToken(_link);\r\n}\r\n```\r\n\r\n### buildChainlinkRequest\r\n\r\n:::note[ Use `buildOperatorRequest` [function](#buildoperatorrequest) if the oracle is an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol).]\r\n\r\n:::\r\n\r\n```solidity example\r\nfunction buildChainlinkRequest(\r\n    bytes32 _jobId,\r\n    address _callbackAddress,\r\n    bytes4 _callbackFunctionSignature\r\n) returns (Chainlink.Request memory request)\r\n```\r\n\r\nInstantiates a Request from the Chainlink contract. A [Request](#chainlinkrequest) is a struct which contains the necessary parameters to be sent to the oracle contract. The `buildChainlinkRequest` function takes an ID, which can be a [Job ID](/chainlink-nodes/oracle-jobs/jobs/), a callback address to receive the resulting data, and a callback function signature to call on the callback address.\r\n\r\n```solidity example\r\nfunction requestPrice()\r\n  public\r\n{\r\n  bytes32 jobId = \"493610cff14346f786f88ed791ab7704\";\r\n  bytes4 selector = this.myCallback.selector;\r\n  // build a request that calls the myCallback function defined\r\n  //   below by specifying the address of this contract and the function\r\n  //   selector of the myCallback\r\n  Chainlink.Request memory request = buildChainlinkRequest(\r\n    jobId,\r\n    address(this),\r\n    selector);\r\n}\r\n```\r\n\r\n### buildOperatorRequest\r\n\r\n:::note[ This function is similar to `buildChainlinkRequest`[function](#buildchainlinkrequest). One major difference is that `buildOperatorRequest` does not allow setting up the address of the callback. The callback address is set to the address of the calling contract.]\r\nIt is recommended to use `buildOperatorRequest` but make sure the oracle you are contacting is an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol).\r\n\r\n:::\r\n\r\n```solidity example\r\nfunction buildOperatorRequest(\r\n    bytes32 _jobId,\r\n    bytes4 _callbackFunctionSignature\r\n) returns (Chainlink.Request memory request)\r\n```\r\n\r\nInstantiates a _Request_ from the Chainlink contract. A [Request](#chainlinkrequest) is a struct that contains the necessary parameters to be sent to the oracle contract. The `buildOperatorRequest` function takes an ID, which can be a [Job ID](/chainlink-nodes/oracle-jobs/jobs/), and a callback function signature to call on the calling contract address.\r\n\r\n```solidity example\r\nfunction requestPrice()\r\n  public\r\n{\r\n  bytes32 jobId = \"493610cff14346f786f88ed791ab7704\";\r\n  bytes4 selector = this.myCallback.selector;\r\n  // build a request that calls the myCallback function defined\r\n  //   below by specifying the function selector of myCallback\r\n  Chainlink.Request memory request = buildOperatorRequest(\r\n    jobId,\r\n    selector);\r\n}\r\n```\r\n\r\n### sendChainlinkRequest\r\n\r\n:::note[ Use `sendOperatorRequest` [function](#sendoperatorrequest) if the oracle is an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol).]\r\n\r\n:::\r\n\r\n```solidity\r\nfunction sendChainlinkRequest(\r\n    Chainlink.Request memory _req,\r\n    uint256 _payment\r\n) returns (bytes32 requestId)\r\n```\r\n\r\nSends the request payload to the stored oracle address. It takes a [Chainlink.Request](#chainlinkrequest) and the amount of LINK to send amount as parameters. The request is serialized and calls `oracleRequest` on the address stored in `chainlinkOracleAddress` via the LINK token's `transferAndCall` method.\r\n\r\n`sendChainlinkRequest` returns the ID of the request. If your application needs to, your contract can store that ID, but you don't need to. The ChainlinkClient helpers will store the ID under the hood, along with the oracle address, and use them when you call `recordChainlinkFulfillment` in your callback function to make sure only that the address you want can call your Chainlink callback function.\r\n\r\n`sendChainlinkRequest` emits a [ChainlinkRequested](#chainlinkrequested) event containing the request ID, if you would like to use it in your Web3 application.\r\n\r\n```solidity example\r\nfunction requestPrice()\r\n  public\r\n{\r\n  Chainlink.Request memory request = buildChainlinkRequest(jobId, address(this), this.callback.selector);\r\n  uint256 paymentAmount = 1 * LINK_DIVISIBILITY / 10; // Equivalent to 0.1 LINK\r\n\r\n  // send the request that you just built\r\n  sendChainlinkRequest(request, paymentAmount);\r\n}\r\n```\r\n\r\n### sendChainlinkRequestTo\r\n\r\n:::note[ Use `sendOperatorRequestTo` [function](#sendoperatorrequestto) if the oracle is an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol).]\r\n\r\n:::\r\n\r\n```solidity\r\nfunction sendChainlinkRequestTo(\r\n  address _oracle,\r\n  Chainlink.Request memory _req,\r\n  uint256 _payment\r\n) returns (bytes32 requestId)\r\n```\r\n\r\nSimilar to [sendChainlinkRequest](#sendchainlinkrequest), `sendChainlinkRequestTo` sends a [Request](#chainlinkrequest) but allows the target oracle to be specified. It requires an address, a Request, and an amount, and returns the `requestId`. This allows a requesting contract to create and track requests sent to multiple oracle contract addresses.\r\n\r\n`sendChainlinkRequestTo` emits a [ChainlinkRequested](#chainlinkrequested) event containing the request ID, if you would like to use it in your Web3 application.\r\n\r\n```solidity example\r\nfunction requestPriceFrom(address _oracle)\r\n  public\r\n{\r\n  Chainlink.Request memory request = buildChainlinkRequest(jobId, address(this), this.callback.callbackSelector);\r\n  uint256 paymentAmount = 1 * LINK_DIVISIBILITY; // = 1 LINK\r\n\r\n  // send the request that you just built to a specified oracle\r\n  sendChainlinkRequestTo(_oracle, request, paymentAmount);\r\n}\r\n```\r\n\r\n### sendOperatorRequest\r\n\r\n:::note[ This function is similar to `sendChainlinkRequest`[function](#sendchainlinkrequest).]\r\nIt is recommended to use `sendOperatorRequest` but make sure the oracle you are contacting is an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol).\r\n\r\n:::\r\n\r\n```solidity\r\nfunction sendOperatorRequest(\r\n    Chainlink.Request memory _req,\r\n    uint256 _payment\r\n) returns (bytes32 requestId)\r\n```\r\n\r\nThe `sendOperatorRequest` function sends the request payload to the stored oracle address. It takes a [Chainlink.Request](#chainlinkrequest) and the amount of LINK to send amount as parameters. The request is serialized and calls `operatorRequest` on the address stored in `chainlinkOracleAddress` using the LINK token's `transferAndCall` method.\r\n\r\n`sendOperatorRequest` returns the ID of the request. Optionally, your contract can store the ID if your application needs it. The `ChainlinkClient` helpers store the ID and the oracle address and use them when you call `recordChainlinkFulfillment` in your callback function. This ensures that only the specified address can call your Chainlink callback function.\r\n\r\n`sendOperatorRequest` emits a [ChainlinkRequested](#chainlinkrequested) event containing the request ID that you can use in your Web3 application.\r\n\r\n```solidity example\r\nfunction requestPrice()\r\n  public\r\n{\r\n  Chainlink.Request memory request = buildOperatorRequest(jobId, this.callback.selector);\r\n  uint256 paymentAmount = 1 * LINK_DIVISIBILITY / 10; // Equivalent to 0.1 LINK\r\n\r\n  // send the request that you just built\r\n  sendOperatorRequest(request, paymentAmount);\r\n}\r\n```\r\n\r\n### sendOperatorRequestTo\r\n\r\n:::note[ This function is similar to `sendChainlinkRequestTo`[function](#sendchainlinkrequestto).]\r\nIt is recommended to use `sendOperatorRequestTo`, but make sure the oracle you are contacting is an `Operator` [contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol).\r\n\r\n:::\r\n\r\n```solidity\r\nfunction sendChainlinkRequestTo(\r\n  address _oracle,\r\n  Chainlink.Request memory _req,\r\n  uint256 _payment\r\n) returns (bytes32 requestId)\r\n```\r\n\r\nSimilar to [sendOperatorRequest](#sendoperatorrequest), `sendOperatorRequestTo` sends a [Request](#chainlinkrequest) but allows the target oracle to be specified. It requires an address, a Request, and an amount, and returns the `requestId`. This allows a requesting contract to create and track requests sent to multiple oracle contract addresses.\r\n\r\n`sendOperatorRequestTo` emits a [ChainlinkRequested](#chainlinkrequested) event containing a request ID that you can use in your Web3 application.\r\n\r\n```solidity example\r\nfunction requestPriceFrom(address _oracle)\r\n  public\r\n{\r\n  Chainlink.Request memory request = buildOperatorRequest(jobId, this.callback.callbackSelector);\r\n  uint256 paymentAmount = 1 * LINK_DIVISIBILITY; // = 1 LINK\r\n\r\n  // send the request that you just built to a specified oracle\r\n  sendOperatorRequestTo(_oracle, request, paymentAmount);\r\n}\r\n```\r\n\r\n### validateChainlinkCallback\r\n\r\n```solidity\r\nfunction validateChainlinkCallback(\r\n    bytes32 _requestId\r\n)\r\n```\r\n\r\nUsed on fulfillment callbacks to ensure that the caller and `requestId` are valid. They protect ChainlinkClient callbacks from being called by malicious callers. `validateChainlinkCallback` allows for a request to be called\r\n\r\nThis is the method equivalent of the modifier `recordChainlinkFulfillment`. Either `validateChainlinkCallback` or `recordChainlinkFulfillment` should be used on all fulfillment functions to ensure that the caller and `requestId` are valid. Use the modifier or the method, not both.\r\n\r\n`validateChainlinkCallback` emits a [ChainlinkFulfilled](#chainlinkfulfilled) event.\r\n\r\n```solidity example\r\nfunction myCallback(bytes32 _requestId, uint256 _price)\r\n  public\r\n{\r\n  validateChainlinkCallback(_requestId);\r\n  currentPrice = _price;\r\n}\r\n```\r\n\r\n:::caution[ Do not call multiple times]\r\n\r\nDo not call `validateChainlinkCallback` multiple times. The nature of validating the callback is to ensure the response is only received once and not replayed. Calling a second time with the same method ID will trigger a revert. Similarly, your callback should validate using either `validateChainlinkCallback` or `recordChainlinkFulfillment`, not both.\r\n\r\n:::\r\n\r\n### addChainlinkExternalRequest\r\n\r\n```solidity\r\nfunction addChainlinkExternalRequest(\r\n  address _oracle,\r\n  bytes32 _requestId\r\n)\r\n```\r\n\r\n`addChainlinkExternalRequest` allows a Chainlink contract to track unfulfilled requests that it hasn't created itself. For example, contract A creates a request and sets the callback for contract B. Contract B needs to know about the request created by contract A so that it can validate the callback when it is executed.\r\n\r\n```solidity example\r\nfunction expectResponseFor(bytes32 _requestId)\r\n  public\r\n{\r\n  addChainlinkExternalRequest(chainlinkOracleAddress(), _requestId);\r\n}\r\n```\r\n\r\n:::caution[ Be careful adding external requests]\r\n\r\nBeing able to change a request means that you can change the data fed into a contract. Permissioning someone to make external requests can allow them to change the outcome of your contract. You should be sure to make sure that they are a trusted to do so. If they are not trusted to do so, you should put the request making logic on-chain where it is auditable and tamperproof.\r\n\r\n:::\r\n\r\n### cancelChainlinkRequest\r\n\r\n```solidity\r\nfunction cancelChainlinkRequest(bytes32 _requestId,\r\n    uint256 _payment,\r\n    bytes4 _callbackFunc,\r\n    uint256 _expiration\r\n)\r\n```\r\n\r\nIn case an oracle node does not respond, it may be necessary to retrieve the LINK used to pay for the unfulfilled request. The `cancelChainlinkRequest` will send the cancel request to the address used for the request, which transfers the amount of LINK back to the requesting contract, and delete it from the tracked requests.\r\n\r\nThe default expiration for a request is five minutes, after which it can be cancelled. The cancellation must be sent by the address which was specified as the callback location of the contract.\r\n\r\nFor the sake of efficient gas usage, only a hash of the request's parameters are stored on-chain. In order to validate the terms of the request and that it can be calculated, the request parameters must be provided. Additionally, cancellation must be called by the address which the callback would otherwise have been called on.\r\n\r\n`cancelChainlinkRequest` emits a [ChainlinkCancelled](#chainlinkcancelled) event.\r\n\r\n```solidity example\r\nfunction cancelRequest(\r\n    bytes32 _requestId,\r\n    uint256 _payment,\r\n    bytes4 _callbackFunc,\r\n    uint256 _expiration\r\n) public {\r\n  cancelChainlinkRequest(_requestId, _payment, _callbackFunc, _expiration);\r\n}\r\n```\r\n\r\n### useChainlinkWithENS\r\n\r\n```solidity\r\nfunction useChainlinkWithENS(\r\n  address _ens,\r\n  bytes32 _node\r\n)\r\n```\r\n\r\nAllows a Chainlink contract to store the addresses of the LINK token and oracle contract addresses without supplying the addresses themselves. We use ENS where available to resolve these addresses. It requires the address of the ENS contract and the node (which is a hash) for the domain.\r\n\r\nIf your Oracle provider supports using ENS for rolling upgrades to their oracle contract, once you've pointed your Chainlinked contract to the ENS records then you can update the records using [updateChainlinkOracleWithENS](#updatechainlinkoraclewithens).\r\n\r\n```solidity example\r\naddress constant ROPSTEN_ENS = 0x112234455C3a32FD11230C42E7Bccd4A84e02010;\r\nbytes32 constant ROPSTEN_CHAINLINK_ENS = 0xead9c0180f6d685e43522fcfe277c2f0465fe930fb32b5b415826eacf9803727;\r\n\r\nconstructor(){\r\n  useChainlinkWithENS(ROPSTEN_ENS, ROPSTEN_CHAINLINK_ENS);\r\n}\r\n```\r\n\r\n:::caution[ Updating oracle addresses]\r\n\r\nIf an oracle provider supports listing their oracle on ENS, that provides the added security of being able to update any issues that may arise. The tradeoff here is that by using their ENS record, you are allowing whoever controls that record and the corresponding code it points to. If your contract does this, you must either audit the updated code and make sure it matches [Oracle.sol](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.6/Oracle.sol) or trust whoever can update the records.\r\n\r\n:::\r\n\r\n### updateChainlinkOracleWithENS\r\n\r\n```solidity\r\nfunction updateChainlinkOracleWithENS()\r\n```\r\n\r\nUpdates the stored oracle contract address with the latest address resolved through the ENS contract. This requires the oracle provider to support listing their address on ENS.\r\n\r\nThis method only works after [useChainlinkWithENS](#usechainlinkwithens) has been called on the contract.\r\n\r\n```solidity example\r\nfunction updateOracleAddressToLatest() public {\r\n  updateChainlinkOracleWithENS();\r\n}\r\n```\r\n\r\n:::caution[ Updating oracle addresses]\r\n\r\nIf an oracle provider supports listing their oracle on ENS, that provides the added security of being able to update any issues that may arise. The tradeoff here is that by using their ENS record, you are allowing whoever controls that record and the corresponding code it points to. If your contract does this, you must either audit the updated code and make sure it matches [Oracle.sol](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.4/Oracle.sol) or trust whoever can update the records.\r\n\r\n:::\r\n\r\n### chainlinkTokenAddress\r\n\r\n```solidity\r\nfunction chainlinkTokenAddress() returns (address)\r\n```\r\n\r\nThe `chainlinkTokenAddress` function is a helper used to return the stored address of the Chainlink token. This variable is protected and so only made available through getters and setters.\r\n\r\n```solidity example\r\nfunction withdrawLink() public {\r\n  LinkTokenInterface link = LinkTokenInterface(chainlinkTokenAddress());\r\n\r\n  require(link.transfer(msg.sender, link.balanceOf(address(this))), \"Unable to transfer\");\r\n}\r\n```\r\n\r\n### chainlinkOracleAddress\r\n\r\nThe `chainlinkOracleAddress` function is a helper used to return the stored address of the oracle contract.\r\n\r\n```solidity example\r\nfunction getOracle() public view returns (address) {\r\n  return chainlinkOracleAddress();\r\n}\r\n\r\n```\r\n\r\n## Events\r\n\r\n### ChainlinkRequested\r\n\r\n```solidity\r\nevent ChainlinkRequested(\r\n  bytes32 indexed id\r\n)\r\n```\r\n\r\nEmitted when [sendChainlinkRequest](#sendchainlinkrequest) and [sendChainlinkRequestTo](#sendchainlinkrequestto) are called. Includes the request ID as an event topic.\r\n\r\n### ChainlinkFulfilled\r\n\r\n```solidity\r\nevent ChainlinkFulfilled(\r\n  bytes32 indexed id\r\n)\r\n```\r\n\r\nEmitted when [validateChainlinkCallback](#validatechainlinkcallback) or [recordChainlinkFulfillment](#recordchainlinkfulfillment) are called. Includes the request ID as an event topic.\r\n\r\n### ChainlinkCancelled\r\n\r\n```solidity\r\nevent ChainlinkCancelled(\r\n  bytes32 indexed id\r\n)\r\n```\r\n\r\nEmitted when [cancelChainlinkRequest](#cancelchainlinkrequest) is called. Includes the request ID as an event topic.\r\n\r\n## Constants\r\n\r\n### LINK_DIVISIBILITY\r\n\r\n`LINK_DIVISIBILITY` is a uint256 constant to represent one whole unit of the LINK token (1000000000000000000). It can be used with another value to specify payment in an easy-to-read format, instead of hardcoding magic numbers.\r\n\r\n```solidity example\r\nuint256 constant private ORACLE_PAYMENT = 100 * LINK_DIVISIBILITY; // = 100 LINK\r\n```\r\n\r\n## Modifiers\r\n\r\n### recordChainlinkFulfillment\r\n\r\n`recordChainlinkFulfillment` is used on fulfillment callbacks to ensure that the caller and `requestId` are valid. This is the method equivalent of the method `validateChainlinkCallback`.\r\n\r\nEither `validateChainlinkCallback` or `recordChainlinkFulfillment` should be used on all Chainlink callback functions to ensure that the sender and `requestId` are valid. They protect ChainlinkClient callbacks from being called by malicious callers. Do not call both of them, or your callback may revert before you can record the reported response.\r\n\r\n```solidity example\r\nfunction myCallback(bytes32 _requestId, uint256 _price)\r\n  public\r\n  recordChainlinkFulfillment(_requestId) // always validate callbacks\r\n{\r\n  currentPrice = _price;\r\n}\r\n```\r\n\r\n## Chainlink.Request\r\n\r\n```solidity\r\nlibrary Chainlink {\r\n  struct Request {\r\n    bytes32 id;\r\n    address callbackAddress;\r\n    bytes4 callbackFunctionId;\r\n    uint256 nonce;\r\n    Buffer.buffer buf;\r\n  }\r\n}\r\n```\r\n\r\nThe Chainlink Request struct encapsulates all of the fields needed for a Chainlink request and its corresponding response callback.\r\n\r\nThe Chainlink protocol aims to be flexible and not restrict application developers. The Solidity Chainlink Request model is a great example of that. It is exceptionally flexible, given the limitations of Solidity. The request can contain an arbitrary amount of keys and values to be passed off-chain to the oracles for each request. It does so by converting the parameters into CBOR, and then storing them in a buffer. This allows for any number of parameters all of different types to be encoded on-chain.\r\n\r\nThe request's ID is generated by hashing the sender's address and the request's nonce. This scheme ensures that only the requester can generate their request ID, and no other contract can trigger a response from an oracle with that ID. New requests whose IDs match an unfulfilled request ID will not be accepted by the oracle.\r\n\r\n:::caution[ Intended for memory]\r\n\r\nThe Request object was intended to be stored in memory. If you have a reason to persist the struct in storage, it is recommended that you do so by copying each attribute over and explicitly copying the bytes in the buffer.\r\n\r\n:::\r\n\r\n### Attributes\r\n\r\n| Name               | Description                                                                                             |\r\n| ------------------ | :------------------------------------------------------------------------------------------------------ |\r\n| id                 | Identifier for the request                                                                              |\r\n| callbackAddress    | Address that the response will be sent to upon fulfillment                                              |\r\n| callbackFunctionId | Selector of the function on the callbackAddress that will be invoked with the response upon fulfillment |\r\n| nonce              | Used to generate the request ID                                                                         |\r\n| buf                | Buffer that stores additional user defined parameters as CBOR                                           |\r\n\r\n### Methods\r\n\r\n| Name                              | Description                                                      |\r\n| :-------------------------------- | ---------------------------------------------------------------- |\r\n| [add](#add)                       | Add a string value to the run request parameters                 |\r\n| [addBytes](#addbytes)             | Add a bytes value to the run request parameters                  |\r\n| [addInt](#addint)                 | Add an integer value to the run request parameters               |\r\n| [addUint](#adduint)               | Add an unsigned integer to the run request parameters            |\r\n| [addStringArray](#addstringarray) | Add an array of strings as a value in the run request parameters |\r\n| [setBuffer](#setbuffer)           | Directly set the CBOR of the run request parameters              |\r\n\r\n#### add\r\n\r\n```solidity\r\nfunction add(\r\n  Request memory self,\r\n  string _key,\r\n  string _value\r\n)\r\n```\r\n\r\nAdd a string value to the run request parameters. Commonly used for `get` with jobs using `httpGet` tasks.\r\n\r\n```solidity example\r\nfunction requestEthereumPrice()\r\n  public\r\n{\r\n  Chainlink.Request memory req = buildChainlinkRequest(jobId, this, this.fulfill.selector);\r\n\r\n  req.add(\"get\", \"https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD,EUR,JPY\");\r\n\r\n  sendChainlinkRequest(req, 1 * LINK_DIVISIBILITY); // =1 LINK\r\n}\r\n```\r\n\r\n#### addBytes\r\n\r\n```solidity\r\nfunction addBytes(\r\n  Request memory self,\r\n  string _key,\r\n  bytes _value\r\n)\r\n```\r\n\r\nAdd a CBOR bytes type value to the run request parameters.\r\n\r\n```solidity example\r\nfunction requestEmojiPopularity(bytes _unicode)\r\n  public\r\n{\r\n  Chainlink.Request memory req = buildChainlinkRequest(jobId, this, this.fulfill.selector);\r\n\r\n  req.addBytes(\"emojiUnicode\", _unicode);\r\n\r\n  sendChainlinkRequest(req, LINK_DIVISIBILITY * 1);\r\n}\r\n```\r\n\r\nNote that this can also be used as a workaround to pass other data types like arrays or addresses. For instance, to add an _address_, one would first encode it using `abi.encode` then pass the result to `addBytes`:\r\n\r\n```solidity\r\nChainlink.Request memory req = buildChainlinkRequest(jobId, this, this.fulfill.selector);\r\n\r\nreq.addBytes(\"address\", abi.encode(msg.sender)); // msg.sender used in this example. Replace it with your address\r\n\r\n```\r\n\r\n#### addInt\r\n\r\n```solidity\r\nfunction addInt(\r\n  Request memory self,\r\n  string _key,\r\n  int256 _value\r\n)\r\n```\r\n\r\nAdd a CBOR signed integer type value to the run request parameters. Commonly used with the `times` parameter of any job using a `multiply` task.\r\n\r\n```solidity example\r\nfunction requestPrice()\r\n  public\r\n{\r\n  Chainlink.Request memory req = buildChainlinkRequest(jobId, this, this.fulfill.selector);\r\n\r\n  req.addInt(\"times\", 100);\r\n\r\n  sendChainlinkRequest(req, LINK_DIVISIBILITY * 1);\r\n}\r\n```\r\n\r\n#### addUint\r\n\r\n```solidity\r\nfunction addUint(\r\n  Request memory self,\r\n  string _key,\r\n  uint256 _value\r\n)\r\n```\r\n\r\nAdd a CBOR unsigned integer type value to the run request parameters. Commonly used with the `times` parameter of any job using a `multiply` task.\r\n\r\n```solidity example\r\nfunction requestPrice()\r\n  public\r\n{\r\n  Chainlink.Request memory req = buildChainlinkRequest(jobId, this, this.fulfill.selector);\r\n\r\n  req.addUint(\"times\", 100);\r\n\r\n  sendChainlinkRequest(req, LINK_DIVISIBILITY * 1);\r\n}\r\n```\r\n\r\n#### addStringArray\r\n\r\n```solidity\r\nfunction addStringArray(\r\n  Request memory self,\r\n  string _key,\r\n  string[] memory _values\r\n)\r\n```\r\n\r\nAdd a CBOR array of strings to the run request parameters. Commonly used with the `path` parameter for any job including a `jsonParse` task.\r\n\r\n```solidity example\r\nfunction requestPrice(string _currency)\r\n  public\r\n{\r\n  Chainlink.Request memory req = buildChainlinkRequest(JOB_ID, this, this.myCallback.selector);\r\n  string[] memory path = new string[](2);\r\n  path[0] = _currency;\r\n  path[1] = \"recent\";\r\n\r\n  // specify templated fields in a job specification\r\n  req.addStringArray(\"path\", path);\r\n\r\n  sendChainlinkRequest(req, PAYMENT);\r\n}\r\n```\r\n\r\n#### setBuffer\r\n\r\n```solidity\r\nfunction setBuffer(\r\n  Request memory self,\r\n  bytes _data\r\n)\r\n```\r\n\r\nSet the CBOR payload directly on the request object, avoiding the cost of encoding the parameters in CBOR. This can be helpful when reading the bytes from storage or having them passed in from off-chain where they were pre-encoded.\r\n\r\n```solidity example\r\nfunction requestPrice(bytes _cbor)\r\n  public\r\n{\r\n  Chainlink.Request memory req = buildChainlinkRequest(JOB_ID, this, this.myCallback.selector);\r\n\r\n  req.setBuffer(_cbor);\r\n\r\n  sendChainlinkRequest(req, PAYMENT);\r\n}\r\n```\r\n\r\n:::caution[ Be careful setting the request buffer directly]\r\n\r\nMoving the CBOR encoding logic off-chain can save some gas, but it also opens up the opportunity for people to encode parameters that not all parties agreed to. Be sure that whoever is permissioned to call `setBuffer` is trusted or auditable.\r\n\r\n:::\r\n"
    },
    {
      "title": "Google Weather Oracle",
      "headings": [
        {
          "depth": 2,
          "slug": "parameters-and-external-adapters-details",
          "text": "Parameters and External Adapters Details"
        },
        {
          "depth": 2,
          "slug": "chainlink-network-details",
          "text": "Chainlink Network Details"
        },
        {
          "depth": 3,
          "slug": "mainnet",
          "text": "Mainnet"
        },
        {
          "depth": 2,
          "slug": "steps-for-using-this-oracle",
          "text": "Steps For Using This Oracle"
        },
        {
          "depth": 2,
          "slug": "create-your-chainlinked-contract",
          "text": "Create your Chainlinked contract"
        },
        {
          "depth": 2,
          "slug": "jobs",
          "text": "Jobs"
        },
        {
          "depth": 2,
          "slug": "rain-bergen-norway",
          "text": "Rain (Bergen, Norway)"
        },
        {
          "depth": 3,
          "slug": "tasks",
          "text": "Tasks"
        },
        {
          "depth": 2,
          "slug": "hail-bergen-norway",
          "text": "Hail (Bergen, Norway)"
        },
        {
          "depth": 3,
          "slug": "tasks-1",
          "text": "Tasks"
        },
        {
          "depth": 2,
          "slug": "average-temperature-bergen-norway",
          "text": "Average Temperature (Bergen, Norway)"
        },
        {
          "depth": 3,
          "slug": "tasks-2",
          "text": "Tasks"
        },
        {
          "depth": 2,
          "slug": "generic-any-location",
          "text": "Generic (Any Location)"
        },
        {
          "depth": 3,
          "slug": "tasks-3",
          "text": "Tasks"
        },
        {
          "depth": 2,
          "slug": "input-parameters",
          "text": "Input Parameters"
        }
      ],
      "url": "/any-api/data-providers/google-weather",
      "section": "ethereum",
      "content": "\r\nYou can use Chainlink to digest weather information using [Google Cloud Public Datasets](https://cloud.google.com/public-datasets). We have a sample brownie repo showing how to interact with the contracts available in our [gcp-weather brownie repo](https://github.com/PatrickAlphaC/gcp-weather). More information on this oracle can be found in the following [Google Cloud article](https://medium.com/google-cloud/hedging-against-bad-weather-with-cloud-datasets-and-blockchain-oracles-7ba3e0150304).\r\n\r\n## Parameters and External Adapters Details\r\n\r\nThese jobs are using a custom external adapter. Please see the [Google weather external adapter](https://github.com/smartcontractkit/external-adapters-js/tree/develop/packages/composites/google-weather) to see information about parameters that can be used with these jobs.\r\n\r\n## Chainlink Network Details\r\n\r\nYou will need to use the following LINK token address, oracle address, and JobSpec IDs in order to create the Chainlink request to this oracle.\r\n\r\n### Mainnet\r\n\r\n| Parameter                 | Value                                                                                                                 |\r\n| :------------------------ | :-------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID`            | `1`                                                                                                                   |\r\n| ChainLink Token Address   | [0x514910771AF9Ca656af840dff83E8264EcF986CA](\"https://etherscan.io/token/0x514910771AF9Ca656af840dff83E8264EcF986CA\") |\r\n| Oracle                    | `0x92c08A635C7525505123F0F8e327C6Fa66E09a18`                                                                          |\r\n| Rain JobID                | `e9c41111b74f454695abd471806d9c6f`                                                                                    |\r\n| Hail JobID                | `941cb4bdd6e746cd933a37c8e92f2f98`                                                                                    |\r\n| Average Temperature JobID | `c6f853860b4f479fbda0910350d695b6`                                                                                    |\r\n| Generic JobID             | `0606a7c2811e4dbab659be400ecd41f9`                                                                                    |\r\n| Fee                       | `1000000000000000000` (1 LINK)                                                                                        |\r\n| Node Operator             | `0x6767eDa1C1d0070cEbdFE1CB3a55e4B63FA02C3E`                                                                          |\r\n\r\n## Steps For Using This Oracle\r\n\r\n- Write and deploy your contract using the network details above.\r\n- Fund it with [LINK](/resources/link-token-contracts/)\r\n- Call your request method\r\n\r\n## Create your Chainlinked contract\r\n\r\nImport `ChainlinkClient.sol` into your contract so you can inherit the `ChainlinkClient` behavior. Below is a sample that can call the hail, rain, and average temperature jobs to fetch weather data from Bergen, Norway.\r\n\r\n::solidity-remix[samples/DataProviders/GoogleWeather.sol]\r\n\r\n## Jobs\r\n\r\n## Rain (Bergen, Norway)\r\n\r\n### Tasks\r\n\r\n1. `gcp-weather`: Makes a call to the google weather dataset\r\n   1. Parameters:\r\n\r\n```json\r\n{\r\n  \"geoJson\": {\r\n    \"type\": \"FeatureCollection\",\r\n    \"features\": [\r\n      {\r\n        \"type\": \"Feature\",\r\n        \"geometry\": {\r\n          \"type\": \"Point\",\r\n          \"coordinates\": [5.325622558593749, 60.3887552979679]\r\n        },\r\n        \"properties\": {}\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n2. `multiply`: Multiples the output - set to `1000000000000000000`\r\n3. `ethuint256`: Turns the result into a `uint256`\r\n4. `ethTx`: Sends the TX to the blockchain\r\n\r\n## Hail (Bergen, Norway)\r\n\r\n### Tasks\r\n\r\n1. `gcp-weather`: Makes a call to the google weather dataset\r\n   1. Parameters\r\n\r\n```json\r\n{\r\n  \"geoJson\": {\r\n    \"type\": \"FeatureCollection\",\r\n    \"features\": [\r\n      {\r\n        \"type\": \"Feature\",\r\n        \"geometry\": {\r\n          \"type\": \"Polygon\",\r\n          \"coordinates\": [\r\n            {\r\n              \"0\": [5.2796173095703125, 60.40673218057448],\r\n              \"1\": [5.164947509765625, 60.383665698324926],\r\n              \"2\": [5.17730712890625, 60.211509994185604],\r\n              \"3\": [5.401153564453124, 60.27694067255946],\r\n              \"4\": [5.6188201904296875, 60.436558668419984],\r\n              \"5\": [5.526123046875, 60.42842688461354],\r\n              \"6\": [5.3002166748046875, 60.5387098888639],\r\n              \"7\": [5.238418579101562, 60.4951151199491],\r\n              \"8\": [5.2796173095703125, 60.40673218057448]\r\n            }\r\n          ]\r\n        },\r\n        \"properties\": {}\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n2. `ethuint256`: Turns the result into a `uint256`\r\n3. `ethTx`: Sends the TX to the blockchain\r\n\r\n## Average Temperature (Bergen, Norway)\r\n\r\n### Tasks\r\n\r\n1. `gcp-weather`: Makes a call to the google weather dataset\r\n   1. Parameters:\r\n\r\n```json\r\n{\r\n  \"geoJson\": {\r\n    \"type\": \"FeatureCollection\",\r\n    \"features\": [\r\n      {\r\n        \"type\": \"Feature\",\r\n        \"geometry\": {\r\n          \"type\": \"Polygon\",\r\n          \"coordinates\": [\r\n            {\r\n              \"0\": [5.2796173095703125, 60.40673218057448],\r\n              \"1\": [5.164947509765625, 60.383665698324926],\r\n              \"2\": [5.17730712890625, 60.211509994185604],\r\n              \"3\": [5.401153564453124, 60.27694067255946],\r\n              \"4\": [5.6188201904296875, 60.436558668419984],\r\n              \"5\": [5.526123046875, 60.42842688461354],\r\n              \"6\": [5.3002166748046875, 60.5387098888639],\r\n              \"7\": [5.238418579101562, 60.4951151199491],\r\n              \"8\": [5.2796173095703125, 60.40673218057448]\r\n            }\r\n          ]\r\n        },\r\n        \"properties\": {}\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n2. `multiply`: Multiples the output - set to `1000000000000000000`\r\n3. `ethuint256`: Turns the result into a `uint256`\r\n4. `ethTx`: Sends the TX to the blockchain\r\n\r\n## Generic (Any Location)\r\n\r\n### Tasks\r\n\r\n1. `gcp-weather`: Makes a call to the google weather dataset\r\n2. `multiply`: Multiples the output\r\n3. `ethuint256`: Turns the result into a `uint256`\r\n4. `ethTx`: Sends the TX to the blockchain\r\n\r\n## Input Parameters\r\n\r\n| Required? |    Name    |                                                                                    Description                                                                                     |                                                                  Options                                                                  | Defaults to |\r\n| :-------: | :--------: | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :---------------------------------------------------------------------------------------------------------------------------------------: | :---------: |\r\n|    ✅     | `geoJson`  |                                                                A GeoJSON object containing the geographies to query                                                                |                                                                                                                                           |             |\r\n|    ✅     | `dateFrom` |                                                             The date to query data from (inclusive) in ISO 8601 format                                                             |                                                                                                                                           |             |\r\n|    ✅     |  `dateTo`  |                                                              The date to query data to (inclusive) in ISO 8601 format                                                              |                                                                                                                                           |             |\r\n|    ✅     |  `method`  |                                                                      Which method to use to aggregate data in                                                                      |                                                        `AVG`, `SUM`, `MIN`, `MAX`                                                         |             |\r\n|    ✅     |  `field`   |                                                                          Which column to fetch data from                                                                           | [Data available](https://github.com/smartcontractkit/external-adapters-js/tree/develop/packages/composites/google-weather#data-available) |             |\r\n|           |  `units`   | What unit system to return the result in ([conversions](https://github.com/smartcontractkit/external-adapters-js/tree/develop/packages/composites/google-weather#unit-conversion)) |                                                           `imperial`, `metric`                                                            | `imperial`  |\r\n\r\nPlease see the [Google weather external adapter](https://github.com/smartcontractkit/external-adapters-js/tree/develop/packages/composites/google-weather) to see information about parameters that can be used with these jobs.\r\n"
    },
    {
      "title": "Data Provider Nodes",
      "headings": [
        {
          "depth": 2,
          "slug": "data-provider-nodes-list",
          "text": "Data Provider Nodes List"
        }
      ],
      "url": "/any-api/data-providers/introduction",
      "section": "ethereum",
      "content": "\r\nChainlink has facilitated the launch of several new oracle data services that allow dApps to access rich data from external data sources. These oracles expand the types of data available on Chainlink and include data and use cases that do not fit into the traditional Chainlink feed model.\r\n\r\nData provider nodes allow customizable, on-demand API calls and the ability to deliver different data points on each request. This enables use cases where each requestor requires a different piece of data.\r\n\r\n:::caution[Select quality data feeds]\r\nBe aware of the quality of the data that you use. [Learn more about making responsible data quality decisions.](/data-feeds/selecting-data-feeds/)\r\n:::\r\n\r\n## Data Provider Nodes List\r\n\r\n| Data Category | Name                                                                                             | Supported Blockchains        |\r\n| ------------- | ------------------------------------------------------------------------------------------------ | ---------------------------- |\r\n| DNS Lookup    | [DNS Ownership Oracle](/any-api/data-providers/dns-ownership/)                              | Ethereum, BNB Chain, Polygon |\r\n| Equities      | [dxFeed Price Oracle](https://market.link/nodes/dxFeed/integrations)                             | Ethereum, BNB Chain          |\r\n| Equities      | [Finage Global Market Data Oracle](https://market.link/nodes/Finage/integrations)                | Ethereum, BNB Chain          |\r\n| Equities      | [Tiingo EOD Stock Price Oracle](https://market.link/nodes/Tiingo/integrations)                   | Ethereum, BNB Chain          |\r\n| Equities      | [TraderMade Real Time CFD and Index Oracle](https://market.link/nodes/TraderMade/integrations)   | Ethereum, BNB Chain          |\r\n| Equities      | [Twelve Data Real Time Asset Price Oracle](https://market.link/nodes/Twelve%20Data/integrations) | Ethereum, Polygon            |\r\n| Equities      | [T3 Index Node](https://market.link/nodes/Twelve%20Data/integrations)                            | Ethereum, BNB Chain          |\r\n| Identity      | [CipherTrace DeFi Compli Oracle](https://market.link/nodes/CipherTrace/integrations)             | Ethereum, BNB Chain, Polygon |\r\n| Real Estate   | [ProspectNow Real Estate Data Oracle](https://market.link/nodes/ProspectNow/integrations)        | Ethereum, Polygon            |\r\n| Real Estate   | [SmartZip Real Estate AVM Oracle](https://market.link/nodes/SmartZip/integrations)               | Ethereum, BNB Chain          |\r\n| Sports        | [SportMonks Sports Data Oracle](https://market.link/nodes/SportMonks/integrations)               | Ethereum, BNB Chain          |\r\n| Sports        | [SportsDataIO Oracle](https://market.link/nodes/SportsDataIO/integrations)                       | Ethereum, Polygon            |\r\n| Sports        | [TheRunDown Oracle Node](https://market.link/nodes/TheRundown/integrations)                      | Ethereum, Polygon            |\r\n| Weather       | [Google Weather Oracle](/any-api/data-providers/google-weather/)                            | Ethereum                     |\r\n"
    },
    {
      "title": "Find Existing Jobs",
      "headings": [
        {
          "depth": 2,
          "slug": "introduction-to-oracles",
          "text": "Introduction to Oracles"
        },
        {
          "depth": 2,
          "slug": "oracle-jobs-and-types-of-data-available",
          "text": "Oracle Jobs and Types of Data Available"
        },
        {
          "depth": 3,
          "slug": "data-provider-nodes",
          "text": "Data provider nodes"
        },
        {
          "depth": 3,
          "slug": "find-a-job",
          "text": "Find a job"
        },
        {
          "depth": 4,
          "slug": "community-node-operators",
          "text": "Community node operators"
        },
        {
          "depth": 4,
          "slug": "alternatives-on-testnets",
          "text": "Alternatives on testnets"
        }
      ],
      "url": "/any-api/find-oracle",
      "section": "ethereum",
      "content": "\r\nThis page explains how to find an existing Oracle Job to suit the needs of your API call.\r\n\r\n## Introduction to Oracles\r\n\r\nOracles enable smart contracts to retrieve data from the outside world. Each oracle node can be configured to perform a wide range of tasks depending on the adapters it supports. For example, if your contract needs to make an HTTP GET request, it needs to use an oracle that supports the HTTP GET adapter.\r\n\r\nOracles [jobs](/chainlink-nodes/oracle-jobs/jobs/) can be specialized even further by implementing the configuration using [External Adapters](/chainlink-nodes/external-adapters/external-adapters/). For example, an Oracle job could implement URL, parameters, and conversion to Solidity compatible data, to retrieve a very specific piece of data from a specific API endpoint. This process is demonstrated in [Make an Existing Job Request](/any-api/get-request/examples/existing-job-request/).\r\n\r\n## Oracle Jobs and Types of Data Available\r\n\r\n### Data provider nodes\r\n\r\nChainlink has facilitated the launch of several oracle data services that allow dApps to access rich data from external data sources through provider-owned nodes. The full list of such provider nodes is available here:\r\n\r\n- [Data Provider Node List](/any-api/data-providers/introduction/#data-provider-nodes-list)\r\n\r\n### Find a job\r\n\r\n#### Community node operators\r\n\r\nTo find an Oracle Job that is pre-configured for your use case and available on the right network, join the [Chainlink operator-requests discord channel](https://discord.gg/eGcxsdZzKR) to directly communicate with community node operators.\r\n\r\n#### Alternatives on testnets\r\n\r\nOn testnets, several alternatives are provided:\r\n\r\n- The Chainlink Development Relations team maintains [Testnet Oracles](/any-api/testnet-oracles/) that you can use to test implementations. If you don't find a suitable job for your needs, join [Chainlink operator-requests discord channel](https://discord.gg/eGcxsdZzKR) or check the other alternatives below.\r\n- You can also deploy testnet nodes and external adapters on [naas.link](https://naas.link/). You must write your own [jobs](/chainlink-nodes/oracle-jobs/jobs/): To help you get started, each [ANY API tutorial](/any-api/get-request/introduction/) has a corresponding job attached to it. **Note:** [naas.link](https://naas.link) is managed by [linkpool.io](https://linkpool.io/). Refer to the contact section at the bottom of the page for more assistance.\r\n- Run your own testnet nodes as explained [here](/chainlink-nodes/running-a-chainlink-node/). You must write your own [jobs](/chainlink-nodes/oracle-jobs/jobs/): To help you get started, each [ANY API tutorial](/any-api/get-request/introduction/) has a corresponding job attached to it.\r\n"
    },
    {
      "title": "Array Response",
      "headings": [
        {
          "depth": 2,
          "slug": "example",
          "text": "Example"
        }
      ],
      "url": "/any-api/get-request/examples/array-response",
      "section": "ethereum",
      "content": "\r\nThis guide explains how to make an HTTP GET request to an external API, that returns a _json_ array, from a smart contract, using Chainlink's [Request & Receive Data](/any-api/introduction/) cycle and then receive the needed data from the array.\r\n\r\n<AnyApiCallout callout=\"prerequisites\" />\r\n\r\n## Example\r\n\r\nThis example shows how to:\r\n\r\n- Call an API that returns a JSON array.\r\n- Fetch a specific information from the response.\r\n\r\n[Coingecko _GET /coins/markets/_ API](https://www.coingecko.com/en/api/documentation) returns a list of coins and their market data such as price, market cap, and volume. To check the response, you can directly paste the following URL in your browser `https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false` or run this command in your terminal:\r\n\r\n```bash\r\ncurl -X 'GET' \\\r\n  'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false' \\\r\n  -H 'accept: application/json'\r\n```\r\n\r\nThe response should be similar to the following:\r\n\r\n```json\r\n[\r\n  {\r\n    \"id\": \"bitcoin\",\r\n    \"symbol\": \"btc\",\r\n    \"name\": \"Bitcoin\",\r\n    \"image\": \"https://assets.coingecko.com/coins/images/1/large/bitcoin.png?1547033579\",\r\n    \"current_price\": 42097,\r\n    \"market_cap\": 802478449872,\r\n    ...\r\n  },\r\n  {\r\n    ...\r\n  }\r\n]\r\n```\r\n\r\nFetch the _id_ of the first element. To consume an API, your contract must import [ChainlinkClient.sol](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/ChainlinkClient.sol). This contract exposes a struct named `Chainlink.Request`, which your contract can use to build the API request. The request must include the following parameters:\r\n\r\n- Link token address\r\n- Oracle address\r\n- Job id\r\n- Request fee\r\n- Task parameters\r\n- Callback function signature\r\n\r\n:::caution[ Note on Funding Contracts]\r\n\r\nMaking a GET request will fail unless your deployed contract has enough LINK to pay for it. **Learn how to [Acquire testnet LINK](/resources/acquire-link/) and [Fund your contract](/resources/fund-your-contract/)**.\r\n\r\n:::\r\n\r\n::solidity-remix[samples/APIRequests/FetchFromArray.sol]\r\n\r\nTo use this contract:\r\n\r\n1. Open the [contract in Remix](https://remix.ethereum.org/#url=https://docs.chain.link/samples/APIRequests/FetchFromArray.sol).\r\n\r\n1. Compile and deploy the contract using the Injected Provider environment. The contract includes all the configuration variables for the _Goerli_ testnet. Make sure your wallet is set to use _Goerli_. The _constructor_ sets the following parameters:\r\n\r\n   - The Chainlink Token address for _Goerli_ by calling the [`setChainlinkToken`](/any-api/api-reference/#setchainlinktoken) function.\r\n   - The Oracle contract address for _Goerli_ by calling the [`setChainlinkOracle`](/any-api/api-reference/#setchainlinkoracle) function.\r\n   - The `jobId`: A specific job for the oracle node to run. In this case, the _id_ is a _string_ data type, so you must call a job that calls an API and returns a _string_. We will be using a generic **_GET>string_** job that can be found [here](/any-api/testnet-oracles/#jobs).\r\n\r\n1. Fund your contract with 0.1 LINK. To learn how to send LINK to contracts, read the [Fund Your Contracts](/resources/fund-your-contract/) page.\r\n\r\n1. Call the `id` function to confirm that the `id` state variable is not set.\r\n\r\n1. Run the `requestFirstId` function. This builds the `Chainlink.Request` using the correct parameters. The `req.add(\"path\", \"0,id\")` request parameter tells the oracle node to fetch the id at index 0 of the array returned by the GET request. It uses [JSONPath expression](https://jsonpath.com/) with comma `,` delimited string for nested objects, for example: `'0,id'`.\r\n\r\n1. After few seconds, call the `id` function. You should get a non-empty response: _bitcoin_\r\n\r\n<AnyApiCallout callout=\"common\" />\r\n"
    },
    {
      "title": "Existing Job Request",
      "headings": [
        {
          "depth": 2,
          "slug": "example",
          "text": "Example"
        }
      ],
      "url": "/any-api/get-request/examples/existing-job-request",
      "section": "ethereum",
      "description": "Learn how to utilize existing Chainlink external adapters to make calls to APIs from smart contracts.",
      "content": "\r\nUsing an _existing_ Oracle Job makes your smart contract code more succinct. This page explains how to retrieve the gas price from an existing Chainlink job that calls [etherscan gas tracker API](https://docs.etherscan.io/api-endpoints/gas-tracker#get-gas-oracle).\r\n\r\n<AnyApiCallout callout=\"prerequisites\" />\r\n\r\n## Example\r\n\r\nIn [Single Word Response Example](/any-api/get-request/examples/single-word-response/), the example contract code declared which URL to use, where to find the data in the response, and how to convert it so that it can be represented on-chain.\r\n\r\nThis example uses an existing job that is pre-configured to make requests to get [the gas price](https://docs.etherscan.io/api-endpoints/gas-tracker#get-gas-oracle). Using specialized jobs makes your contracts succinct and more simple.\r\n\r\n[Etherscan gas oracle](https://docs.etherscan.io/api-endpoints/gas-tracker#get-gas-oracle) returns the current Safe, Proposed and Fast gas prices. To check the response, you can directly paste the following URL in your browser `https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey=YourApiKeyToken` or run this command in your terminal:\r\n\r\n```bash\r\ncurl -X 'GET' \\\r\n  'https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey=YourApiKeyToken' \\\r\n  -H 'accept: application/json'\r\n```\r\n\r\nThe response should be similar to the following:\r\n\r\n```json\r\n{\r\n  \"status\": \"1\",\r\n  \"result\": {\r\n    \"LastBlock\": \"14653286\",\r\n    \"SafeGasPrice\": \"33\",\r\n    \"ProposeGasPrice\": \"33\",\r\n    \"FastGasPrice\": \"35\",\r\n    \"suggestBaseFee\": \"32.570418457\",\r\n    \"gasUsedRatio\": \"0.366502543599508,0.15439818258491,0.9729006,0.4925609,0.999657066666667\"\r\n  }\r\n}\r\n```\r\n\r\nFor this example, we created a job that leverages the [EtherScan External Adapter](https://github.com/smartcontractkit/external-adapters-js/tree/develop/packages/sources/etherscan) to fetch the _SafeGasPrice_ , _ProposeGasPrice_ and _FastGasPrice_. You can learn more about External Adapters [here](/chainlink-nodes/external-adapters/external-adapters/).\r\nTo consume an API, your contract must import [ChainlinkClient.sol](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/ChainlinkClient.sol). This contract exposes a struct named `Chainlink.Request`, which your contract can use to build the API request. The request must include the following parameters:\r\n\r\n- Link token address\r\n- Oracle address\r\n- Job id\r\n- Request fee\r\n- Task parameters\r\n- Callback function signature\r\n\r\n:::caution[ Note on Funding Contracts]\r\n\r\nMaking a GET request will fail unless your deployed contract has enough LINK to pay for it. **Learn how to [Acquire testnet LINK](/resources/acquire-link/) and [Fund your contract](/resources/fund-your-contract/)**.\r\n\r\n:::\r\n\r\n::solidity-remix[samples/APIRequests/GetGasPrice.sol]\r\n\r\nTo use this contract:\r\n\r\n1. Open the [contract in Remix](https://remix.ethereum.org/#url=https://docs.chain.link/samples/APIRequests/GetGasPrice.sol).\r\n\r\n1. Compile and deploy the contract using the Injected Provider environment. The contract includes all the configuration variables for the _Goerli_ testnet. Make sure your wallet is set to use _Goerli_. The _constructor_ sets the following parameters:\r\n\r\n   - The Chainlink Token address for _Goerli_ by calling the [`setChainlinkToken`](/any-api/api-reference/#setchainlinktoken) function.\r\n   - The Oracle contract address for _Goerli_ by calling the [`setChainlinkOracle`](/any-api/api-reference/#setchainlinkoracle) function.\r\n   - The `jobId`: A specific job for the oracle node to run. In this case, the job is very specific to the use case as it returns the gas prices. You can find the job spec for the Chainlink node [here](/chainlink-nodes/job-specs/direct-request-existing-job/).\r\n\r\n1. Fund your contract with 0.1 LINK. To learn how to send LINK to contracts, read the [Fund Your Contracts](/resources/fund-your-contract/) page.\r\n\r\n1. Call the `gasPriceFast`, `gasPriceAverage` and `gasPriceSafe` functions to confirm that the `gasPriceFast`, `gasPriceAverage` and `gasPriceSafe` state variables are equal to zero.\r\n\r\n1. Run the `requestGasPrice` function. This builds the `Chainlink.Request`. Note how succinct the request is.\r\n\r\n1. After few seconds, call the `gasPriceFast`, `gasPriceAverage` and `gasPriceSafe` functions. You should get a non-zero responses.\r\n\r\n<AnyApiCallout callout=\"common\" />\r\n"
    },
    {
      "title": "Large Responses",
      "headings": [
        {
          "depth": 2,
          "slug": "example",
          "text": "Example"
        }
      ],
      "url": "/any-api/get-request/examples/large-responses",
      "section": "ethereum",
      "content": "\r\nThis guide explains how to make an HTTP GET request to an external API from a smart contract, using Chainlink's [Request & Receive Data](/any-api/introduction/) cycle and then receive large responses.\r\n\r\n<AnyApiCallout callout=\"prerequisites\" />\r\n\r\n## Example\r\n\r\nThis example shows how to:\r\n\r\n- Call an API and fetch the response that is an arbitrary-length raw byte data.\r\n\r\n[IPFS](https://docs.ipfs.io/) is a decentralized file system for storing and accessing files, websites, applications, and data. For this example, we stored in IPFS a _JSON_ file that contains arbitrary-length raw byte data. To check the response, directly paste the following URL in your browser: `https://ipfs.io/ipfs/QmZgsvrA1o1C8BGCrx6mHTqR1Ui1XqbCrtbMVrRLHtuPVD?filename=big-api-response.json` Alternatively, run the following command in your terminal:\r\n\r\n```bash\r\ncurl -X 'GET' \\\r\n  'https://ipfs.io/ipfs/QmZgsvrA1o1C8BGCrx6mHTqR1Ui1XqbCrtbMVrRLHtuPVD?filename=big-api-response.json' \\\r\n  -H 'accept: application/json'\r\n```\r\n\r\nThe response should be similar to the following:\r\n\r\n```json\r\n{\r\n  \"image\": \"0x68747470733a2f2f697066732e696f2f697066732f516d5358416257356b716e3259777435444c336857354d736a654b4a4839724c654c6b51733362527579547871313f66696c656e616d653d73756e2d636861696e6c696e6b2e676966\"\r\n}\r\n```\r\n\r\nFetch the value of _image_. To consume an API, your contract must import [ChainlinkClient.sol](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/ChainlinkClient.sol). This contract exposes a struct named `Chainlink.Request`, which your contract can use to build the API request. The request must include the following parameters:\r\n\r\n- Link token address\r\n- Oracle address\r\n- Job id\r\n- Request fee\r\n- Task parameters\r\n- Callback function signature\r\n\r\n:::caution[ Note on Funding Contracts]\r\n\r\nMaking a GET request will fail unless your deployed contract has enough LINK to pay for it. **Learn how to [Acquire testnet LINK](/resources/acquire-link/) and [Fund your contract](/resources/fund-your-contract/)**.\r\n\r\n:::\r\n\r\n::solidity-remix[samples/APIRequests/GenericBigWord.sol]\r\n\r\nTo use this contract:\r\n\r\n1. Open the [contract in Remix](https://remix.ethereum.org/#url=https://docs.chain.link/samples/APIRequests/GenericBigWord.sol).\r\n\r\n1. Compile and deploy the contract using the Injected Provider environment. The contract includes all the configuration variables for the _Goerli_ testnet. Make sure your wallet is set to use _Goerli_. The _constructor_ sets the following parameters:\r\n\r\n   - The Chainlink Token address for _Goerli_ by calling the [`setChainlinkToken`](/any-api/api-reference/#setchainlinktoken) function.\r\n   - The Oracle contract address for _Goerli_ by calling the [`setChainlinkOracle`](/any-api/api-reference/#setchainlinkoracle) function.\r\n   - The `jobId`: A specific job for the oracle node to run. In this case, the _data_ is a _bytes_ data type, so you must call a job that calls an API and returns _bytes_. We will be using a generic **_GET>bytes_** job that can be found [here](/any-api/testnet-oracles/#jobs).\r\n\r\n1. Fund your contract with 0.1 LINK. To learn how to send LINK to contracts, read the [Fund Your Contracts](/resources/fund-your-contract/) page.\r\n\r\n1. Call the `data` and `image_url` functions to confirm that the `data` and `image_url` state variables are not set.\r\n\r\n1. Run the `requestBytes` function. This builds the `Chainlink.Request` using the correct parameters:\r\n\r\n   - The `req.add(\"get\", \"<url>\")` request parameter provides the oracle node with the [url](https://ipfs.io/ipfs/QmZgsvrA1o1C8BGCrx6mHTqR1Ui1XqbCrtbMVrRLHtuPVD?filename=big-api-response.json) where to fetch the response.\r\n   - The `req.add('path', 'image')` request parameter tells the oracle node how to parse the response.\r\n\r\n1. After few seconds, call the `data` and `image_url` functions. You should get non-empty responses.\r\n\r\n<AnyApiCallout callout=\"common\" />\r\n"
    },
    {
      "title": "Multi-Variable Responses",
      "headings": [
        {
          "depth": 2,
          "slug": "example",
          "text": "Example"
        }
      ],
      "url": "/any-api/get-request/examples/multi-variable-responses",
      "section": "ethereum",
      "content": "\r\nThis guide explains how to make an HTTP GET request to an external API from a smart contract, using Chainlink's [Request & Receive Data](/any-api/introduction/) cycle and then receive multiple responses.\r\nThis is known as **multi-variable** or **multi-word** responses.\r\n\r\n<AnyApiCallout callout=\"prerequisites\" />\r\n\r\n## Example\r\n\r\nThis example shows how to:\r\n\r\n- Fetch several responses in one single call.\r\n\r\n[Cryptocompare GET /data/price/ API](https://min-api.cryptocompare.com/documentation?key=Price&cat=SingleSymbolPriceEndpoint) returns the current price of any cryptocurrency in any other currency that you need. To check the response, you can directly paste the following URL in your browser `https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=BTC` or run this command in your terminal:\r\n\r\n```bash\r\ncurl -X 'GET' \\\r\n  'https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=BTC' \\\r\n  -H 'accept: application/json'\r\n```\r\n\r\nThe response should be similar to the following:\r\n\r\n```json\r\n{\r\n  \"BTC\": 0.07297\r\n}\r\n```\r\n\r\nThe request above shows how to get the price of _ETH_ against _BTC_. Now let say we want the price of _ETH_ against several currencies: _BTC_, _USD_, and _EUR_. Our contract will have to support receiving multiple responses.\r\nTo consume an API with multiple responses, your contract should inherit from [ChainlinkClient](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/ChainlinkClient.sol). This contract exposes a struct called `Chainlink.Request`, which your contract should use to build the API request. The request should include the following parameters:\r\n\r\n- Link token address\r\n- Oracle address\r\n- Job id\r\n- Request fee\r\n- Task parameters\r\n- Callback function signature\r\n\r\n:::caution[ Note on Funding Contracts]\r\n\r\nMaking a GET request will fail unless your deployed contract has enough LINK to pay for it. **Learn how to [Acquire testnet LINK](/resources/acquire-link/) and [Fund your contract](/resources/fund-your-contract/)**.\r\n\r\n:::\r\n\r\nAssume that a user wants to obtain the ETH price quoted against three different currencies: _BTC_ , _USD_ and _EUR_. If they use only a single-word job, it would require three different requests. For a comparison, see the [Single Word Response](/any-api/get-request/examples/single-word-response/) example. To make these requests more efficient, use multi-word responses to do it all in a single request as shown in the following example:\r\n\r\n::solidity-remix[samples/APIRequests/MultiWordConsumer.sol]\r\n\r\nTo use this contract:\r\n\r\n1. [Open the contract in Remix](https://remix.ethereum.org/#url=https://docs.chain.link/samples/APIRequests/MultiWordConsumer.sol).\r\n\r\n1. Compile and deploy the contract using the Injected Provider environment. The contract includes all the configuration variables for the _Goerli_ testnet. Make sure your wallet is set to use _Goerli_. The _constructor_ sets the following parameters:\r\n\r\n   - The Chainlink Token address for _Goerli_ by calling the [`setChainlinkToken`](/any-api/api-reference/#setchainlinktoken) function.\r\n   - The Oracle contract address for _Goerli_ by calling the [`setChainlinkOracle`](/any-api/api-reference/#setchainlinkoracle) function.\r\n   - The `jobId`: A specific job for the oracle node to run. In this case, you must call a job that is specifically configured to return _ETH_ price against _BTC_, _USD_ and _EUR_. You can find the job spec for the Chainlink node [here](/chainlink-nodes/job-specs/multi-word-job/).\r\n\r\n1. Fund your contract with 0.1 LINK. To learn how to send LINK to contracts, read the [Fund Your Contracts](/resources/fund-your-contract/) page.\r\n\r\n1. Call the `btc`, `usd` , and `eur` functions to confirm that the respective `btc`, `usd` , and `eur` state variables are equal to _zero_.\r\n\r\n1. Run the `requestMultipleParameters` function. This builds the `Chainlink.Request` using the correct parameters:\r\n\r\n   - The `req.add(\"urlBTC\", \"<cryptocompareETHBTCURL>\")` request parameter provides the oracle node with the [url](https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=BTC) where to fetch the _ETH-BTC_ price. Same logic for `req.add(\"urlEUR\", \"<cryptocompareETHEURURL>\")` and `req.add(\"urlUSD\", \"<cryptocompareETHUSDURL>\")`.\r\n   - THe `req.add('pathBTC', 'BTC')` request parameter tells the oracle node where to fetch the _ETH-BTC_ price in the _json_ response. Same logic for `req.add('pathUSD', 'EUR')` and `req.add('pathEUR', 'USD')`.\r\n     Because you provide the URLs and paths, the `MultiWordConsumer` in the example can call any public API as long as the URLs and paths are correct.\r\n\r\n1. After few seconds, call the `btc`, `usd` , and `eur` functions. You should get a non-zero responses.\r\n   The job spec for the Chainlink node in this example can be found [here](/chainlink-nodes/job-specs/multi-word-job/).\r\n\r\n<AnyApiCallout callout=\"common\" />\r\n"
    },
    {
      "title": "Single Word Response",
      "headings": [
        {
          "depth": 2,
          "slug": "example",
          "text": "Example"
        }
      ],
      "url": "/any-api/get-request/examples/single-word-response",
      "section": "ethereum",
      "description": "Learn how to make a GET request to an API from a smart contract, using Chainlink.",
      "content": "\r\nThis guide explains how to make an HTTP GET request to an external API from a smart contract using Chainlink's [Request & Receive Data](/any-api/introduction/) cycle and receive a single response.\r\n\r\n<AnyApiCallout callout=\"prerequisites\" />\r\n\r\n## Example\r\n\r\nThis example shows how to:\r\n\r\n- Fetch a single word response in a single call.\r\n\r\nThe [Cryptocompare GET /data/pricemultifull API](https://min-api.cryptocompare.com/documentation?key=Price&cat=multipleSymbolsFullPriceEndpoint) returns the current trading info (price, vol, open, high, low) of any list of cryptocurrencies in any other currency that you need. To check the response, you can directly paste the following URL in your browser `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&tsyms=USD` or run this command in your terminal:\r\n\r\n```bash\r\ncurl -X 'GET' \\\r\n  'https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&tsyms=USD' \\\r\n  -H 'accept: application/json'\r\n```\r\n\r\nThe response should be similar to the following example:\r\n\r\n```json\r\n{\r\n  \"RAW\": {\r\n    \"ETH\": {\r\n      \"USD\": {\r\n        \"TYPE\": \"5\",\r\n        \"MARKET\": \"CCCAGG\",\r\n        \"FROMSYMBOL\": \"ETH\",\r\n        \"TOSYMBOL\": \"USD\",\r\n        \"FLAGS\": \"2049\",\r\n        \"PRICE\": 2867.04,\r\n        \"LASTUPDATE\": 1650896942,\r\n        \"MEDIAN\": 2866.2,\r\n        \"LASTVOLUME\": 0.16533939,\r\n        \"LASTVOLUMETO\": 474.375243849,\r\n        \"LASTTRADEID\": \"1072154517\",\r\n        \"VOLUMEDAY\": 195241.78281014622,\r\n        \"VOLUMEDAYTO\": 556240560.4621655,\r\n        \"VOLUME24HOUR\": 236248.94641103,\r\n        ...\r\n}\r\n```\r\n\r\nTo consume an API with multiple responses, your contract must import [ChainlinkClient](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/ChainlinkClient.sol). This contract exposes a struct called `Chainlink.Request`, which your contract should use to build the API request. The request should include the following parameters:\r\n\r\n- Link token address\r\n- Oracle address\r\n- Job id\r\n- Request fee\r\n- Task parameters\r\n- Callback function signature\r\n\r\n:::caution[ Note on Funding Contracts]\r\n\r\nMaking a GET request will fail unless your deployed contract has enough LINK to pay for it. **Learn how to [Acquire testnet LINK](/resources/acquire-link/) and [Fund your contract](/resources/fund-your-contract/)**.\r\n\r\n:::\r\n\r\nAssume that a user wants to call the API above and retrieve only the 24h ETH trading volume from the response.\r\n\r\n::solidity-remix[samples/APIRequests/APIConsumer.sol]\r\n\r\nTo use this contract:\r\n\r\n1. Open the [contract in Remix](https://remix.ethereum.org/#url=https://docs.chain.link/samples/APIRequests/APIConsumer.sol).\r\n\r\n1. Compile and deploy the contract using the Injected Provider environment. The contract includes all the configuration variables for the _Goerli_ testnet. Make sure your wallet is set to use _Goerli_. The _constructor_ sets the following parameters:\r\n\r\n   - The Chainlink Token address for _Goerli_ by calling the [`setChainlinkToken`](/any-api/api-reference/#setchainlinktoken) function.\r\n   - The Oracle contract address for _Goerli_ by calling the [`setChainlinkOracle`](/any-api/api-reference/#setchainlinkoracle) function.\r\n   - The `jobId`: A specific job for the oracle node to run. In this case, you must call a job that is configured to call a public API, parse a number from the response and remove any decimals from it. We are going to use a generic **_GET>uint256_** job that can be found [here](/any-api/testnet-oracles/#jobs).\r\n\r\n1. Fund your contract with 0.1 LINK. To learn how to send LINK to contracts, read the [Fund Your Contracts](/resources/fund-your-contract/) page.\r\n\r\n1. Call the `volume` function to confirm that the `volume` state variable is equal to _zero_.\r\n\r\n1. Run the `requestVolumeData` function. This builds the `Chainlink.Request` using the correct parameters:\r\n\r\n   - The `req.add(\"get\", \"<cryptocompareURL>\")` request parameter provides the oracle node with the [URL](https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&tsyms=USD) from which to fetch _ETH-USD_ trading info.\r\n   - The `req.add('path', 'RAW,ETH,USD,VOLUME24HOUR')` request parameter tells the oracle node where to fetch the 24h ETH volume in the _json_ response. It uses a [JSONPath expression](https://jsonpath.com/) with comma(,) delimited string for nested objects. For example: `'RAW,ETH,USD,VOLUME24HOUR'`.\r\n   - The `req.addInt('times', timesAmount)` request parameter provides the oracle node with the multiplier `timesAmount` by which the fetched volume is multiplied. Use this to remove any decimals from the volume. **_Note_**: The `times` parameter is mandatory. If the API that you call returns a number without any decimals then provide `1`as `timesAmount`.\r\n     The `APIConsumer` in the example above is flexible enough to call any public API as long as the URL in _get_, _path_, and _timesAmounnt_ are correct.\r\n\r\n1. After few seconds, call the `volume` function. You should get a non-zero response.\r\n\r\n<AnyApiCallout callout=\"common\" />\r\n"
    },
    {
      "title": "Make a GET Request",
      "headings": [
        {
          "depth": 2,
          "slug": "examples",
          "text": "Examples"
        },
        {
          "depth": 3,
          "slug": "single-word-response",
          "text": "Single Word Response"
        },
        {
          "depth": 3,
          "slug": "multi-variable-responses",
          "text": "Multi-Variable Responses"
        },
        {
          "depth": 3,
          "slug": "fetch-data-from-an-array",
          "text": "Fetch data from an Array"
        },
        {
          "depth": 3,
          "slug": "large-responses",
          "text": "Large Responses"
        },
        {
          "depth": 3,
          "slug": "make-an-existing-job-request",
          "text": "Make an Existing Job Request"
        }
      ],
      "url": "/any-api/get-request/introduction",
      "section": "ethereum",
      "description": "Learn how to make a GET request to an API from a smart contract, using Chainlink.",
      "content": "\r\nThis series of guides explains how to make HTTP GET requests to external APIs from smart contracts, using Chainlink's [Request & Receive Data](/any-api/introduction/) cycle.\r\n\r\n<AnyApiCallout callout=\"common\" />\r\n\r\n## Examples\r\n\r\n### Single Word Response\r\n\r\nThis [guide](/any-api/get-request/examples/single-word-response/) explains how to make an HTTP GET request and parse the _json_ response to retrieve the value of one single attribute.\r\n\r\n### Multi-Variable Responses\r\n\r\nThis [guide](/any-api/get-request/examples/multi-variable-responses/) explains how to make an HTTP GET request and parse the _json_ response to retrieve the values of multiple attributes.\r\n\r\n### Fetch data from an Array\r\n\r\nThis [guide](/any-api/get-request/examples/array-response/) explains how to make an HTTP GET request that returns a _json_ array and parse it to retrieve the target element's value.\r\n\r\n### Large Responses\r\n\r\nThis [guide](/any-api/get-request/examples/large-responses/) explains how to make an HTTP Get request that returns a _json_ containing an arbitrary-length raw byte data and parse it to return the data as _bytes_ data type.\r\n\r\n### Make an Existing Job Request\r\n\r\nThis [guide](/any-api/get-request/examples/existing-job-request/) explains how to call a job that leverages [External adapters](/chainlink-nodes/external-adapters/external-adapters/) and returns the relevant data to the smart contract. This allows building succinct smart contracts that do not need to comprehend the URL or the response format of the target API.\r\n"
    },
    {
      "title": "Chainlink Any API Documentation",
      "headings": [
        {
          "depth": 3,
          "slug": "requesting-off-chain-data",
          "text": "Requesting off-chain data"
        },
        {
          "depth": 3,
          "slug": "building-external-adapters",
          "text": "Building external adapters"
        }
      ],
      "url": "/any-api/introduction",
      "section": "ethereum",
      "description": "Chainlink provides your smart contract with access to any external API. Learn how to integration any API into your smart contract.",
      "content": "\r\n![Chainlink Any API](/files/8c35025-Request__Receive_Data.png)\r\n\r\n**Connecting to any API** with Chainlink enables your contracts to access to _any_ external data source through our decentralized oracle network. We understand making smart contracts compatible with off-chain data adds to the complexity of building smart contracts. We created a framework with minimal requirements, yet unbounded flexibility, so developers can focus more on the functionality of smart contracts rather than what feeds them. Chainlink’s decentralized oracle network provides smart contracts with the ability to push and pull data, facilitating the interoperability between on-chain and off-chain applications.\r\n\r\nWhether your contract requires sports results, the latest weather, or any other publicly available data, the [Chainlink contract library](https://github.com/smartcontractkit/chainlink/tree/master/contracts) provides the tools required for your contract to consume it.\r\n\r\n<AnyApiCallout callout=\"prerequisites\" />\r\n\r\n:::note[ Note on Price Feed Data]\r\n\r\nIf your smart contracts need access to price feed data, try using [Chainlink Data Feeds](/data-feeds/).\r\n\r\n:::\r\n\r\n**Topics**\r\n\r\n- [Requesting off-chain data](#requesting-off-chain-data)\r\n- [Building external adapters](#building-external-adapters)\r\n\r\n### Requesting off-chain data\r\n\r\nOutlined below are multiple ways developers can connect smart contracts to off-chain data feeds. Click a request type to learn more about it:\r\n\r\n| Request Type                                                                                 | Description                                                                                                                                                                                                                                                                                                         |\r\n| -------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| [HTTP GET Single Word Response](/any-api/get-request/examples/single-word-response/)         | This guide explains how to make an HTTP GET request and parse the _json_ response to retrieve the value of one single attribute.                                                                                                                                                                                    |\r\n| [HTTP GET Multi-Variable Responses](/any-api/get-request/examples/multi-variable-responses/) | This guide explains how to make an HTTP GET request and parse the _json_ response to retrieve the values of multiple attributes.                                                                                                                                                                                    |\r\n| [HTTP GET Element in Array Response](/any-api/get-request/examples/array-response/)          | This guide explains how to make an HTTP GET request that returns a _json_ array and parse it to retrieve the target element's value.                                                                                                                                                                                |\r\n| [HTTP GET Large Reponses](/any-api/get-request/examples/large-responses/)                    | This guide explains how to make an HTTP Get request that returns a _json_ containing an arbitrary-length raw byte data and parse it to return the data as _bytes_ data type.                                                                                                                                        |\r\n| [Existing Job Request](/any-api/get-request/examples/existing-job-request/)                  | This guide explains how to call a job that leverages [External adapters](/chainlink-nodes/external-adapters/external-adapters/) and returns the relevant data to the smart contract. This allows building succinct smart contracts that do not need to comprehend the URL or the response format of the target API. |\r\n\r\n### Building external adapters\r\n\r\nTo learn more about building external adapters and adding them to nodes, refer to the [External Adapters](/chainlink-nodes/external-adapters/external-adapters/) documentation.\r\n\r\nTo understand different use cases for using any API, refer to [Other Tutorials](/getting-started/other-tutorials/).\r\n"
    },
    {
      "title": "Testnet Oracles",
      "headings": [
        {
          "depth": 2,
          "slug": "operator-contracts",
          "text": "Operator Contracts"
        },
        {
          "depth": 2,
          "slug": "jobs",
          "text": "Jobs"
        },
        {
          "depth": 3,
          "slug": "job-ids",
          "text": "Job IDs"
        },
        {
          "depth": 3,
          "slug": "examples",
          "text": "Examples"
        },
        {
          "depth": 4,
          "slug": "get--bytes",
          "text": "Get > bytes"
        },
        {
          "depth": 5,
          "slug": "request-method",
          "text": "Request method"
        },
        {
          "depth": 5,
          "slug": "callback-method",
          "text": "Callback method"
        },
        {
          "depth": 4,
          "slug": "get--uint256",
          "text": "Get > uint256"
        },
        {
          "depth": 5,
          "slug": "request-method-1",
          "text": "Request method"
        },
        {
          "depth": 5,
          "slug": "callback-method-1",
          "text": "Callback method"
        },
        {
          "depth": 4,
          "slug": "get--int256",
          "text": "Get > int256"
        },
        {
          "depth": 5,
          "slug": "request-method-2",
          "text": "Request method"
        },
        {
          "depth": 5,
          "slug": "callback-method-2",
          "text": "Callback method"
        },
        {
          "depth": 4,
          "slug": "get--bool",
          "text": "Get > bool"
        },
        {
          "depth": 5,
          "slug": "request-method-3",
          "text": "Request method"
        },
        {
          "depth": 5,
          "slug": "callback-method-3",
          "text": "Callback method"
        },
        {
          "depth": 4,
          "slug": "get--string",
          "text": "Get > string"
        },
        {
          "depth": 5,
          "slug": "request-method-4",
          "text": "Request method"
        },
        {
          "depth": 5,
          "slug": "callback-method-4",
          "text": "Callback method"
        }
      ],
      "url": "/any-api/testnet-oracles",
      "section": "ethereum",
      "description": "Example Chainlink testnet oracles that you can use for development",
      "content": "\r\nThe Chainlink Developer Relations team maintains several testnet oracles that you can use to test your implementation quickly.\r\n\r\n:::tip[Link token address and Faucet details]\r\n\r\nTo retrieve the LINK token address or get faucet details for your testnet of choice, see the [LINK Token Contracts](/resources/link-token-contracts/) page.\r\n\r\n:::\r\n\r\n## Operator Contracts\r\n\r\nTestnet [Operator contracts](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol) are deployed and maintained on the following networks:\r\n\r\n| Testnet         | Oracle Address                                                                                                                     |\r\n| --------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\r\n| Ethereum Goerli | [`0xCC79157eb46F5624204f47AB42b3906cAA40eaB7`](https://goerli.etherscan.io/address/0xcc79157eb46f5624204f47ab42b3906caa40eab7)     |\r\n| Avalanche Fuji  | [`0x022EEA14A6010167ca026B32576D6686dD7e85d2`](https://testnet.snowtrace.io/address/0x022eea14a6010167ca026b32576d6686dd7e85d2)    |\r\n| Polygon Mumbai  | [`0x40193c8518BB267228Fc409a613bDbD8eC5a97b3`](https://mumbai.polygonscan.com/address/0x40193c8518BB267228Fc409a613bDbD8eC5a97b3)  |\r\n| Binance Testnet | [`0xCC79157eb46F5624204f47AB42b3906cAA40eaB7`](https://testnet.bscscan.com/address/0xCC79157eb46F5624204f47AB42b3906cAA40eaB7)     |\r\n| Fantom Testnet  | [`0xCC79157eb46F5624204f47AB42b3906cAA40eaB7`](https://testnet.ftmscan.com/address/0xcc79157eb46f5624204f47ab42b3906caa40eab7)     |\r\n| Klaytn Testnet  | [`0xfC3BdAbD8a6A73B40010350E2a61716a21c87610`](https://baobab.scope.klaytn.com/account/0xfC3BdAbD8a6A73B40010350E2a61716a21c87610) |\r\n\r\n## Jobs\r\n\r\n### Job IDs\r\n\r\nTo make testing simple, jobs are configured with the following properties:\r\n\r\n- Each request on testnets costs 0.1 LINK.\r\n- Each oracle will wait for 1 confirmation before processing a request.\r\n- Jobs have the same IDs accross testnets.\r\n- Parameters are required. See [examples](#examples) for code snippets.\r\n\r\n<br>\r\n\r\n| Purpose                                                                                                                                                                                                                                                 | Tasks                                                                                                                                                                    | Job ID                             | Required&nbspParameters                                                                                                                                  |\r\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ---------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| **_GET>bytes_**: <br>HTTP&nbspGET&nbspto&nbspany&nbsppublic&nbspAPI <br>parse the response <br>return arbitrary-length raw byte data **_bytes_**. <br>The job specs can be found [here](/chainlink-nodes/job-specs/direct-request-get-bytes/)                                     | [Http](/chainlink-nodes/oracle-jobs/task-types/task_http)<br>[JsonParse](/chainlink-nodes/oracle-jobs/task-types/task_jsonparse)<br>[Ethabiencode](/chainlink-nodes/oracle-jobs/task-types/task_eth_abi_encode/)                                           | `7da2702f37fd48e5b1b9a5715e3509b6` | <ul><li>`get`: string</li><li>`path`:&nbsp[JSONPath&nbspexpression](https://jsonpath.com/) with comma(,) delimited string</li></ul>                      |\r\n| **_GET>uint256_**: <br>HTTP&nbspGET&nbspto&nbspany&nbsppublic&nbspAPI <br>parse the reponse <br>multiply the result by a multiplier <br>return an unsigned integer **_uint256_** . <br> The job specs can be found [here](/chainlink-nodes/job-specs/direct-request-get-uint256/) | [Http](/chainlink-nodes/oracle-jobs/task-types/task_http)<br>[JsonParse](/chainlink-nodes/oracle-jobs/task-types/task_jsonparse)<br>[Multiply](/chainlink-nodes/oracle-jobs/task-types/task_multiply)<br>[Ethabiencode](/chainlink-nodes/oracle-jobs/task-types/task_eth_abi_encode/) | `ca98366cc7314957b8c012c72f05aeeb` | <ul><li>`get`: string</li><li>`path`:&nbsp[JSONPath&nbspexpression](https://jsonpath.com/) with comma(,) delimited string</li><li>`times`: int</li></ul> |\r\n| **_GET>int256_**: <br>HTTP&nbspGET&nbspto&nbspany&nbsppublic&nbspAPI <br>parse the response <br>multiply the result by a multiplier <br>return a signed integer **_int256_**. <br> The job specs can be found [here](/chainlink-nodes/job-specs/direct-request-get-int256/)       | [Http](/chainlink-nodes/oracle-jobs/task-types/task_http)<br>[JsonParse](/chainlink-nodes/oracle-jobs/task-types/task_jsonparse)<br>[Multiply](/chainlink-nodes/oracle-jobs/task-types/task_multiply)<br>[Ethabiencode](/chainlink-nodes/oracle-jobs/task-types/task_eth_abi_encode/) | `fcf4140d696d44b687012232948bdd5d` | <ul><li>`get`: string</li><li>`path`:&nbsp[JSONPath&nbspexpression](https://jsonpath.com/) with comma(,) delimited string</li><li>`times`: int</li></ul> |\r\n| **_GET>bool_**: <br>HTTP&nbspGET&nbspto&nbspany&nbsppublic&nbspAPI <br>parse the response <br>return a boolean **_bool_**. <br> The job specs can be found [here](/chainlink-nodes/job-specs/direct-request-get-bool/)                                                            | [Http](/chainlink-nodes/oracle-jobs/task-types/task_http)<br>[JsonParse](/chainlink-nodes/oracle-jobs/task-types/task_jsonparse)<br>[Ethabiencode](/chainlink-nodes/oracle-jobs/task-types/task_eth_abi_encode/)                                           | `c1c5e92880894eb6b27d3cae19670aa3` | <ul><li>`get`: string</li><li>`path`:&nbsp[JSONPath&nbspexpression](https://jsonpath.com/) with comma(,) delimited string</li></ul>                      |\r\n| **_GET>string_**: <br>HTTP&nbspGET&nbspto&nbspany&nbsppublic&nbspAPI <br>parse the response <br>return a sequence of characters **_string_**. <br> The job specs can be found [here](/chainlink-nodes/job-specs/direct-request-get-string/)                                       | [Http](/chainlink-nodes/oracle-jobs/task-types/task_http)<br>[JsonParse](/chainlink-nodes/oracle-jobs/task-types/task_jsonparse)<br>[Ethabiencode](/chainlink-nodes/oracle-jobs/task-types/task_eth_abi_encode/)                                           | `7d80a6386ef543a3abb52817f6707e3b` | <ul><li>`get`: string</li><li>`path`:&nbsp[JSONPath&nbspexpression](https://jsonpath.com/) with comma(,) delimited string</li></ul>                      |\r\n\r\n### Examples\r\n\r\n#### Get > bytes\r\n\r\nA full example can be found [here](/any-api/get-request/examples/large-responses/).\r\n\r\n##### Request method\r\n\r\n```solidity\r\nfunction request() public {\r\n  Chainlink.Request memory req = buildChainlinkRequest('7da2702f37fd48e5b1b9a5715e3509b6', address(this), this.fulfill.selector);\r\n  req.add(\r\n      'get',\r\n      'https://ipfs.io/ipfs/QmZgsvrA1o1C8BGCrx6mHTqR1Ui1XqbCrtbMVrRLHtuPVD?filename=big-api-response.json'\r\n  );\r\n  req.add('path', 'image');\r\n  sendChainlinkRequest(req, (1 * LINK_DIVISIBILITY) / 10); // 0,1*10**18 LINK\r\n}\r\n```\r\n\r\n##### Callback method\r\n\r\n```solidity\r\nbytes public data;\r\nstring public imageUrl;\r\nfunction fulfill(bytes32 requestId, bytes memory bytesData) public recordChainlinkFulfillment(requestId) {\r\n    data = bytesData;\r\n    imageUrl = string(data);\r\n}\r\n```\r\n\r\n#### Get > uint256\r\n\r\nA full example can be found [here](/any-api/get-request/examples/single-word-response/).\r\n\r\n##### Request method\r\n\r\n```solidity\r\nfunction request() public {\r\n  Chainlink.Request memory req = buildChainlinkRequest('ca98366cc7314957b8c012c72f05aeeb', address(this), this.fulfill.selector);\r\n  req.add(\r\n      'get',\r\n      'https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&tsyms=USD'\r\n  );\r\n  req.add('path', 'RAW,ETH,USD,VOLUME24HOUR');\r\n  req.addInt('times', 10**18); // Multiply by times value to remove decimals. Parameter required so pass '1' if the number returned doesn't have decimals\r\n  sendChainlinkRequest(req, (1 * LINK_DIVISIBILITY) / 10); // 0,1*10**18 LINK\r\n}\r\n```\r\n\r\n##### Callback method\r\n\r\n```solidity\r\nuint256 public volume;\r\nfunction fulfill(bytes32 _requestId, uint256 _volume) public recordChainlinkFulfillment(_requestId) {\r\n  volume = _volume;\r\n}\r\n```\r\n\r\n#### Get > int256\r\n\r\n##### Request method\r\n\r\n```solidity\r\nfunction request() public {\r\n  Chainlink.Request memory req = buildChainlinkRequest('fcf4140d696d44b687012232948bdd5d', address(this), this.fulfill.selector);\r\n  req.add(\r\n      'get',\r\n      'https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&tsyms=USD'\r\n  );\r\n  req.add('path', 'RAW,ETH,USD,VOLUME24HOUR');\r\n  req.addInt('times', 10**18); // Multiply by times value to remove decimals. Parameter required so pass '1' if the number returned doesn't have decimals\r\n  sendChainlinkRequest(req, (1 * LINK_DIVISIBILITY) / 10); // 0,1*10**18 LINK\r\n}\r\n```\r\n\r\n##### Callback method\r\n\r\n```solidity\r\nint256 public volume;\r\nfunction fulfill(bytes32 _requestId, int256 _volume) public recordChainlinkFulfillment(_requestId) {\r\n  volume = _volume;\r\n}\r\n```\r\n\r\n#### Get > bool\r\n\r\n##### Request method\r\n\r\n```solidity\r\nfunction request() public {\r\n  Chainlink.Request memory req = buildChainlinkRequest('c1c5e92880894eb6b27d3cae19670aa3', address(this), this.fulfill.selector);\r\n  req.add(\r\n      'get',\r\n      'https://app.proofi.com/api/verify/eip155/0xCB5085214B6318aF3dd0FBbb5E74fbF6bf332151?contract=0x2f7f7E44ca1e2Ca1A54db4222cF97ab47EE026F1'\r\n  );\r\n  req.add('path', 'approved');\r\n  sendChainlinkRequest(req, (1 * LINK_DIVISIBILITY) / 10); // 0,1*10**18 LINK\r\n}\r\n```\r\n\r\n##### Callback method\r\n\r\n```solidity\r\nbool public approved;\r\nfunction fulfill(bytes32 _requestId, bool _approved) public recordChainlinkFulfillment(_requestId) {\r\n  approved = _approved;\r\n}\r\n```\r\n\r\n#### Get > string\r\n\r\nA full example can be found [here](/any-api/get-request/examples/array-response/).\r\n\r\n##### Request method\r\n\r\n```solidity\r\nfunction request() public {\r\n  Chainlink.Request memory req = buildChainlinkRequest('7d80a6386ef543a3abb52817f6707e3b', address(this), this.fulfill.selector);\r\n  req.add(\r\n      'get',\r\n      'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&per_page=10'\r\n  );\r\n  req.add('path', '0,id');\r\n  sendChainlinkRequest(req, (1 * LINK_DIVISIBILITY) / 10); // 0,1*10**18 LINK\r\n}\r\n```\r\n\r\n##### Callback method\r\n\r\n```solidity\r\nstring public id;\r\nfunction fulfill(bytes32 _requestId, string memory _id) public recordChainlinkFulfillment(_requestId) {\r\n  id = _id;\r\n}\r\n```\r\n"
    },
    {
      "title": "Decentralized Data Model",
      "headings": [
        {
          "depth": 2,
          "slug": "overview",
          "text": "Overview"
        },
        {
          "depth": 2,
          "slug": "data-aggregation",
          "text": "Data Aggregation"
        },
        {
          "depth": 2,
          "slug": "shared-data-resource",
          "text": "Shared Data Resource"
        },
        {
          "depth": 2,
          "slug": "decentralized-oracle-network",
          "text": "Decentralized Oracle Network"
        },
        {
          "depth": 2,
          "slug": "components-of-a-decentralized-oracle-network",
          "text": "Components of a Decentralized Oracle Network"
        },
        {
          "depth": 3,
          "slug": "consumer",
          "text": "Consumer"
        },
        {
          "depth": 3,
          "slug": "proxy",
          "text": "Proxy"
        },
        {
          "depth": 3,
          "slug": "aggregator",
          "text": "Aggregator"
        }
      ],
      "url": "/architecture-overview/architecture-decentralized-model",
      "section": "ethereum",
      "description": "This page describes the decentralized architecture which enables Chainlink to aggregate data from multiple independent node operators.",
      "content": "\n## Overview\n\nThis page describes how data aggregation is applied to produce Chainlink Data Feeds and provides more insight as to how Data Feeds are updated.\n\n**Topics**\n\n- [Data Aggregation](#data-aggregation)\n- [Shared Data Resource](#shared-data-resource)\n- [Decentralized Oracle Network](#decentralized-oracle-network)\n- [Components of a Decentralized Oracle Network](#components-of-a-decentralized-oracle-network)\n  - [Consumer](#consumer)\n  - [Proxy](#proxy)\n  - [Aggregator](#aggregator)\n\n## Data Aggregation\n\nEach data feed is updated by multiple, independent Chainlink oracle operators. The [AccessControlledOffchainAggregator](https://github.com/smartcontractkit/libocr/blob/master/contract/AccessControlledOffchainAggregator.sol) aggregates the data on-chain.\n\nOff-Chain Reporting (OCR) further enhances the aggregation process. To learn more about OCR and how it works, see the [Off-Chain Reporting](/architecture-overview/off-chain-reporting/) page.\n\n![Chainlink Feeds List](/images/contract-devs/price-aggr.png)\n\n## Shared Data Resource\n\nEach data feed is built and funded by the community of users who rely on accurate, up-to-date data in their smart contracts. As more users rely on and contribute to a data feed, the quality of the data feed improves. For this reason, each data feed has its own properties depending on the needs of its community of users.\n\n## Decentralized Oracle Network\n\nEach data feed is updated by a decentralized oracle network. Each oracle operator is rewarded for publishing data. The number of oracles contributing to each feed varies. In order for an update to take place, the data feed aggregator contract must receive responses from a minimum number of oracles or the latest answer will not be updated. You can see the minimum number of oracles for the corresponding feed at [data.chain.link](https://data.chain.link).\n\nEach oracle in the set publishes data during an aggregation round. That data is validated and aggregated by a smart contract, which forms the feed's latest and trusted answer.\n\n## Components of a Decentralized Oracle Network\n\nData Feeds are an example of a decentralized oracle network, and include the following components:\n\n- [A consumer contract](#consumer)\n- [A proxy contract](#proxy)\n- [An aggregator contract](#aggregator)\n\nTo learn how to create a consumer contract that uses an existing data feed, read the [Using Data Feeds](/data-feeds/price-feeds/) documentation.\n\n### Consumer\n\nA Consumer contract is any contract that uses Chainlink Data Feeds to consume aggregated data. Consumer contracts must reference the correct [`AggregatorV3Interface`](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol) contract and call one of the exposed functions.\n\n```solidity\n...\nAggregatorV3Interface feed = AggregatorV3Interface(address);\nreturn feed.latestRoundData();\n```\n\nOff-chain applications can also consume data feeds. See the Javascript and Python example code on the [Using Data Feeds](/data-feeds/price-feeds/) page to learn more.\n\n### Proxy\n\nProxy contracts are on-chain proxies that point to the aggregator for a particular data feed. Using proxies enables the underlying aggregator to be upgraded without any service interruption to consuming contracts.\n\nProxy contracts can vary from one data feed to another, but the [`AggregatorProxy.sol` contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/dev/AggregatorProxy.sol) on Github is a common example.\n\n### Aggregator\n\nAn aggregator is the contract that receives periodic data updates from the oracle network. Aggregators store aggregated data on-chain so that consumers can retrieve it and and act upon it within the same transaction.\n\nYou can access this data using the Data Feed address and the [`AggregatorV3Interface` contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol).\n\nAggregators receive updates from the oracle network only when the **Deviation Threshold** or **Heartbeat Threshold** triggers an update during an aggregation round. The first condition that is met triggers an update to the data.\n\n- Deviation Threshold: A new aggregation round starts when a node identifies that the off-chain values deviate by more than the defined deviation threshold from the on-chain value. Individual nodes monitor one or more data providers for each feed.\n- Heartbeat Threshold: A new aggregation round starts after a specified amount of time from the last update.\n"
    },
    {
      "title": "Data Feeds Architecture",
      "headings": [
        {
          "depth": 2,
          "slug": "basic-request-model",
          "text": "Basic Request Model"
        },
        {
          "depth": 2,
          "slug": "decentralized-data-model",
          "text": "Decentralized Data Model"
        },
        {
          "depth": 2,
          "slug": "off-chain-reporting",
          "text": "Off-Chain Reporting"
        }
      ],
      "url": "/architecture-overview/architecture-overview",
      "section": "ethereum",
      "content": "\n![Request Model Banner](/files/8c35025-Request__Receive_Data.png)\n\n## Basic Request Model\n\nChainlink connects smart contracts with external data using its decentralized oracle network. Chainlink API requests are handled 1:1 by an oracle.\n\nThe [Basic Request Model](/architecture-overview/architecture-request-model/) describes the on-chain architecture of requesting data from a single oracle source.\n\nTo learn how to make a GET request using a single oracle, see [Make a GET Request](/any-api/get-request/introduction/).\n\n## Decentralized Data Model\n\nFor a more robust and trustworthy answer, you can aggregate data from many oracles. With on-chain aggregation, data is aggregated from a decentralized network of independent oracle nodes. This architecture is applied to Chainlink Data Feeds, which can aggregate data such as asset price data.\n\nThe [Decentralized Data Model](/architecture-overview/architecture-decentralized-model/) describes how data is aggregated, and how consumer contracts can retrieve this data.\n\n## Off-Chain Reporting\n\nOff-Chain Reporting (OCR) is an improvement on the decentralization and scalability of Chainlink networks. With our Off-Chain Reporting aggregators, all nodes communicate using a peer to peer network. During the communication process, a lightweight consensus algorithm runs where each node reports its price observation and signs it. A single aggregate transaction is then transmitted, which saves a significant amount of gas.\n\nTo learn more about OCR and how it works, see the [Off-Chain Reporting](/architecture-overview/off-chain-reporting/) page.\n"
    },
    {
      "title": "Basic Request Model",
      "headings": [
        {
          "depth": 2,
          "slug": "contracts-overview",
          "text": "Contracts Overview"
        },
        {
          "depth": 3,
          "slug": "chainlinkclient",
          "text": "ChainlinkClient"
        },
        {
          "depth": 3,
          "slug": "link-token",
          "text": "LINK Token"
        },
        {
          "depth": 3,
          "slug": "oracle-contract",
          "text": "Oracle Contract"
        },
        {
          "depth": 4,
          "slug": "request",
          "text": "Request"
        },
        {
          "depth": 4,
          "slug": "fulfillment",
          "text": "Fulfillment"
        },
        {
          "depth": 3,
          "slug": "off-chain-oracle-node",
          "text": "Off-Chain Oracle Node"
        },
        {
          "depth": 2,
          "slug": "consumer-uml",
          "text": "Consumer UML"
        }
      ],
      "url": "/architecture-overview/architecture-request-model",
      "section": "ethereum",
      "content": "\n## Contracts Overview\n\nAll source code is open source and available in the [Chainlink Github repository](https://github.com/smartcontractkit/chainlink).\n\n![Request Model Diagram](/files/881ade6-Simple_Architecture_Diagram_1_V1.png)\n\n### ChainlinkClient\n\n[`ChainlinkClient`](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/ChainlinkClient.sol) is a parent contract that enables smart contracts to consume data from oracles. It's available in the Chainlink smart contract library which can be [installed using the latest package managers](/resources/create-a-chainlinked-project/).\n\nThe client constructs and makes a request to a known Chainlink oracle through the `transferAndCall` function, implemented by the LINK token. This request contains encoded information that is required for the cycle to succeed. In the `ChainlinkClient` contract, this call is initiated with a call to `sendChainlinkRequestTo`.\n\nTo build your own client contract using `ChainlinkClient`, see [Introduction to Using Any API](/any-api/introduction/), or view the [ChainlinkClient API Reference](/any-api/api-reference/) for the `ChainlinkClient` contract.\n\n### LINK Token\n\nLINK is an [ERC-677](https://github.com/ethereum/EIPs/issues/677) compliant token which implements `transferAndCall`, a function that allows tokens to be transferred whilst also triggering logic in the receiving contract within a single transaction.\n\nLearn more about [ERC-677 and the LINK token](/resources/link-token-contracts/).\n\n### Oracle Contract\n\n[`Oracle` contracts](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.6/Oracle.sol) are owned by oracle node operators, which run alongside off-chain oracle nodes.\n\n#### Request\n\nThe client contract that initiates this cycle must create a request with the following items:\n\n- The oracle address.\n- The job ID, so the oracle knows which tasks to perform.\n- The callback function, which the oracle sends the response to.\n\nTo learn about how to find oracles to suit your needs, see [Find Existing Jobs](/any-api/find-oracle/).\n\nOracle contracts are responsible for handling on-chain requests made through the LINK token, by implementing `onTokenTransfer` as a <a href=\"https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.6/LinkTokenReceiver.sol\">`LinkTokenReceiver`</a>. Upon execution of this function, the oracle contract **emits an `OracleRequest` event** containing information about the request. This event is crucial, as it is monitored by the off-chain oracle node which acts upon it.\n\n#### Fulfillment\n\nFor fulfillment, the oracle contract has a `fulfillOracleRequest` function which is used by the node to fulfill a request once it has the result of the job. This function returns the result to the `ChainlinkClient` using the callback function defined in the original request.\n\n### Off-Chain Oracle Node\n\nThe off-chain oracle node is responsible for listening for events emitted by its corresponding on-chain smart contract. Once it detects an `OracleRequest` event, it uses the data emitted to perform a job.\n\nThe most common job type for a Node is to make a GET request to an API, retrieve some data from it, parse the response, convert the result into blockchain compatible data, then submit it in a transaction back to the oracle contract, using the `fulfillOracleRequest` function.\n\nFor more information on how to become a node operator, learn how to [run a Chainlink node](/chainlink-nodes/running-a-chainlink-node/).\n\n## Consumer UML\n\nBelow is a UML diagram describing the contract structure of `ATestnetConsumer`, a deployed example contract implementing `ChainlinkClient`.\n\n![Consumer UMK Diagram](/files/8ac3fc1-69a048b-Consumer_UML.svg)\n"
    },
    {
      "title": "Off-Chain Reporting",
      "headings": [
        {
          "depth": 2,
          "slug": "overview",
          "text": "Overview"
        },
        {
          "depth": 2,
          "slug": "what-is-ocr",
          "text": "What is OCR?"
        },
        {
          "depth": 2,
          "slug": "how-does-ocr-work",
          "text": "How does OCR work?"
        }
      ],
      "url": "/architecture-overview/off-chain-reporting",
      "section": "ethereum",
      "content": "\nOff-Chain Reporting (OCR) is a significant step towards increasing the decentralization and scalability of Chainlink networks. See the [OCR Protocol Paper](https://research.chain.link/ocr.pdf) for a technical deep dive.\n\n## Overview\n\nFor Off-Chain Reporting aggregators, all nodes communicate using a peer to peer network. During the communication process, a lightweight consensus algorithm runs where each node reports its data observation and signs it. A single aggregate transaction is then transmitted, which saves a significant amount of gas.\n\nThe report contained in the aggregate transaction is signed by a quorum of oracles and contains all oracles' observations. By validating the report on-chain and checking the quorum's signatures on-chain, we preserve the trustlessness properties of Chainlink oracle networks.\n\n## What is OCR?\n\n:::note[A simple analogy]\nImagine ordering 10 items from an online store. Each item is packaged separately and posted separately, meaning postage and packaging costs must be applied to each one, and the carrier has to transport 10 different boxes.<br/>\nOCR, on the other hand, packages all of these items into a single box and posts that. This saves postage and packaging fees and all effort the carrier associates with transporting 9 fewer boxes.\n:::\n\nThe OCR protocol allows nodes to aggregate their observations into a single report off-chain using a secure P2P network. A single node then submits a transaction with the aggregated report to the chain. Each report consists of many nodes' observations and has to be signed by a quorum of nodes. These signatures are verified on-chain.\n\nSubmitting only one transaction per round achieves the following benefits:\n\n- Overall network congestion from Chainlink oracle networks is reduced dramatically\n- Individual node operators spend far less on gas costs\n- Node networks are more scalable because data feeds can accommodate more nodes\n- Data feeds can be updated in a more timely manner since each round needn't wait for multiple transactions to be confirmed before a price is confirmed on-chain.\n\n## How does OCR work?\n\nProtocol execution happens mostly off-chain over a peer to peer network between Chainlink nodes. The nodes regularly elect a new leader node that drives the rest of the protocol.\n\nThe leader regularly requests followers to provide freshly signed observations and aggregates them into a report. It then sends this report back to the followers and asks them to verify the report's validity. If a quorum of followers approves the report by sending a signed copy back to the leader, the leader assembles a final report with the quorum's signatures and broadcasts it to all followers.\n\nThe nodes attempt to transmit the final report to the aggregator contract according to a randomized schedule. The aggregator verifies that a quorum of nodes signed the report and exposes the median value to consumers as an answer with a block timestamp and a round ID.\n\nAll nodes watch the blockchain for the final report to remove any single point of failure during transmission. If the designated node fails to get their transmission confirmed within a determined period, a round-robin protocol kicks in so other nodes can also transmit the final report until one of them is confirmed.\n"
    },
    {
      "title": "Chainlink Automation Economics",
      "headings": [
        {
          "depth": 2,
          "slug": "cost-of-using-chainlink-automation",
          "text": "Cost of using Chainlink Automation"
        },
        {
          "depth": 2,
          "slug": "how-funding-works",
          "text": "How Funding Works"
        },
        {
          "depth": 2,
          "slug": "withdrawing-funds",
          "text": "Withdrawing funds"
        },
        {
          "depth": 2,
          "slug": "no-node-competition",
          "text": "No node competition"
        },
        {
          "depth": 2,
          "slug": "minimum-balance",
          "text": "Minimum balance"
        },
        {
          "depth": 2,
          "slug": "price-selection-and-gas-bumping",
          "text": "Price selection and Gas Bumping"
        },
        {
          "depth": 2,
          "slug": "erc-677-link",
          "text": "ERC-677 Link"
        }
      ],
      "url": "/chainlink-automation/automation-economics",
      "section": "ethereum",
      "content": "\n## Cost of using Chainlink Automation\n\nChainlink Automation only requires an execution fee for transactions on-chain. This fee includes the transaction cost, a percentage premium (refer to the formula below), and a small fixed gas overhead accounting for gas between the network and the registry. The premium compensates the Automation Network for monitoring and performing your upkeep. The premium varies by chain and is listed on our [Supported Networks](/chainlink-automation/supported-networks/) page.\n\n![Automation Pricing Formula](/images/automation/automation-pricing.png)\n\nThere is no registration fee or other fees for any off-chain computation.\n\n**Example**: An upkeep transaction was executed on _Polygon mainnet_. It used _1.16M_ gas at a gas price of _183.3 gwei_. The premium percentage on Polygon is _70%_ (as of October 2022) and the Matic/LINK exchange rate is _0.131_. The upkeep's LINK balance will be reduced by a fee of _0.00495 LINK_.\n\n![Automation Pricing Example](/images/automation/automation-pricing-example.png)\n\n## How Funding Works\n\nUpkeeps have a LINK (ERC-677) balance. Every time an on-chain transaction is performed for your upkeep, its LINK balance will be reduced by the LINK fee.\n\nYour upkeep's balance must exceed the minimum balance. If this requirement is not met, the Automation Network will not perform on-chain transactions. You can add funds using the [Chainlink Automation App](https://automation.chain.link/) or by directly calling the `addFunds()` function on the `AutomationRegistry` contract. Anyone can call the `addFunds()` function.\n\n## Withdrawing funds\n\nTo withdraw a LINK balance, you must cancel your upkeep first. Any upkeep that has not spent more than an aggregated amount of 0.1 LINK fees over the span of its lifetime is subject to a _0.1 LINK_ fee. This cancellation fee protects node operators from spammers who register jobs that never perform.\n\n**Example 1**: Your upkeep has spent _4.8 LINK_ over its lifetime and has a balance of _5 LINK_. When it is cancelled, I will receive _5 LINK_.\n**Example 2**: Your upkeep has spent _0 LINK_ over its lifetime and has a balance of _5 LINK_. When it is cancelled, I will receive _4.9 LINK_.\n\n## No node competition\n\nIndividual Automation Nodes do not compete with one another, but rather work together to ensure all registered upkeeps are performed. This makes costs more predictable upfront, enabling you to estimate costs based on the expected gas consumption.\n\n## Minimum balance\n\nThe Chainlink Automation Network is designed to perform your upkeep even when gas prices spike. The minimum balance in LINK reflects the best estimate of the cost to perform your upkeep when gas prices spike. To ensure your upkeep is monitored and performed, ensure that your upkeep's balance is above this minimum balance.\n\nThe minimum balance is calculated using the current fast gas price, the gas limit you entered for your upkeep, the max gas multiplier, and the for conversion to LINK. To find the latest value for the `gasCeilingMultiplier`, see the [Registry Configuration](/chainlink-automation/supported-networks/#configurations) page.\n\nFollow [maintain a minimum balance](/chainlink-automation/manage-upkeeps/#maintain-a-minimum-balance) to ensure that your upkeep is funded.\n\n## Price selection and Gas Bumping\n\nAutomation Nodes select the gas price dynamically based on the prices of transactions within the last several blocks. This optimizes the gas price based on current network conditions. Automation Nodes are configured to select a price based on a target percentile.\n\nIf the Automation Node does not see the `performUpkeep` transaction get confirmed within the next few blocks, it automatically replaces the transaction and bumps the gas price. This process repeats until the transaction is confirmed.\n\n## ERC-677 Link\n\nFor funding on mainnet, you will need ERC-677 LINK. Many token bridges give you ERC-20 LINK tokens. Use PegSwap to [convert Chainlink tokens (LINK) to be ERC-677 compatible](https://pegswap.chain.link/). To fund on a supported testnet, get [LINK](/resources/link-token-contracts/) for the testnet you are using from our [faucet](https://faucets.chain.link/).\n"
    },
    {
      "title": "Chainlink Automation Release Notes",
      "headings": [
        {
          "depth": 2,
          "slug": "chainlink-keepers-is-now-chainlink-automation",
          "text": "Chainlink Keepers is now Chainlink Automation"
        },
        {
          "depth": 2,
          "slug": "2022-09-23---v13-release",
          "text": "2022-09-23 - v1.3 Release"
        },
        {
          "depth": 2,
          "slug": "2022-08-04---v12-release",
          "text": "2022-08-04 - v1.2 Release"
        },
        {
          "depth": 3,
          "slug": "manually-migrating-upkeeps-from-v11-to-v12",
          "text": "Manually migrating upkeeps from v1.1 to v1.2"
        },
        {
          "depth": 2,
          "slug": "2022-07-21---underfunded-upkeep-notifications",
          "text": "2022-07-21 - Underfunded upkeep notifications"
        },
        {
          "depth": 2,
          "slug": "2022-06-29---keepers-on-fantom",
          "text": "2022-06-29 - Keepers on Fantom"
        },
        {
          "depth": 2,
          "slug": "2022-06-09---keepers-on-avalanche",
          "text": "2022-06-09 - Keepers on Avalanche"
        },
        {
          "depth": 2,
          "slug": "2022-03-01---keepers-on-ethereum-rinkeby",
          "text": "2022-03-01 - Keepers on Ethereum Rinkeby"
        },
        {
          "depth": 2,
          "slug": "2021-11-18---keepers-on-binance-smart-chain-and-polygon",
          "text": "2021-11-18 - Keepers on Binance Smart Chain and Polygon"
        },
        {
          "depth": 2,
          "slug": "2021-08-05---keepers-v11-launch-on-ethereum",
          "text": "2021-08-05 - Keepers v1.1 launch on Ethereum"
        },
        {
          "depth": 2,
          "slug": "questions",
          "text": "Questions"
        }
      ],
      "url": "/chainlink-automation/automation-release-notes",
      "section": "ethereum",
      "content": "\n![Chainlink Automation Network Banner](/images/contract-devs/generic-banner.png)\n\n**Chainlink Automation release notes:**\n\n- [Chainlink Keepers is now Chainlink Automation](#chainlink-keepers-is-now-chainlink-automation)\n- [v1.3 release](#2022-09-23---v13-release)\n- [v1.2 release](#2022-08-04---v12-release)\n  - [Manually migrating upkeeps from v1.1 to v1.2](#manually-migrating-upkeeps-from-v11-to-v12)\n- [Underfunded upkeep email notifications](#2022-07-21---underfunded-upkeep-notifications)\n- [Keepers on Fantom](#2022-06-29---keepers-on-fantom)\n- [Keepers on Avalanche](#2022-06-09---keepers-on-avalanche)\n- [Keepers on Ethereum Rinkeby](#2022-03-01---keepers-on-ethereum-rinkeby)\n- [Keepers on Binance Smart Chain and Polygon](#2021-11-18---keepers-on-binance-smart-chain-and-polygon)\n- [Keepers v1.1 launch on Ethereum](#2021-08-05---keepers-v11-launch-on-ethereum)\n- [Questions](#questions)\n\n## Chainlink Keepers is now Chainlink Automation\n\nChainlink Keepers has been renamed to **Chainlink Automation**. The table below describes what terms under the former Keepers naming system translate to under the current Automation naming system:\n\n| Keepers Term                    | Automation Term                     |\n| ------------------------------- | ----------------------------------- |\n| Chainlink Keepers Network       | Chainlink Automation Network        |\n| Keeper/Keeper Node              | Automation/Automation Node          |\n| Keepers Job                     | Automation Job                      |\n| Keepers Registry/Registrar      | Automation Registry/Registrar       |\n| `KeeperCompatible.sol`          | `AutomationCompatible.sol`          |\n| `KeeperBase.sol`                | `AutomationBase.sol`                |\n| `KeeperCompatibleInterface.sol` | `AutomationCompatibleInterface.sol` |\n\n## 2022-09-23 - v1.3 Release\n\nKeepers Registry v1.3 [launched on Arbitrum Mainnet](/chainlink-automation/supported-networks/#arbitrum).\n\n## 2022-08-04 - v1.2 Release\n\nKeepers Registry v1.2 launched on Ethereum, Binance Smart Chain, Polygon, Avalanche, and Fantom\n\n- **Automatic upkeep registration approval**: All upkeeps on supported mainnets are now automatically approved.\n\n- **Programmatic control**: With automatic approval, you can now dynamically create, manage, and fund upkeeps from within your dApps and even have an upkeep fund itself. Learn more [here](/chainlink-automation/register-upkeep/#register-an-upkeep-using-your-own-deployed-contract).\n\n- **Advanced turn-taking algorithm**: Our turn taking algorithm now supports upkeeps that require high-frequency execution.\n\n- **Durable ID and user-triggered migration**: All upkeeps created in versions v1.2 and later will have durable IDs. v1.2 also supports user-triggered migration to future registry versions to make it easier to migrate to a new Keepers Registry and benefit from new features. Future migrations can still retain the existing ID. The ID is now a hash in format of a 77 digit integer.\n\n- **Configurable upkeeps**: You can now edit the gas limit of your upkeep to easily customize your upkeep to fit your needs without having to create a new upkeep.\n\n- **Off-chain compute improvements**: The off-chain compute sequence is improved for higher-fidelity representation of the gas and logic before transactions are submitted on-chain. This helps to reduce reverts and reduce fees.\n\n- **Minimum spend requirement**: As part of the mission to continuously enhance the security of the Chainlink Network for all participants, each registered upkeep will have a minimum spend requirement of 0.1 LINK, in aggregate across all transactions for the upkeep, to discourage network spam. Note that an _upkeep_ is the automation job itself. It is not a transaction. Each upkeep can have thousands of transactions. If an upkeep has not spent more than 0.1 LINK across all transactions at the time of cancellation, then 0.1 LINK will be retained for the network. If more than 0.1 LINK has been spent by an upkeep, the full remaining balance of the upkeep will be withdrawable when the upkeep is canceled.\n\n### Manually migrating upkeeps from v1.1 to v1.2\n\nIf your upkeep ID has 77 digits, it is already migrated to v1.2 and no further action is required. If your upkeep ID has less than 4 digits, your upkeep is on the v1.1 registry. To migrate your upkeep from Keepers v1.1 to Keepers v1.2, you can cancel it in the Keepers App, and register an exact copy of the upkeep in the Keepers App. While you can see upkeeps from both v1.1 and v1.2 in the [Keepers App](https://automation.chain.link), all new upkeeps in the Keepers App will be automatically created on Keepers v1.2.\n\n## 2022-07-21 - Underfunded upkeep notifications\n\nYou will now receive notifications to the email address you register in your upkeep when your upkeep is underfunded. We are limiting notifications on the same upkeep to once per week.\n\n## 2022-06-29 - Keepers on Fantom\n\nChainlink Keepers is live on the Fantom Network, [Mainnet](https://automation.chain.link/fantom) and [Testnet](https://automation.chain.link/fantom-testnet).\n\n## 2022-06-09 - Keepers on Avalanche\n\nChainlink Keepers is live on the Avalanche Network, [Mainnet](https://automation.chain.link/avalanche) and [Testnet](https://automation.chain.link/fuji).\n\n## 2022-03-01 - Keepers on Ethereum Rinkeby\n\nChainlink Keepers is live on [Ethereum Rinkeby](https://automation.chain.link/rinkeby).\n\n## 2021-11-18 - Keepers on Binance Smart Chain and Polygon\n\nChainlink Keepers is live on the both Binance Smart Chain [Mainnet](https://automation.chain.link/bsc) and [Testnet](https://automation.chain.link/chapel), and Polygon [Mainnet](https://automation.chain.link/polygon) and [Testnet](https://automation.chain.link/mumbai).\n\n## 2021-08-05 - Keepers v1.1 launch on Ethereum\n\nChainlink Keepers officially launched on [Ethereum Mainnet](https://keepers.chain.link/mainnet).\n\n## Questions\n\nIf you have questions, read the [Chainlink Automation Frequently Asked Questions](/chainlink-automation/faqs/) page. You can also ask questions in the [#automation channel](https://discord.com/channels/592041321326182401/821350860302581771) in our [Discord server](https://discord.gg/qj9qarT), or [contact us](https://forms.gle/WadxnzzjHPtta5Zd9) for assistance with registration.\n"
    },
    {
      "title": "Creating Compatible Contracts",
      "headings": [
        {
          "depth": 2,
          "slug": "overview",
          "text": "Overview"
        },
        {
          "depth": 2,
          "slug": "example-contract",
          "text": "Example contract"
        },
        {
          "depth": 2,
          "slug": "functions",
          "text": "Functions"
        },
        {
          "depth": 3,
          "slug": "checkupkeep-function",
          "text": "checkUpkeep function"
        },
        {
          "depth": 4,
          "slug": "checkdata",
          "text": "checkData"
        },
        {
          "depth": 4,
          "slug": "performdata",
          "text": "performData"
        },
        {
          "depth": 3,
          "slug": "performupkeep-function",
          "text": "performUpkeep function"
        },
        {
          "depth": 4,
          "slug": "performdata-1",
          "text": "performData"
        },
        {
          "depth": 2,
          "slug": "vyper-example",
          "text": "Vyper example"
        },
        {
          "depth": 2,
          "slug": "best-practices",
          "text": "Best practices"
        },
        {
          "depth": 3,
          "slug": "revalidate-performupkeep",
          "text": "Revalidate performUpkeep"
        },
        {
          "depth": 3,
          "slug": "perform-only-when-conditions-are-met",
          "text": "Perform ONLY when conditions are met"
        },
        {
          "depth": 3,
          "slug": "perform-only-when-data-is-verified",
          "text": "Perform ONLY when data is verified"
        },
        {
          "depth": 3,
          "slug": "when-performing-is-not-harmful",
          "text": "When performing is not harmful"
        },
        {
          "depth": 3,
          "slug": "test-your-contract",
          "text": "Test your contract"
        }
      ],
      "url": "/chainlink-automation/compatible-contracts",
      "section": "ethereum",
      "content": "\nUse custom logic to allow Chainlink Automation to determine when to execute your smart contract functions.\n\n## Overview\n\nLearn how to make smart contracts that are compatible with the `AutomationCompatibleInterface` contract and its functions.\n\n**Topics**\n\n- [Example Contract](#example-contract)\n- [Functions](#functions)\n  - [`checkUpkeep` function](#checkupkeep-function)\n    - [`checkData`](#checkdata)\n    - [`performData`](#performdata)\n  - [`performUpkeep` function](#performupkeep-function)\n    - [`performData`](#performdata-1)\n- [Vyper Example](#vyper-example)\n- [Best practices](#best-practices)\n  - [Revalidate `performUpkeep`](#revalidate-performupkeep)\n  - [Test your contract](#test-your-contract)\n\n## Example contract\n\nTo use Chainlink Automation, contracts must meet the following requirements:\n\n- Import `AutomationCompatible.sol`. You can refer to the [Chainlink Contracts](https://github.com/smartcontractkit/chainlink/tree/develop/contracts/src) on GitHub to find the latest version.\n- Use the `AutomationCompatibleInterface` from the library to ensure your `checkUpkeep` and `performUpkeep`function definitions match the definitions expected by the Chainlink Automation Network.\n- Include a `checkUpkeep` function that contains the logic that will be executed off-chain to see if `performUpkeep` should be executed. `checkUpkeep` can use on-chain data and a specified `checkData` parameter to perform complex calculations off-chain and then send the result to `performUpkeep` as `performData`.\n- Include a `performUpkeep` function that will be executed on-chain when `checkUpkeep` returns `true`. Because `performUpkeep` is external, users are advised to revalidate conditions and performData.\n\nUse these elements to create a compatible contract that will automatically increment a counter after every `updateInterval` seconds. After you register the contract as an upkeep, the Chainlink Automation Network simulates our `checkUpkeep` off-chain during every block to determine if the `updateInterval` time has passed since the last increment (timestamp). When `checkUpkeep` returns true, the Chainlink Automation Network calls `performUpkeep` on-chain and increments the counter. This cycle repeats until the upkeep is cancelled or runs out of funding.\n\n::solidity-remix[samples/Automation/AutomationCounter.sol]\n\nCompile and deploy your own Automation Counter onto a [supported Testnet](/chainlink-automation/supported-networks/).\n\n1. In the Remix example, select the compile tab on the left and press the compile button. Make sure that your contract compiles without any errors. Note that the Warning messages in this example are acceptable and will not block the deployment.\n1. Select the **Deploy** tab and deploy the `Counter` smart contract in the `injected web3` environment. When deploying the contract, specify the `updateInterval` value. For this example, set a short interval of 60. This is the interval at which the `performUpkeep` function will be called.\n1. After deployment is complete, copy the address of the deployed contract. This address is required to register your upkeep.\n\nTo see more complex examples, go to the [utility contracts](/chainlink-automation/utility-contracts/) page.\n\nWe will now look at each function in a compatible contract in detail.\n\n## Functions\n\n| Function Name                            | Description                                                                                           |\n| ---------------------------------------- | ----------------------------------------------------------------------------------------------------- |\n| [checkUpkeep](#checkupkeep-function)     | Runs off-chain at every block to determine if the `performUpkeep` function should be called on-chain. |\n| [performUpkeep](#performupkeep-function) | Contains the logic that should be executed on-chain when `checkUpkeep` returns true.                  |\n\n### `checkUpkeep` function\n\nThis function contains the logic that runs off-chain during every block as an `eth_call`[(link)](https://eth.wiki/json-rpc/API#eth_call) to determine if `performUpkeep` should be executed on-chain. To reduce on-chain gas usage, attempt to do your gas intensive calculations off-chain in `checkUpkeep` and pass the result to `performUpkeep` on-chain.\n\n:::note[Gas limits for checkUpkeep]\nThe `checkUpkeep` function is subject to the `checkGasLimit` in the [registry configuration](/chainlink-automation/supported-networks/#configurations).\n:::\n\nBecause `checkUpkeep` is only off-chain in simulation it is best to treat this as a `view` function and not modify any state. This might not always be possible if you want to use more advanced Solidity features like `DelegateCall`[(link)](https://docs.soliditylang.org/en/latest/introduction-to-smart-contracts.html#delegatecall-callcode-and-libraries). It is a best practice to import the `AutomationCompatible.sol`[(link)](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/AutomationCompatible.sol) contract and use the `cannotExecute` modifier to ensure that the method can be used only for simulation purposes.\n\n```solidity\nfunction checkUpkeep(\n  bytes calldata checkData\n)\n  external\n  view\n  override\n  returns (\n    bool upkeepNeeded,\n    bytes memory performData\n  );\n```\n\nBelow are the parameters and return values of the `checkUpkeep` function. Click each value to learn more about its design patterns and best practices:\n\n**Parameters:**\n\n- [`checkData`](#checkdata): Fixed and specified at upkeep registration and used in every `checkUpkeep`. Can be empty (0x).\n\n**Return Values:**\n\n- `upkeepNeeded`: Boolean that when True will trigger the on-chain `performUpkeep` call.\n- [`performData`](#performdata): Bytes that will be used as input parameter when calling `performUpkeep`. If you would like to encode data to decode later, try `abi.encode`.\n\n#### `checkData`\n\nYou can pass information into your `checkUpkeep` function from your [upkeep registration](/chainlink-automation/register-upkeep/) to execute different code paths. For example, to check the balance on an specific address, set the `checkData` to abi encode of the address. To learn how to create flexible upkeeps with checkData, please see out [flexible upkeeps](/chainlink-automation/flexible-upkeeps/) page.\n\n<CodeSample src=\"snippets/Automation/checkData.sol\" />\n\nTips on using `checkData`:\n\n- **Managing unbounded upkeeps**: Limit the problem set of your on-chain execution by creating a range bound for your upkeep to check and perform. This allows you to keep within predefined gas limits, which creates a predictable upper bound gas cost on your transactions. Break apart your problem into multiple upkeep registrations to limit the scope of work.\n\n  **Example**: You could create an upkeep for each subset of addresses that you want to service. The ranges could be 0 to 49, 50 to 99, and 100 to 149.\n\n- **Managing code paths**: Pass in data to your `checkUpkeep` to make your contract logic go down different code paths. This can be used in creative ways based on your use case needs.\n\n  **Example**: You could support multiple types of upkeep within a single contract and pass a function selector through the `checkData` function.\n\n#### `performData`\n\nThe response from `checkUpkeep` is passed to the `performUpkeep` function as `performData`. This allows you to perform complex and gas intensive calculations as a simulation off-chain and only pass the needed data on-chain.\n\nYou can create a highly flexible off-chain computation infrastructure that can perform precise actions on-chain by using `checkData` and `performData`. Both of these computations are entirely programmable.\n\n### `performUpkeep` function\n\nWhen `checkUpkeep` returns `upkeepNeeded == true`, the Automation node broadcasts a transaction to the blockchain to execute your `performUpkeep` function on-chain with `performData` as an input.\n\n:::note[Gas limits for performUpkeep]\nDuring registration you have to specify the maximum gas limit that we should allow your contract to use. We simulate `performUpkeep` during `checkUpkeep` and if the gas exceeds this limit the function will not execute on-chain. One method to determine your upkeep's gas limit is to simulate the `performUpkeep` function and add enough overhead to take into account increases that might happen due to changes in `performData` or on-chain data. The gas limit you specify cannot exceed the `callGasLimit` in the [configuration of the registry](/chainlink-automation/supported-networks/#configurations).\n:::\n\nEnsure that your `performUpkeep` is _idempotent_. Your `performUpkeep` function should change state such that `checkUpkeep` will not return `true` for the same subset of work once said work is complete. Otherwise the Upkeep will remain eligible and result in multiple performances by the Chainlink Automation Network on the exactly same subset of work. As a best practice, always [revalidate](#revalidate-performupkeep) conditions for your upkeep at the start of your `performUpkeep` function.\n\n```solidity\nfunction performUpkeep(\n  bytes calldata performData\n) external override;\n```\n\n**Parameters:**\n\n- [`performData`](#performdata-1): Data which was passed back from the `checkData` simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should always be validated against the contract's current state.\n\n#### `performData`\n\nYou can perform complex and broad off-chain computation, then execute on-chain state changes on a subset that meet your conditions. This can be done by passing the appropriate inputs within `performData` based on the results from your `checkUpkeep`. This pattern can greatly reduce your on-chain gas usage by narrowing the scope of work intelligently in your own Solidity code.\n\n- **Identify a list of addresses that require work**: You might have a number of addresses that you are validating for conditions before your contract takes an action. Doing this on-chain can be expensive. Filter the list of addresses by validating the necessary conditions within your `checkUpkeep` function. Then, pass the addresses that meets the condition through the `performData` function.\n\n  For example, if you have a \"top up\" contract that ensures several hundred account balances never decrease below a threshold, pass the list of accounts that meet the conditions so that the `performUpkeep` function validates and tops up only a small subset of the accounts.\n\n- **Identify the subset of states that must be updated**: If your contract maintains complicated objects such as arrays and structs, or stores a lot of data, you should read through your storage objects within your `checkUpkeep` and run your proprietary logic to determine if they require updates or maintenance. After that is complete, you can pass the known list of objects that require updates through the `performData` function.\n\n## Vyper example\n\n:::note[Note on arrays]\nMake sure the checkdata array size is correct. Vyper does not support dynamic arrays.\n:::\n\nYou can find a `KeepersConsumer` example [here](https://github.com/smartcontractkit/apeworx-starter-kit/blob/main/contracts/KeepersConsumer.vy). Read the _**apeworx-starter-kit**_ [README](https://github.com/smartcontractkit/apeworx-starter-kit) to learn how to run the example.\n\n## Best practices\n\n### Revalidate `performUpkeep`\n\nWe recommend that you revalidate the conditions and data in `performUpkeep` before work is performed. By default the `performUpkeep` is `external` and thus any party can call it, so revalidation is recommended. If you send data from your `checkUpkeep` to your `performUpkeep` and this data drives a critical function, please ensure you put adequate checks in place.\n\n### Perform ONLY when conditions are met\n\nSome actions must be performed only when specific conditions are met. Check all of the preconditions within `performUpkeep` to ensure that state change occurs only when necessary.\n\nIn this pattern, it is undesirable for the state change to occur until the next time the Upkeep is checked by the network and the conditions are met. It is a best practice to stop any state change or effects by performing the same checks or similar checks that you use in `checkUpkeep`. These checks validate the conditions before doing the work.\n\nFor example, if you have a contract where you create a timer in `checkUpkeep` that is designed to start a game at a specific time, validate the condition to ensure third-party calls to your `performUpkeep` function do not start the game at a different time.\n\n### Perform ONLY when data is verified\n\nSome actions must be performed using data you intend to use. Revalidate that the `performData` is allowed before execution.\n\nFor example, if you have a `performUpkeep` that funds a wallet and the address of the wallet is received via the `performData` parameter, ensure you have a list of permissable addresses to compare against to prevent third-party calling your function to send money to their address.\n\n### When performing is not harmful\n\nSometimes actions must be performed when conditions are met, but performing actions when conditions are not met is still acceptable. Condition checks within `performUpkeep` might not be required, but it can still be a good practice to short circuit expensive and unnecessary on-chain processing when it is not required.\n\nIt might be desirable to call `performUpkeep` when the `checkUpkeep` conditions haven't yet been tested by Chainlink Automation, so any specific checks that you perform are entirely use case specific.\n\n### Test your contract\n\nAs with all smart contract testing, it is important to test the boundaries of your smart contract in order to ensure it operates as intended. Similarly, it is important to make sure the compatible contract operates within the parameters of the `KeeperRegistry`.\n\nTest all of your mission-critical contracts, and stress-test the contract to confirm the performance and correct operation of your use case under load and adversarial conditions. The Chainlink Automation Network will continue to operate under stress, but so should your contract. For a list of supported Testnet blockchains, please review the [supported networks page](/chainlink-automation/supported-networks).\n"
    },
    {
      "title": "Frequently Asked Questions",
      "headings": [
        {
          "depth": 2,
          "slug": "will-chainlink-automation-work-for-my-use-case",
          "text": "Will Chainlink Automation work for my use case?"
        },
        {
          "depth": 2,
          "slug": "i-registered-my-upkeep-successfully-but-i-cant-see-it-how-can-i-find-my-upkeeps",
          "text": "I registered my upkeep successfully, but I can’t see it. How can I find my upkeeps?"
        },
        {
          "depth": 2,
          "slug": "is-the-chainlink-automation-network-available-on-platforms-other-than-ethereum",
          "text": "Is the Chainlink Automation Network available on platforms other than Ethereum?"
        },
        {
          "depth": 2,
          "slug": "how-much-does-it-cost-to-use-chainlink-automation",
          "text": "How much does it cost to use Chainlink Automation?"
        },
        {
          "depth": 2,
          "slug": "how-do-i-determine-the-gas-limit-for-my-upkeep",
          "text": "How do I determine the Gas Limit for my Upkeep?"
        },
        {
          "depth": 2,
          "slug": "what-is-the-maximum-gas-that-my-checkupkeep-can-use",
          "text": "What is the maximum Gas that my checkUpkeep can use?"
        },
        {
          "depth": 2,
          "slug": "what-is-the-maximum-gas-that-my-performupkeep-can-use",
          "text": "What is the maximum Gas that my performUpkeep can use?"
        },
        {
          "depth": 2,
          "slug": "how-often-will-my-upkeep-be-checked-off-chain-to-see-if-it-should-be-executed-on-chain",
          "text": "How often will my Upkeep be checked off-chain to see if it should be executed on-chain?"
        },
        {
          "depth": 2,
          "slug": "how-long-will-it-take-for-my-performupkeep-to-be-executed-once-it-has-been-broadcasted-on-chain",
          "text": "How long will it take for my performUpkeep to be executed once it has been broadcasted on-chain?"
        },
        {
          "depth": 2,
          "slug": "which-contract-will-call-my-performupkeep-function-on-chain",
          "text": "Which contract will call my performUpkeep function on-chain?"
        },
        {
          "depth": 2,
          "slug": "will-the-address-of-the-automation-registry-always-stay-the-same",
          "text": "Will the address of the Automation Registry always stay the same?"
        },
        {
          "depth": 2,
          "slug": "can-i-require-that-performupkeep-is-only-callable-by-the-automation-registry",
          "text": "Can I require that performUpkeep is only callable by the Automation Registry?"
        },
        {
          "depth": 2,
          "slug": "what-gas-price-does-automation-node-use-to-trigger-the-function",
          "text": "What gas price does Automation Node use to trigger the function?"
        },
        {
          "depth": 2,
          "slug": "how-do-you-prevent-automation-nodes-from-racing-against-each-other-and-escalating-execution-costs",
          "text": "How do you prevent Automation Nodes from racing against each other and escalating execution costs?"
        },
        {
          "depth": 2,
          "slug": "how-is-the-upkeep-minimum-balance-determined",
          "text": "How is the Upkeep minimum balance determined?"
        },
        {
          "depth": 2,
          "slug": "how-do-i-fund-my-upkeep",
          "text": "How do I fund my Upkeep?"
        },
        {
          "depth": 2,
          "slug": "how-do-i-withdraw-funds",
          "text": "How do I withdraw funds?"
        },
        {
          "depth": 2,
          "slug": "my-upkeep-stopped-performing-how-can-i-debug-it",
          "text": "My Upkeep stopped performing. How can I debug it?"
        },
        {
          "depth": 2,
          "slug": "how-do-i-join-the-chainlink-automation-network-as-a-node-operator",
          "text": "How do I join the Chainlink Automation Network as a node operator?"
        },
        {
          "depth": 2,
          "slug": "why-wont-the-chainlink-automation-app-recognize-the-link-in-my-wallet",
          "text": "Why won’t the Chainlink Automation App recognize the LINK in my wallet?"
        }
      ],
      "url": "/chainlink-automation/faqs",
      "section": "ethereum",
      "content": "\n## Will Chainlink Automation work for my use case?\n\nFor help with your specific use case, [contact us](https://chainlinkcommunity.typeform.com/to/OYQO67EF?page=docs-keepers) to connect with one of our Solutions Architects. You can also ask questions about Chainlink Automation on [Stack Overflow](https://stackoverflow.com/questions/ask?tags=chainlink) or the [#automation channel](https://discord.com/channels/592041321326182401/821350860302581771) in our [Discord server](https://discord.gg/qj9qarT). [Utility contracts](/chainlink-automation/utility-contracts) can also help you get started quickly.\n\n## I registered my upkeep successfully, but I can’t see it. How can I find my upkeeps?\n\nOpen the [Chainlink Automation app](https://automation.chain.link/) and ensure your wallet is connected. Also ensure that the wallet is set to use the network where you registered the Upkeep. Your Upkeep should be under the My Upkeeps tab.\n\n## Is the Chainlink Automation Network available on platforms other than Ethereum?\n\nChainlink Automation is available on the networks listed in the [Supported Blockchain Networks](/chainlink-automation/supported-networks) page. To see when we integrate with other platforms, [follow us on Twitter](https://twitter.com/chainlink) or [join our community on Discord](https://discord.com/channels/592041321326182401/821350860302581771).\n\n## How much does it cost to use Chainlink Automation?\n\nSee the [Automation Economics](/chainlink-automation/automation-economics) page to learn more about the cost of using Chainlink Automation.\n\n## How do I determine the Gas Limit for my Upkeep?\n\nThe **Gas Limit** specified during Upkeep Registration is the maximum amount of gas that will be used to execute your function on-chain. We simulate `performUpkeep` and if the gas exceeds this limit the function will not execute on-chain. One method to determine your Upkeep's Gas Limit is to simulate the `performUpkeep` function and add enough overhead to take into account increases that might happen due to changes in `performData` or on-chain data.\n\n## What is the maximum Gas that my `checkUpkeep` can use?\n\n`checkUpkeep` is subject to the `checkGasLimit` in the [configuration of the registry](/chainlink-automation/supported-networks/#configurations).\n\n## What is the maximum Gas that my `performUpkeep` can use?\n\n`performUpkeep` is subject to the `callGasLimit` in the [configuration of the registry](/chainlink-automation/supported-networks/#configurations).\n\n## How often will my Upkeep be checked off-chain to see if it should be executed on-chain?\n\nSee [How it works](/chainlink-automation/overview/#how-it-works).\n\n## How long will it take for my `performUpkeep` to be executed once it has been broadcasted on-chain?\n\nThis depends on the network congestion, the amount of gas used by the `performUpkeep`, and the gas price specified when the transaction is broadcasted. See the [Price Selection and Gas Bumping](/chainlink-automation/automation-economics/#price-selection-and-gas-bumping) documentation to learn about optimizing the chances of executing your `performUpkeep` function.\n\n## Which contract will call my `performUpkeep` function on-chain?\n\nThe **Automation Registry** will call the `performUpkeep` function on-chain.\n\n## Will the address of the Automation Registry always stay the same?\n\nNo. As we add new functionality we have to upgrade our contract and deploy a new **Automation Registry**. We will work with all our users to ensure Upkeeps are migrated without causing business interruptions.\n\n## Can I require that `performUpkeep` is only callable by the `Automation Registry`?\n\nOur preferred and recommended route before locking access to `performUpkeep`is [revalidation](/chainlink-automation/compatible-contracts/#revalidate-performupkeep). We understand you might want to add a require statement, but then recommend that you make the **Automation Registry** address configurable otherwise you will need to deploy a new contract when the Registry address changes. If you add a require statement to `performUpkeep` you will have to update the Registry Address in your contract when the Registry Address changes. We also recommend that the `owner` can always call `performUpkeep`.\n\n## What gas price does Automation Node use to trigger the function?\n\nSee the [Price Selection and Gas Bumping](/chainlink-automation/automation-economics/#price-selection-and-gas-bumping) section to learn about the gas price used to trigger the function.\n\n## How do you prevent Automation Nodes from racing against each other and escalating execution costs?\n\nSee [How it works](/chainlink-automation/overview/#how-it-works).\n\n## How is the Upkeep minimum balance determined?\n\nSee [Minimum balance](/chainlink-automation/automation-economics/#minimum-balance).\n\n## How do I fund my Upkeep?\n\nSee [Fund your Upkeep](/chainlink-automation/manage-upkeeps/#fund-your-upkeep).\n\n## How do I withdraw funds?\n\nSee [Withdraw funds](/chainlink-automation/manage-upkeeps/#withdraw-funds).\n\n## My Upkeep stopped performing. How can I debug it?\n\nThe simplest way to test your function is to call it yourself and see if it executes. To do so, deploy the contract to a testnet and debug the function. If you can call the function successfully, then Chainlink Automation will also be able to call it. If your function is working, but the Upkeep is not executing, your Upkeep might be underfunded. See the [Fund your Upkeep](/chainlink-automation/manage-upkeeps/#fund-your-upkeep) section to learn how to fund your Upkeep.\n\n## How do I join the Chainlink Automation Network as a node operator?\n\nWe are not accepting new Automation Nodes at this time, but be sure to sign up for our [mailing list](/resources/developer-communications/), or join our [Discord server](https://discord.gg/qj9qarT) to be notified when this becomes available.\n\n## Why won't the Chainlink Automation App recognize the LINK in my wallet?\n\nFor registration on Mainnet, you need ERC-677 LINK. Many token bridges give you ERC-20 LINK tokens. Use PegSwap to [convert Chainlink tokens (LINK) to be ERC-677 compatible](https://pegswap.chain.link/). To register on a supported testnet, get [LINK](/resources/link-token-contracts/) for the testnet that you want to use from our faucet.\n"
    },
    {
      "title": "Making flexible, secure, and low-cost contracts",
      "headings": [
        {
          "depth": 2,
          "slug": "prerequisites",
          "text": "Prerequisites"
        },
        {
          "depth": 2,
          "slug": "problem-on-chain-computation-leads-to-high-gas-fees",
          "text": "Problem: On-chain computation leads to high gas fees"
        },
        {
          "depth": 2,
          "slug": "solution-perform-complex-computations-with-no-gas-fees",
          "text": "Solution: Perform complex computations with no gas fees"
        },
        {
          "depth": 2,
          "slug": "conclusion",
          "text": "Conclusion"
        }
      ],
      "url": "/chainlink-automation/flexible-upkeeps",
      "section": "ethereum",
      "content": "\nIn this guide, you will learn how the flexibility of [Chainlink Automation](https://chain.link/automation) enables important design patterns that reduce gas fees, enhance the resilience of dApps, and improve end-user experience. Smart contracts themselves cannot self-trigger their functions at arbitrary times or under arbitrary conditions. Transactions can only be initiated by another account.\n\nStart by integrating an example contract to Chainlink Automation that has not yet been optimized. Then, deploy a comparison contract that shows you how to properly use the flexibility of Chainlink Automation to perform complex computations without paying high gas fees.\n\n**Topics**\n\n- [Prerequisites](#prerequisites)\n- [Problem: On-chain computation leads to high gas fees](#problem-on-chain-computation-leads-to-high-gas-fees)\n- [Solution: Perform complex computations with no gas fees](#solution-perform-complex-computations-with-no-gas-fees)\n- [Conclusion](#conclusion)\n\n## Prerequisites\n\nThis guide assumes you have a basic understanding of [Chainlink Automation](https://chain.link/keepers). If you are new to Keepers, complete the following guides first:\n\n- Know how to [deploy solidity contracts using Remix and Metamask](/getting-started/deploy-your-first-contract/)\n- Learn how to make [compatible contracts](/chainlink-automation/compatible-contracts/)\n- [Register UpKeep for a Contract](/chainlink-automation/register-upkeep/)\n\nChainlink Automation is supported on several [networks](/chainlink-automation/supported-networks).\n\n:::note[ERC677 Link]\n\n- Get [LINK](/resources/link-token-contracts/) on the supported testnet that you want to use.\n- For funding on Mainnet, you need ERC-677 LINK. Many token bridges give you ERC-20 LINK tokens. Use PegSwap to [convert Chainlink tokens (LINK) to be ERC-677 compatible](https://pegswap.chain.link/).\n  :::\n\n## Problem: On-chain computation leads to high gas fees\n\nIn the guide for [Creating Compatible Contracts](/chainlink-automation/compatible-contracts/), you deployed a basic [counter contract](/chainlink-automation/compatible-contracts/#example-contract) and verified that the counter increments every 30 seconds. However, more complex use cases can require looping over arrays or performing expensive computation. This leads to expensive gas fees and can increase the premium that end-users have to pay to use your dApp. To illustrate this, deploy an example contract that maintains internal balances.\n\nThe contract has the following components:\n\n- A fixed-size(1000) array `balances` with each element of the array starting with a balance of 1000.\n- The `withdraw()` function decreases the balance of one or more indexes in the `balances` array. Use this to simulate changes to the balance of each element in the array.\n- Automation Nodes are responsible for regularly re-balancing the elements using two functions:\n  - The `checkUpkeep()` function checks if the contract requires work to be done. If one array element has a balance of less than `LIMIT`, the function returns `upkeepNeeded == true`.\n  - The `performUpkeep()` function to re-balances the elements. To demonstrate how this computation can cause high gas fees, this example does all of the computation within the transaction. The function finds all of the elements that are less than `LIMIT`, decreases the contract `liquidity`, and increases every found element to equal `LIMIT`.\n\n::solidity-remix[samples/Automation/BalancerOnChain.sol]\n\nTest this example using the following steps:\n\n1. Deploy the contract using Remix on the [supported testnet](/chainlink-automation/supported-networks) of your choice.\n\n1. Before registering the upkeep for your contract, decrease the balances of some elements. This simulates a situation where upkeep is required. In Remix, Withdraw 100 at indexes 10,100,300,350,500,600,670,700,900. Pass `100,[10,100,300,350,500,600,670,700,900]` to the withdraw function:\n\n   ![Withdraw 100 at 10,100,300,350,500,600,670,700,900](/images/contract-devs/automation/balancerOnChain-withdraw.png)\n\n   You can also perform this step after registering the upkeep if you need to.\n\n1. Register the upkeep for your contract as explained [here](/chainlink-automation/register-upkeep/). Because this example has high gas requirements, specify the maximum allowed gas limit of `2,500,000`.\n\n1. After the registration is confirmed, Automation Nodes perform the upkeep.\n\n   ![BalancerOnChain Upkeep History](/images/contract-devs/automation/balancerOnChain-history.png)\n\n1. Click the transaction hash to see the transaction details in Etherscan. You can find how much gas was used in the upkeep transaction.\n\n   ![BalancerOnChain Gas](/images/contract-devs/automation/balancerOnChain-gas.png)\n\nIn this example, the `performUpkeep()` function used **2,481,379** gas. This example has two main issues:\n\n- All computation is done in `performUpkeep()`. This is a state modifying function which leads to high gas consumption.\n- This example is simple, but looping over large arrays with state updates can cause the transaction to hit the gas limit of the [network](/chainlink-automation/supported-networks), which prevents `performUpkeep` from running successfully.\n\nTo reduce these gas fees and avoid running out of gas, you can make some simple changes to the contract.\n\n## Solution: Perform complex computations with no gas fees\n\nModify the contract and move the computation to the `checkUpkeep()` function. This computation _doesn’t consume any gas_ and supports multiple upkeeps for the same contract to do the work in parallel. The main difference between this new contract and the previous contract are:\n\n- The `checkUpkeep()` function receives [`checkData`](/chainlink-automation/compatible-contracts/#checkdata), which passes arbitrary bytes to the function. Pass a `lowerBound` and an `upperBound` to scope the work to a sub-array of `balances`. This creates several upkeeps with different values of `checkData`. The function loops over the sub-array and looks for the indexes of the elements that require re-balancing and calculates the required `increments`. Then, it returns `upkeepNeeded == true` and `performData`, which is calculated by encoding `indexes` and `increments`. Note that `checkUpkeep()` is a view function, so computation does not consume any gas.\n- The `performUpkeep()` function takes [performData](/chainlink-automation/compatible-contracts/#performdata-1) as a parameter and decodes it to fetch the `indexes` and the `increments`.\n\n:::note[Note on performData]\nThis data should always be validated against the contract’s current state to ensure that `performUpkeep()` is idempotent. It also blocks malicious Automation Nodes from sending non-valid data. This example, tests that the state is correct after re-balancing:\n`require(_balance == LIMIT, \"Provided increment not correct\");`\n:::\n\n::solidity-remix[samples/Automation/BalancerOffChain.sol]\n\nRun this example to compare the gas fees:\n\n1. Deploy the contract using Remix on the [supported testnet](/chainlink-automation/supported-networks) of your choice.\n\n1. Withdraw 100 at 10,100,300,350,500,600,670,700,900. Pass `100,[10,100,300,350,500,600,670,700,900]` to the withdraw function the same way that you did for the [previous example](#problem-on-chain-computation-leads-to-high-gas-fees).\n\n1. Register three upkeeps for your contract as explained [here](/chainlink-automation/register-upkeep/). Because the Automation Nodes handle much of the computation off-chain, a gas limit of 200,000 is sufficient. For each registration, pass the following `checkData` values to specify which balance indexes the registration will monitor. **Note**: You must remove any breaking line when copying the values.\n\n   | Upkeep Name             | CheckData(base16)                                                                                                                                      | Remark: calculated using [`abi.encode()`](https://docs.soliditylang.org/en/develop/abi-spec.html#strict-encoding-mode) |\n   | ----------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------- |\n   | balancerOffChainSubset1 | 0x000000000000000000000000<br/>00000000000000000000000000<br/>00000000000000000000000000<br/>00000000000000000000000000<br/>0000000000000000000000014c | lowerBound: 0<br/>upperBound: 332                                                                                      |\n   | balancerOffChainSubset2 | 0x000000000000000000000000<br/>00000000000000000000000000<br/>0000000000014d000000000000<br/>00000000000000000000000000<br/>0000000000000000000000029a | lowerBound: 333<br/>upperBound: 666                                                                                    |\n   | balancerOffChainSubset3 | 0x000000000000000000000000<br/>00000000000000000000000000<br/>0000000000029b000000000000<br/>00000000000000000000000000<br/>000000000000000000000003e7 | lowerBound: 667<br/>upperBound: 999                                                                                    |\n\n1. After the registration is confirmed, the three upkeeps run:\n\n   ![BalancerOffChain1 History](/images/contract-devs/automation/balancerOffChain1-history.png \"balancerOffChainSubset1\")\n\n   ![BalancerOffChain2 History](/images/contract-devs/automation/balancerOffChain2-history.png \"balancerOffChainSubset2\")\n\n   ![BalancerOffChain3 History](/images/contract-devs/automation/balancerOffChain3-history.png \"balancerOffChainSubset3\")\n\n1. Click each transaction hash to see the details of each transaction in Etherscan. Find the gas used by each of the upkeep transactions:\n\n   ![BalancerOffChain1 Gas](/images/contract-devs/automation/balancerOffChain1-gas.png \"balancerOffChainSubset1\")\n\n   ![BalancerOffChain2 Gas](/images/contract-devs/automation/balancerOffChain2-gas.png \"balancerOffChainSubset2\")\n\n   ![BalancerOffChain3 Gas](/images/contract-devs/automation/balancerOffChain3-gas.png \"balancerOffChainSubset3\")\n\nIn this example the total gas used by each `performUpkeep()` function was 133,464 + 133,488 + 133,488 = **400,440**. This is an improvement of about 84% compared to the previous example, which used **2,481,379** gas.\n\n## Conclusion\n\nUsing Chainlink Automation efficiently not only allows you to reduce the gas fees, but also keeps them within predictable limits. That’s the reason why [several Defi protocols](https://chainlinktoday.com/prominent-founders-examine-chainlink-keepers-role-in-defis-evolution/) outsource their maintenance tasks to Chainlink Automation.\n"
    },
    {
      "title": "Chainlink Automation Documentation",
      "headings": [
        {
          "depth": 2,
          "slug": "select-a-trigger",
          "text": "Select a trigger"
        },
        {
          "depth": 3,
          "slug": "time-based-trigger",
          "text": "Time-based Trigger"
        },
        {
          "depth": 3,
          "slug": "custom-logic-trigger",
          "text": "Custom logic trigger"
        },
        {
          "depth": 2,
          "slug": "supported-networks-and-costs",
          "text": "Supported networks and costs"
        },
        {
          "depth": 2,
          "slug": "questions-and-examples",
          "text": "Questions and examples"
        }
      ],
      "url": "/chainlink-automation/introduction",
      "section": "ethereum",
      "content": "\n:::tip[ATTENTION]\n**Chainlink Keepers** is now called **Chainlink Automation**. For more information, visit the [Chainlink Automation Release Notes](/chainlink-automation/automation-release-notes).\n:::\n\n![Chainlink Automation Network Banner](/images/contract-devs/generic-banner.png)\n\n**Chainlink Automation** enables conditional execution of your smart contracts functions through a hyper-reliable and decentralized automation platform that uses the same external network of node operators that secures billions in value. Building on Chainlink Automation will help you get to market faster so you don't have to deal with the setup cost, ongoing maintenance, and risks associated with a centralized automation stack. To take full advantage of the Chainlink Automation infrastructure, read all of the documentation to understand the features of Chainlink Automation.\n\nTo learn more about how the Chainlink Automation Network automates your smart contracts, read the [Chainlink Automation Architecture](/chainlink-automation/overview) page.\n\n![Chainlink Automation](/images/contract-devs/automation/automation_intro.gif)\n\n**Topics**\n\n- [Select a trigger](#select-a-trigger)\n  - [Time-based trigger](#time-based-trigger)\n  - [Custom logic trigger](#custom-logic-trigger)\n- [Supported networks and costs](#supported-networks-and-costs)\n- [Questions and examples](#questions-and-examples)\n\n## Select a trigger\n\nChainlink Automation will reliably execute smart contract functions using a variety of triggers.\n\n- [Time-based trigger](#time-based-trigger): Use a [time based trigger](#time-based-trigger) to execute your function according to a time schedule. This feature is also called the Job Scheduler and it is a throwback to the Ethereum Alarm Clock. Time-based trigger contracts do not need to be [compatible](/chainlink-automation/compatible-contracts/#example-contract) with the `AutomationCompatibleInterface` contract.\n- [Custom logic trigger](#custom-logic-trigger): Use a [custom logic trigger](#custom-logic-trigger) to provide custom solidity logic that Automation Nodes evaluate (off-chain) to determine when to execute your function on-chain. Your contract must meet the requirements to be [compatible](/chainlink-automation/compatible-contracts/) with the `AutomationCompatibleInterface` contract. Custom logic examples include checking the balance on a contract, only executing limit orders when their levels are met, any one of our [coded examples](/chainlink-automation/util-overview), and many more.\n\n### Time-based Trigger\n\nBefore you begin, deploy the contract that you want to automate. You will also need the ABI for your contract if it has not been verified. Your contract does not need to be [compatible](/chainlink-automation/compatible-contracts/) with the `AutomationCompatibleInterface` contract.\n\n1. Open the Chainlink Automation app.\n\n   <!-- prettier-ignore -->\n   <div class=\"remix-callout\">\n      <a href=\"https://automation.chain.link\" >Open the Chainlink Automation App</a>\n   </div>\n\n1. [Register](/chainlink-automation/job-scheduler/) a new Upkeep in the [Chainlink Automation App](https://automation.chain.link) and select **Time-based** trigger. Provide the address of your deployed contract, provide the ABI if it is not verified, and choose the function that you want to automate along with the relevant function inputs, if any.\n\n1. Specify the time schedule using [CRON](/chainlink-automation/job-scheduler/#specifying-the-time-schedule).\n\n1. Complete the remaining details. Your upkeep name will be publicly visible, but your email and project name will not be publicly visible. Your gas limit needs to include an extra [150K](/chainlink-automation/job-scheduler/#entering-upkeep-details) for execution.\n\n1. Fund your Upkeep with ERC-677 LINK. See the [LINK token contracts](/resources/link-token-contracts/) page to determine where to acquire ERC-677 LINK.\n\n1. After your Upkeep is registered, [manage](/chainlink-automation/manage-upkeeps/) it in the Chainlink Automation App.\n\nFor more details on time-based automation, click [here](/chainlink-automation/job-scheduler/).\n\n### Custom logic trigger\n\nTo use a custom logic trigger, you must make your contract [compatible](/chainlink-automation/compatible-contracts/) with the `AutomationCompatibleInterface` contract.\n\n1. Open the Chainlink Automation app.\n\n    <!-- prettier-ignore -->\n   <div class=\"remix-callout\">\n      <a href=\"https://automation.chain.link\" >Open the Chainlink Automation App</a>\n   </div>\n\n1. [Register](/chainlink-automation/register-upkeep/) a new Upkeep in the [Chainlink Automation App](https://automation.chain.link) and select **Custom logic** trigger. Provide the address of your [compatible](/chainlink-automation/compatible-contracts/) contract and complete the remaining details. Your upkeep name will be publicly visible, but your email and project name will **not** be publicly visible. Ensure you specify the appropriate gas limit for your function to execute on chain.\n\n1. Fund your Upkeep with ERC-677 LINK. See the [LINK token contracts](/resources/link-token-contracts/) page to determine where to acquire ERC-677 LINK.\n\n1. After your Upkeep is registered, [manage](/chainlink-automation/manage-upkeeps/) it in the Chainlink Automation App.\n\n1. For more details on custom logic automation, read the [Creating Compatible Contracts](/chainlink-automation/compatible-contracts/) guide.\n\n:::caution[WARNING]\nDo **NOT** attempt to send LINK to your contract. For Chainlink Automation, contracts are funded through the registry rather than within your contract.\n:::\n\n:::tip[Funding Upkeep]\nFund your Upkeep with more LINK than you anticipate you will need. The network will not check or perform your upkeep if your balance is too low based on current exchange rates. View the [Automation Economics](/chainlink-automation/automation-economics) page to learn more about the cost of using Chainlink Automation.\n:::\n\n:::tip[ERC677 Link]\nFor registration you must use ERC-677 LINK. Read our [LINK](/resources/link-token-contracts/) page to determine where to acquire mainnet LINK, or visit our [faucets.chain.link](https://faucets.chain.link/) for testnet LINK.\n:::\n\n## Supported networks and costs\n\nFor a list of blockchains that is supported by Chainlink Automation, see the [Supported Networks](/chainlink-automation/supported-networks) page. To learn more about the cost of using Chainlink Automation, see the [Automation Economics](/chainlink-automation/automation-economics) page.\n\n## Questions and examples\n\nIf you have questions, read the [Chainlink Automation Frequently Asked Questions](/chainlink-automation/faqs/) page, ask them in the [#automation channel](https://discord.com/channels/592041321326182401/821350860302581771) in our [Discord server](https://discord.gg/qj9qarT), or [reach out to us](https://forms.gle/WadxnzzjHPtta5Zd9).\n\nTo understand different use cases for Chainlink Automation, refer to [Other Tutorials](/getting-started/other-tutorials/).\n"
    },
    {
      "title": "Chainlink Automation Job Scheduler",
      "headings": [
        {
          "depth": 2,
          "slug": "register-a-new-upkeep",
          "text": "Register a new Upkeep"
        },
        {
          "depth": 3,
          "slug": "connecting-your-wallet",
          "text": "Connecting your Wallet"
        },
        {
          "depth": 2,
          "slug": "trigger-selection",
          "text": "Trigger Selection"
        },
        {
          "depth": 2,
          "slug": "using-time-based-triggers",
          "text": "Using Time-Based Triggers"
        },
        {
          "depth": 3,
          "slug": "specifying-the-time-schedule",
          "text": "Specifying the Time Schedule"
        },
        {
          "depth": 3,
          "slug": "entering-upkeep-details",
          "text": "Entering Upkeep Details"
        }
      ],
      "url": "/chainlink-automation/job-scheduler",
      "section": "ethereum",
      "content": "\nThis guide explains how to register a time-based Upkeep that executes according to a time schedule that you provide.\n\n**Topics**\n\n- [Register a new Upkeep](#register-a-new-upkeep)\n- [Trigger Selection](#trigger-selection)\n- [Using Time-Based Triggers](#using-time-based-triggers)\n\n![Job Scheduler animation](/images/contract-devs/automation/auto-job-scheduler.gif)\n\n## Register a new Upkeep\n\nTo use the job scheduler, you must register a new upkeep on the Automation network. In the [Chainlink Automation App](https://automation.chain.link/), click the blue **Register new Upkeep** button.\n\n![Chainlink Automation App](/images/contract-devs/automation/auto-ui-home.png)\n\n### Connecting your Wallet\n\nIf you do not already have a wallet connected with the Chainlink Automation network, the interface will prompt you to do so. Click the **Connect Wallet** button and follow the remaining prompts to connect your wallet to the network.\n\n![Automation Connect Wallet](/images/contract-devs/automation/auto-ui-wallet.png)\n\n## Trigger Selection\n\nAfter you have successfully connected your wallet, please select time-based trigger.\n\n![Automation Trigger Selection](/images/contract-devs/automation/auto-ui-pick.png)\n\n## Using Time-Based Triggers\n\nWhen you select the time-based trigger, you are prompted to enter a _contract address_. Provide the address of the contract you want to execute. If you did not verify the contract on chain, you will need to paste the [Application Binary Interface](https://docs.soliditylang.org/en/develop/abi-spec.html) (ABI) of the deployed contract into the corresponding text box. Select the function name that you want to execute and provide any static inputs. If you want to use dynamic inputs please see [Custom logic Upkeeps](/chainlink-automation/register-upkeep/)\n\n![Automation Time Based Trigger](/images/contract-devs/automation/automation-time-based-trigger.png)\n\n### Specifying the Time Schedule\n\nAfter you successfully entered your contract address and ABI, specify your time schedule in the form of a CRON expression. CRON expressions are a shorthand way to create a time schedule. Use the provided example buttons to experiment with different schedules and then create your own.\n\n```\nCron jobs are interpreted according to this format:\n\n  ┌───────────── minute (0 - 59)\n  │ ┌───────────── hour (0 - 23)\n  │ │ ┌───────────── day of the month (1 - 31)\n  │ │ │ ┌───────────── month (1 - 12)\n  │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday)\n  │ │ │ │ │\n  │ │ │ │ │\n  │ │ │ │ │\n  * * * * *\n\nAll times are in UTC\n\n- can be used for range e.g. \"0 8-16 * * *\"\n/ can be used for interval e.g. \"0 */2 * * *\"\n, can be used for list e.g. \"0 17 * * 0,2,4\"\n\n  Special limitations:\n    * there is no year field\n    * no special characters: ? L W #\n    * lists can have a max length of 26\n    * no words like JAN / FEB or MON / TUES\n```\n\nAfter you enter your CRON expression, click **Next**.\n\n![Automation Cron Expression](/images/contract-devs/automation/automation-cron-expression.png)\n\n### Entering Upkeep Details\n\nTo complete the upkeep registration process, you must enter some information about your upkeep including its name, gas limit, starting balance LINK, and contact information.\n\n:::note[Job Scheduler Gas requirements]\nWhen you create an upkeep through the Job Scheduler, Chainlink Automation deploys a new `CronUpkeep` contract from the [CronUpkeepFactory](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/factories/CronUpkeepFactory.sol) to manage your time schedule and ensure that it is compatible. This contract uses roughly 110K gas per call, so it is recommended to add 150K additional gas to the gas limit of the function you are automating.\n:::\n\n![Automation Upkeep Details](/images/contract-devs/automation/automation-upkeep-details.png)\n\n:::tip[ERC677 Link]\nFor registration you must use ERC-677 LINK. Read our [LINK](/resources/link-token-contracts/) page to determine where to acquire mainnet LINK, or visit our [faucets.chain.link](https://faucets.chain.link/) for testnet LINK.\n:::\n"
    },
    {
      "title": "Managing Upkeeps",
      "headings": [
        {
          "depth": 2,
          "slug": "overview",
          "text": "Overview"
        },
        {
          "depth": 2,
          "slug": "fund-your-upkeep",
          "text": "Fund your Upkeep"
        },
        {
          "depth": 2,
          "slug": "maintain-a-minimum-balance",
          "text": "Maintain a Minimum Balance"
        },
        {
          "depth": 2,
          "slug": "withdraw-funds",
          "text": "Withdraw funds"
        },
        {
          "depth": 2,
          "slug": "interacting-directly-with-the-chainlink-automation-registry",
          "text": "Interacting directly with the Chainlink Automation Registry"
        }
      ],
      "url": "/chainlink-automation/manage-upkeeps",
      "section": "ethereum",
      "content": "\n## Overview\n\nManage your Upkeeps to get the best performance.\n\n**Topics**\n\n- [Fund your Upkeep](#fund-your-upkeep)\n- [Maintain a Minimum Balance](#maintain-a-minimum-balance)\n- [Withdraw funds](#withdraw-funds)\n- [Interacting directly with the Chainlink Automation Registry](#interacting-directly-with-the-chainlink-automation-registry)\n\n## Fund your Upkeep\n\nYou must monitor the balance of your Upkeep. If the Upkeep LINK balance drops below the [minimum balance](/chainlink-automation/automation-economics/#minimum-balance), the Chainlink Automation Network will not perform the Upkeep.\n\n:::note[ERC677 Link]\nFor funding on Mainnet, you need ERC-677 LINK. Many token bridges give you ERC-20 LINK tokens. Use PegSwap to [convert Chainlink tokens (LINK) to be ERC-677 compatible](https://pegswap.chain.link/). To fund on a supported testnet, get [LINK](/resources/link-token-contracts/) for the testnet you are using from our [faucet](https://faucets.chain.link/).\n:::\n\nFollow these steps to fund your Upkeep:\n\n1. **Click `View Upkeep`** or go to the [Chainlink Automation App](https://automation.chain.link) and click on your recently registered Upkeep under My Upkeeps.\n\n1. **Click the `Add funds` button**\n\n1. **Approve the LINK spend allowance**\n   ![Approve LINK Spend Allowance](/images/contract-devs/automation/automation-approve-allowance.png)\n\n1. **Confirm the LINK transfer** by sending funds to the Chainlink Automation Network Registry\n   ![Confirm LINK Transfer](/images/contract-devs/automation/automation-confirm-transfer.png)\n\n1. **Receive a success message** and verify that the funds were added to the Upkeep\n   ![Funds Added Successful Message](/images/contract-devs/automation/automation-add-funds.png)\n\n## Maintain a Minimum Balance\n\nEach Upkeep has a [minimum balance](/chainlink-automation/automation-economics/#minimum-balance) to ensure that an Upkeeps will still run should a sudden spike occur. If your Upkeep LINK balance drops below this amount, the Upkeep will not be performed.\n\nTo account for Upkeep execution over time and possible extended gas spikes, maintain an Upkeep LINK balance that is 3 to 5 times the minimum balance. Note if you have an upkeep that performs frequently you may want to increase the buffer to ensure a reasonable interval before you need to fund again. Developers also have the ability to update `performGasLimit` for an upkeep.\n\n## Withdraw funds\n\nTo withdraw funds, the Upkeep administrator have to cancel the Upkeep first. There is a 50 block delay once an Upkeep has been cancelled before funds can be withdrawn. Once 50 blocks have passed, select **Withdraw funds**.\n\n## Interacting directly with the Chainlink Automation Registry\n\nAfter registration, you can interact directly with the [registry contract](/chainlink-automation/supported-networks/#configurations) functions such as `cancelUpkeep` and `addFunds` using your **Upkeep ID**. The Registry Address might change when new contracts are deployed with new functionality.\n"
    },
    {
      "title": "Chainlink Automation Architecture",
      "headings": [
        {
          "depth": 2,
          "slug": "overview",
          "text": "Overview"
        },
        {
          "depth": 2,
          "slug": "automation-contracts",
          "text": "Automation Contracts"
        },
        {
          "depth": 2,
          "slug": "how-it-works",
          "text": "How it works"
        },
        {
          "depth": 2,
          "slug": "internal-monitoring",
          "text": "Internal monitoring"
        },
        {
          "depth": 2,
          "slug": "supported-networks-and-cost",
          "text": "Supported Networks and Cost"
        }
      ],
      "url": "/chainlink-automation/overview",
      "section": "ethereum",
      "content": "\n## Overview\n\nChainlink Automation enable you to execute smart contract functions based on conditions that you specify without having to create and maintain your own centralized stack. Chainlink Automation is highly reliable and decentralized, supported by an industry leading team, and enables developers to deploy applications faster.\n\nThere are three main actors in the ecosystem:\n\n- **Upkeeps**: These are the jobs or tasks that you execute on-chain. For example, you can call a smart contract function if a specific set of conditions are met.\n- **Automation registry**: The contract that you use to [register](/chainlink-automation/register-upkeep/) and manage **upkeeps**.\n- **Automation Nodes**: Nodes in the Chainlink Automation Network that service registered and funded upkeeps in the Automation registry. Automation Nodes use the same Node Operators as Chainlink Data Feeds.\n\nThe following diagram describes the architecture of the Chainlink Automation Network. The Chainlink Automation Registry governs the actors on the network and compensates Automation Nodes for performing successful upkeeps. Developers can register their Upkeeps, and Node Operators can register as Automation Nodes.\n\n![automation-overview](/images/contract-devs/automation/automation-overview.png)\n\n## Automation Contracts\n\nAutomation Nodes use these contracts. You can find them in the [Chainlink repository](https://github.com/smartcontractkit/chainlink/tree/develop/contracts/src/v0.8). For details about how to use them, see the [Creating Compatible Contracts](/chainlink-automation/compatible-contracts/) guide.\n\n- `AutomationCompatible.sol`[(link)](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/AutomationCompatible.sol): Imports the following contracts:\n  - `AutomationBase.sol`[(link)](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/AutomationBase.sol): Enables the use of the `cannotExecute` modifier. Import this contract if you need for this modifier. See the [`checkUpkeep` function](/chainlink-automation/compatible-contracts#checkupkeep-function) for details.\n  - `AutomationCompatibleInterface.sol`[(link)](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol): The interface to be implemented in order to make your contract compatible. Import this contract for type safety.\n- `AutomationRegistry1_2.sol`[(link)](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/AutomationRegistry1_2.sol): The registry contract that tracks all registered Upkeeps and the Automation Nodes that can perform them.\n- `KeeperRegistrar.sol`[(link)](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/KeeperRegistrar.sol): The Registrar contract coverns the registration of new Upkeeps on the associated `KeeperRegistry` contract. Users who want to register Upkeeps by directly calling the deployed contract have to call the Transfer-and-Call function on the respective ERC-677 LINK contract configured on the Registrar and ensure they pass the correct encoded function call and inputs.\n\n## How it works\n\nAutomation Nodes follow a turn-taking algorithm to service upkeeps. A turn is a number of blocks and you can find the block count per turn for your network in the [configuration](/chainlink-automation/supported-networks/#configurations) section. During a turn a Upkeeps on the registry are randomly split, ordered into buckets, and assigned to an Automation Node to service them. Even if an Automation Node goes down, the network has built-in redundancy and your Upkeep will be performed by the next Automation Node in line.\n\nDuring every block, the Automation Node reviews all of the upkeeps in its bucket to determine which upkeeps are eligible. This check is done off-chain using a geth simulation. The Automation Node checks both the `checkUpkeep` and `performUpkeep` conditions independently using simulation. If both are true (eligible), and the upkeep is funded, the Automation Node proceeds to execute the transaction on-chain.\n\nWhile only one Automation Node monitors an upkeep at any point during a turn, an upkeep can have multiple on-chain transaction executions per turn. This is accomplished with a buddy-system. After a transaction is confirmed, the next Automation Node in the line monitors the upkeep. After a new transaction is confirmed, the previous Automation Node steps in again to monitor the upkeep until the end of the turn or until another transaction confirmation is complete. This creates a system that is secure and highly available. If a node becomes faulty and executes a transaction that is not eligible, the next node does not execute a transaction, which breaks the process.\n\nChainlink Automation use the same transaction manager mechanism built and used by Chainlink Data Feeds. This creates a hyper-reliable automation service that can execute and confirm transactions even during intense gas spikes or on chains with significant reorgs. This mechanism has been in use in Chainlink Labs for multiple years, is battle hardened, and the team continuously improves on it.\n\n## Internal monitoring\n\nInternally, Chainlink Automation also uses its own monitoring and alerting mechanisms to maintain a health network and ensure developers get the reliability that they expect.\n\n## Supported Networks and Cost\n\nFor a list of blockchains that is supported by Chainlink Automation, please review the [supported networks page](/chainlink-automation/supported-networks). To learn more about the cost of using Chainlink Automation, please review the [Automation economics](/chainlink-automation/automation-economics) page.\n"
    },
    {
      "title": "Register a Custom Logic Upkeep",
      "headings": [
        {
          "depth": 2,
          "slug": "overview",
          "text": "Overview"
        },
        {
          "depth": 2,
          "slug": "register-an-upkeep-using-the-chainlink-automation-app",
          "text": "Register an Upkeep using the Chainlink Automation App"
        },
        {
          "depth": 2,
          "slug": "register-an-upkeep-using-your-own-deployed-contract",
          "text": "Register an Upkeep using your own deployed contract"
        },
        {
          "depth": 3,
          "slug": "prerequisites",
          "text": "Prerequisites"
        },
        {
          "depth": 3,
          "slug": "code-example",
          "text": "Code example"
        },
        {
          "depth": 3,
          "slug": "registerandpredictid-parameters",
          "text": "registerAndPredictID Parameters"
        }
      ],
      "url": "/chainlink-automation/register-upkeep",
      "section": "ethereum",
      "content": "\n## Overview\n\nThis guide explains how to register a custom logic Upkeep that uses a [compatible contract](/chainlink-automation/compatible-contracts). You can register it using the Chainlink Automation App or from within a contract that you deploy.\n\n**Topics**\n\n- [Register an Upkeep using the Chainlink Automation App](#register-an-upkeep-using-the-chainlink-automation-app)\n- [Register an Upkeep using your own deployed contract](#register-an-upkeep-using-your-own-deployed-contract)\n\n## Register an Upkeep using the Chainlink Automation App\n\n<div class=\"remix-callout\">\n    <a href=\"https://automation.chain.link\" >Open the Chainlink Automation App</a>\n</div>\n\n1. **Click the Register New Upkeep button**\n   ![Click Register New Upkeep](/images/contract-devs/automation/auto-ui-home.png)\n\n1. **Connect your wallet** using the _Connect Wallet_ choose a network. For a list of supported networks, see the [Supported Blockchain Networks](/chainlink-automation/supported-networks) section. The Chainlink Automation App also lists the currently supported networks.\n   ![Connect With Metamask](/images/contract-devs/automation/auto-ui-wallet.png)\n\n1. **Select the custom logic trigger**\n\n1. **Provide the address of your [compatible contract](/chainlink-automation/compatible-contracts)** You do not need to verify the contract on-chain, but it must be [compatible](/chainlink-automation/compatible-contracts/) with the `AutomationCompatibleInterface` contract.\n\n1. **Complete the required details:**\n\n   - **Upkeep name**: This will be publicly visible in the Chainlink Automation app.\n   - **Gas limit**: This is the maximum amount of gas that your transaction requires to execute on chain. This limit cannot exceed the `performGasLimit` value configured on the [registry](/chainlink-automation/supported-networks/#configurations). Before the network executes your transaction on chain, it simulates the transaction. If the gas required to execute your transaction exceeds the gas limit that you specified, your transaction will not be confirmed. Developers also have the ability to update `performGasLimit` for an upkeep. Consider running your function on a testnet to see how much gas it uses before you select a gas limit. This can be changed afterwards.\n   - **Starting balance (LINK)**: Specify a LINK starting balance to fund your upkeep. See the [LINK Token Contracts](/resources/link-token-contracts/) page to find the correct contract address and access faucets for testnet LINK. This field is required. You must have LINK before you can use the Chainlink Automation service.\n   - **Check data**: This field is provided as an input for when your `checkUpkeep` function is simulated. Either leave this field blank or specify a hexadecimal value starting with `0x`. To learn how to make flexible upkeeps using `checkData`, see the [Flexible Upkeeps](/chainlink-automation/flexible-upkeeps) guide.\n   - **Your email address**: This email address will be encrypted and is used to send you an email when your upkeep is underfunded.\n      <!-- prettier-ignore -->\n\n     :::tip[Funding Upkeep]\n     You should fund your contract with more LINK that you anticipate you will need. The network will not check or perform your Upkeep if your balance is too low based on current exchange rates. View the [Automation economics](/chainlink-automation/automation-economics) page to learn more about the cost of using Chainlink Automation.\n     :::\n\n      <!-- prettier-ignore -->\n\n     :::tip[ERC677 Link]\n     Fund your Upkeep with more LINK than you anticipate you will need. The network will not check or perform your upkeep if your balance is too low based on current exchange rates. View the [Automation Economics](/chainlink-automation/automation-economics) page to learn more about the cost of using Chainlink Automation.\n     :::\n\n      <!-- prettier-ignore -->\n\n     :::tip[Testing and best practices]\n     Follow the [best practices](/chainlink-automation/compatible-contracts/#best-practices) when creating a compatible contract and test your upkeep on a testnet before deploying it to a mainnet.\n     :::\n\n1. **Click `Register upkeep`** and confirm the transaction in MetaMask.\n   ![Upkeep Registration Success Message](/images/contract-devs/automation/automation-registration-submitted.png)\n\nYour upkeeps will be displayed in your list of **Active Upkeeps**. You must monitor the balance of your upkeep. If the balance drops below the **minimum balance**, the Chainlink Automation Network will not perform the Upkeep. See [Managing Upkeeps](/chainlink-automation/manage-upkeeps) to learn how to manage your upkeeps.\n\n## Register an Upkeep using your own deployed contract\n\nYou can dynamically create and manage Upkeeps from within your own dApp. To do this you will need to keep track of the Upkeep ID as your contract will use this to subsequently interact with the Chainlink Automation registry. The following example displays a smart contract that can create an Upkeep and determine the Upkeep ID. Note your contract must be compatible and you will need [ERC-677 LINK](/resources/link-token-contracts/) to fund the upkeep. You can also program your Upkeep to check its own balance and fund itself by interacting with the registry.\n\n### Prerequisites\n\nFind the following addresses for your network:\n\n- Correct [LINK token contract](/resources/link-token-contracts/)\n- [Registry and registrar addresses for your network](/chainlink-automation/supported-networks/#configurations)\n\nOptionally, you can fetch the LINK address and registrar address from the intended registry at run-time.\n\n:::note[Fund your contract]\nMake sure your contract has enough [ERC-677 LINK](/resources/link-token-contracts/) to fund the Upkeep at creation. _The minimum amount is 5 LINK._\n:::\n\n### Code example\n\n::solidity-remix[samples/Automation/UpkeepIDConsumerExample.sol]\n\n### `registerAndPredictID` Parameters\n\n| Name             | Description                                                                                                                          |\n| ---------------- | ------------------------------------------------------------------------------------------------------------------------------------ |\n| `name`           | Name of Upkeep                                                                                                                       |\n| `encryptedEmail` | Not in use in programmatic registration. Please specify with `0x`                                                                    |\n| `upkeepContract` | Address of Keepers-compatible contract that will be automated                                                                        |\n| `gasLimit`       | The maximum amount of gas that will be used to execute your function on-chain                                                        |\n| `adminAddress`   | Address for Upkeep administrator. Upkeep administrator can fund contract.                                                            |\n| `checkData`      | ABI-encoded fixed and specified at Upkeep registration and used in every checkUpkeep. Can be empty (0x)                              |\n| `amount`         | The amount of LINK (in Wei) to fund your Upkeep. The minimum amount is 5 LINK. To fund 5 LINK please set this to 5000000000000000000 |\n| `source`         | Not in use in programmatic registration. Please specify with `0`.                                                                    |\n\nRefer to the [Supported Networks](/chainlink-automation/supported-networks/#configurations) page to find the correct registry and registrar addresses for your contract.\n"
    },
    {
      "title": "Chainlink Automation Example Contracts",
      "headings": [
        {
          "depth": 2,
          "slug": "contracts",
          "text": "Contracts"
        },
        {
          "depth": 3,
          "slug": "ethbalancemonitor",
          "text": "EthBalanceMonitor"
        },
        {
          "depth": 3,
          "slug": "vault-harvester",
          "text": "Vault Harvester"
        },
        {
          "depth": 3,
          "slug": "batch-nft-reveal",
          "text": "Batch NFT Reveal"
        },
        {
          "depth": 3,
          "slug": "dynamic-nfts",
          "text": "Dynamic NFTs"
        }
      ],
      "url": "/chainlink-automation/util-overview",
      "section": "ethereum",
      "content": "\nThese contracts are tools to help you quickly deploy Chainlink Automation for specific use-cases. This list will be updated as more contracts become available. For more resources on Keepers, including videos and tutorials, click [here](/getting-started/other-tutorials).\n\n## Contracts\n\n### `EthBalanceMonitor`\n\n[`EthBalanceMonitor` documentation](/chainlink-automation/utility-contracts)\n\nThis utility contract reviews the balances of a list of addresses and automatically tops them up. This automates the monitoring of Upkeep for registered contracts. To use this contract, you must add an address to the balance monitor Upkeep and make sure the balance monitor upkeep is well funded. Review the [`EthBalanceMonitor` documentation](/chainlink-automation/utility-contracts) to get started.\n\n### Vault Harvester\n\n[Vault Harvester repository](https://github.com/hackbg/chainlink-keepers-templates/tree/main/vault-harvester#chainlink-keepers-template-vault-harvester)\n\nThis example teaches you how to automate the process of compounding arbitrary yield farm reward tokens back into an initially deposited asset. Using Chainlink Automation to automate this process makes it more trustless and decentralized.\n\n### Batch NFT Reveal\n\n[Batch NFT Reveal repository](https://github.com/hackbg/chainlink-keepers-templates/tree/main/batch-nft-reveal#chainlink-keepers-template-batch-nft-reveal)\n\nThis example teaches how to use [Chainlink VRF](/vrf/v2/introduction/) and Chainlink Automation together. Using Chainlink Automation with batch NFT reveals, you can automate and further decentralize your NFTs.\n\n### Dynamic NFTs\n\n[Dynamic NFTs repository](https://github.com/smartcontractkit/smart-contract-examples/tree/main/dynamic-nft#dynamic-nfts)\n\n<YouTube id=\"https://www.youtube.com/watch?v=E7Rm1LUKhj4\" />\n\nThis example teaches you how to create dynamic NFTs using Chainlink Automation.\n"
    },
    {
      "title": "EthBalanceMonitor Contract",
      "headings": [
        {
          "depth": 2,
          "slug": "ethbalancemonitor-properties",
          "text": "EthBalanceMonitor Properties"
        },
        {
          "depth": 2,
          "slug": "functions",
          "text": "Functions"
        },
        {
          "depth": 3,
          "slug": "setwatchlist-function",
          "text": "setWatchList Function"
        },
        {
          "depth": 4,
          "slug": "parameters",
          "text": "Parameters"
        },
        {
          "depth": 3,
          "slug": "setkeeperregistryaddress-function",
          "text": "setKeeperRegistryAddress Function"
        },
        {
          "depth": 4,
          "slug": "parameters-1",
          "text": "Parameters"
        },
        {
          "depth": 3,
          "slug": "setminwaitperiodseconds-function",
          "text": "setMinWaitPeriodSeconds Function"
        },
        {
          "depth": 4,
          "slug": "parameters-2",
          "text": "Parameters"
        },
        {
          "depth": 3,
          "slug": "topup-function",
          "text": "topUp Function"
        },
        {
          "depth": 4,
          "slug": "parameters-3",
          "text": "Parameters"
        }
      ],
      "url": "/chainlink-automation/utility-contracts",
      "section": "ethereum",
      "content": "\nThis guide explains the use case for the [`EthBalanceMonitor` contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/upkeeps/EthBalanceMonitor.sol). This Automation contract monitors and funds Ethereum addresses that developers might need to top up frequently based on a configurable threshold. As a result, nodes are funded automatically.\n\nAfter deploying the contract, developers can go to [automation.chain.link](https://automation.chain.link/) to register Upkeep and run the contract. To take full advantage of the Chainlink Automation infrastructure, read all of the documentation to understand the features of Chainlink Automation.\n\nTo find other example contracts, see the [Example Automation Contracts](/chainlink-automation/util-overview/) page.\n\n**Topics**\n\n- [`EthBalanceMonitor` Properties](#ethbalancemonitor-properties)\n- [Functions](#functions)\n  - [`setWatchList` Function](#setwatchlist-function)\n  - [`setKeeperRegistryAddress` Function](#setkeeperregistryaddress-function)\n  - [`setMinWaitPeriodSeconds` Function](#setminwaitperiodseconds-function)\n  - [`topUp` Function](#topup-function)\n\n## `EthBalanceMonitor` Properties\n\n`EthBalanceMonitor` is ownable, pauseable, and compatible with the `AutomationCompatibleInterface` contract:\n\n- **Ownable**: The contract has an owner address, and provides basic authorization control functions. This simplifies the implementation of _user permissions_ and allows for transfer of ownership.\n- **Pauseable**: This feature allows the contract to implement a pause and unpause mechanism that the contract owner can trigger.\n- **Compatible**: The `AutomationCompatibleInterface` is necessary to create contracts that are compatible with the Chainlink Automation Network. To learn more about the `AutomationCompatibleInterface` and its uses and functions, read the [Making Compatible Contracts](/chainlink-automation/compatible-contracts/) guide.\n\nYou can open the contract in Remix:\n\n<!-- prettier-ignore -->\n<CodeSample src=\"samples/Automation/EthBalanceMonitor.sol\" showButtonOnly/>\n\n:::note[Note on Owner Settings]\nAside from certain features listed below, only owners can withdraw funds and pause or unpause the contract. If the contract is paused or unpaused, it will affect `checkUpkeep`, `performUpkeep`, and `topUp` functions.\n:::\n\n## Functions\n\nFunctions with an asterisk (`*`) denote features that only the owner can change. Click on each function to learn more about its parameters and design patterns:\n\n| Function Name                                                      | Description                                                                            |\n| ------------------------------------------------------------------ | -------------------------------------------------------------------------------------- |\n| [`setWatchList`\\*](#setwatchlist-function)                         | Addresses to watch minimum balance and how much to top it up.                          |\n| [`setKeeperRegistryAddress`\\*](#setkeeperregistryaddress-function) | Updates the `KeeperRegistry` address.                                                  |\n| [`setMinWaitPeriodSeconds`\\*](#setminwaitperiodseconds-function)   | Updates the global minimum period between top ups.                                     |\n| [`topUp`](#topup-function)                                         | Used by `performUpkeep`. This function will only trigger top up if conditions are met. |\n\nBelow are the feed functions in `EthBalanceMonitor`:\n\n| Read Function Name         | Description                                                                                                                         |\n| -------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- |\n| `getUnderfundedAddresses`  | View function used in `checkUpkeep` to find underfunded balances.                                                                   |\n| `getKeeperRegistryAddress` | Views the `KeeperRegistry` address.                                                                                                 |\n| `getMinWaitPeriodSeconds`  | Views the global minimum period between top ups.                                                                                    |\n| `getWatchList`             | Views addresses to watch minimum balance and how much to top it up.                                                                 |\n| `getAccountInfo`           | Provides information about the specific target address, including the last time it was topped up. This function is _external only_. |\n\n### `setWatchList` Function\n\n#### Parameters\n\n| Name              | Description                           | Suggested Setting           |\n| ----------------- | ------------------------------------- | --------------------------- |\n| `addresses`       | The list of addresses to watch        | (not applicable)            |\n| `minBalancesWei`  | The minimum balances for each address | 5000000000000000000 (5 ETH) |\n| `topUpAmountsWei` | The amount to top up each address     | 5000000000000000000 (5 ETH) |\n\nOnly the owner can `setWatchList`. Each of the parameters should be set with distinct requirements for each address.\n\n### `setKeeperRegistryAddress` Function\n\n#### Parameters\n\n| Name                    | Description                                        |\n| ----------------------- | -------------------------------------------------- |\n| `keeperRegistryAddress` | Address that requires updating in `KeeperRegistry` |\n\nOnly the `keeperRegistryAddress` can `performUpkeep`, which is a _global setting_. `KeeperRegistry` addresses can be found on the [Chainlink Automation app](https://automation.chain.link/). However, only the owner can set a new `KeeperRegistry` after deployment.\n\n### `setMinWaitPeriodSeconds` Function\n\n#### Parameters\n\n| Name     | Description                                                    | Suggested Setting |\n| -------- | -------------------------------------------------------------- | ----------------- |\n| `period` | Minimum wait period (in seconds) for addresses between funding | 3600 (1 hour)     |\n\n`period` denotes the length of time between top ups for a specific address. This is a _global setting_ that prevents draining of funds from the contract if the private key for an address is compromised or if a gas spike occurs. However, only the owner can set a different minimum wait period after deployment.\n\n### `topUp` Function\n\n#### Parameters\n\n| Name           | Description                                                |\n| -------------- | ---------------------------------------------------------- |\n| `needsFunding` | List of addresses to fund (addresses must be pre-approved) |\n\nAny address can trigger the `topUp` function. This is an intentional design pattern that shows how easy it is to make an existing contract compatible with Chainlink Automation while maintaining an open interface. All validations are performed before the funding is triggered. If the conditions are not met, any attempt to top up will revert.\n"
    },
    {
      "title": "Best Practices for Deploying Nodes on AWS",
      "headings": [
        {
          "depth": 2,
          "slug": "overview",
          "text": "Overview"
        },
        {
          "depth": 2,
          "slug": "created-resources",
          "text": "Created Resources"
        },
        {
          "depth": 2,
          "slug": "iam-roles",
          "text": "IAM Roles"
        },
        {
          "depth": 2,
          "slug": "billable-services",
          "text": "Billable Services"
        },
        {
          "depth": 2,
          "slug": "best-practices",
          "text": "Best Practices"
        },
        {
          "depth": 3,
          "slug": "do-not-run-as-the-root-user",
          "text": "Do not run as the root user"
        },
        {
          "depth": 3,
          "slug": "protect-your-aws-account",
          "text": "Protect your AWS account"
        },
        {
          "depth": 3,
          "slug": "monitor-your-chainlink-nodes-health",
          "text": "Monitor your Chainlink node’s health"
        },
        {
          "depth": 2,
          "slug": "recovering-or-upgrading-your-chainlink-node-container",
          "text": "Recovering or Upgrading your Chainlink Node Container"
        },
        {
          "depth": 3,
          "slug": "generating-the-env-file",
          "text": "Generating the .env file"
        },
        {
          "depth": 3,
          "slug": "generating-the-password-file",
          "text": "Generating the .password file"
        },
        {
          "depth": 3,
          "slug": "generating-the-api-file",
          "text": "Generating the .api file"
        },
        {
          "depth": 3,
          "slug": "stopping-and-removing-the-existing-chainlink-node-container",
          "text": "Stopping and removing the existing Chainlink node container"
        },
        {
          "depth": 3,
          "slug": "starting-the-chainlink-node-container-in-docker",
          "text": "Starting the Chainlink node container in Docker"
        },
        {
          "depth": 2,
          "slug": "backup-and-restore",
          "text": "Backup and Restore"
        },
        {
          "depth": 3,
          "slug": "database-backup",
          "text": "Database Backup"
        },
        {
          "depth": 3,
          "slug": "ec2-instance-backup",
          "text": "EC2 Instance Backup"
        },
        {
          "depth": 2,
          "slug": "failover-capabilities-and-disaster-recovery",
          "text": "Failover Capabilities and Disaster Recovery"
        },
        {
          "depth": 2,
          "slug": "troubleshooting-and-design-practices",
          "text": "Troubleshooting and Design Practices"
        },
        {
          "depth": 3,
          "slug": "aws-certificate-manager",
          "text": "AWS Certificate Manager"
        },
        {
          "depth": 3,
          "slug": "amazon-devops-guru",
          "text": "Amazon Devops Guru"
        }
      ],
      "url": "/chainlink-nodes/best-practices-aws",
      "section": "nodeOperator",
      "content": "\n**Topics**\n\n- [Overview](#overview)\n- [Created Resources](#created-resources)\n- [IAM Roles](#iam-roles)\n- [Billable Services](#billable-services)\n- [Best Practices](#best-practices)\n- [Recovering or Upgrading your Chainlink Node Container](#recovering-or-upgrading-your-chainlink-node-container)\n- [Backup and Restore](#backup-and-restore)\n- [Failover Capabilities and Disaster Recovery](#failover-capabilities-and-disaster-recovery)\n- [Troubleshooting and Design Practices](#troubleshooting-and-design-practices)\n\n## Overview\n\nYou can deploy a Chainlink node on the AWS Cloud using [AWS Quick Start](https://aws.amazon.com/quickstart) to deploy a highly available and secure Chainlink node on the AWS Cloud.\n\n<div class=\"remix-callout\">\n    <a href=\"https://aws.amazon.com/quickstart/architecture/chainlink-node/\" >Deploy a Chainlink Node on AWS</a>\n</div>\n\n## Created Resources\n\nThe Quick Start creates the following public resources:\n\n- An Elastic Load Balancing (ELB) load balancer to access the Chainlink node web graphical user interface\n- A Linux bastion host in an Auto Scaling group to allow inbound Secure Shell (SSH) access to EC2 instances in public and private subnetworks\n- Managed network address translation (NAT) gateways to allow outbound internet access for the Chainlink node instances in the private subnets\n\nBecause these resources are public facing, you should review security and best practices information on a regular basis against vulnerabilities that pose a risk.\n\n## IAM Roles\n\nThe Quick Start creates the following IAM roles:\n\n- **Administration Role:** Grants the provided administrator ID with administrator access\n- **Execution Role:** Grants cloudformation.amazonaws.com the administration role to extend the functionality of stacks by enabling create, update, or delete stacks across multiple accounts and regions with a single operation\n- **Chainlink Node Role:**\n  - Enables instances to use Systems Manager core service functionality\n  - Enables instances with logs and metrics functionality in CloudWatch\n  - Enables instances to retrieve Chainlink node secrets created during the Quick Start\n\n## Billable Services\n\nThe Quick Start has the following billable services. Click on each link to learn about the pricing model for each service:\n\n- [**Amazon EC2**](https://aws.amazon.com/ec2/pricing/?nc2=type_a)\n- [**Amazon Virtual Private Cloud (VPC)**](https://aws.amazon.com/vpc/pricing/)\n- [**Amazon Aurora PostgreSQL-Compatible DB**](https://aws.amazon.com/rds/aurora/pricing/)\n- [**Parameter Store**](https://aws.amazon.com/systems-manager/pricing/?nc2=type_a)\n- [**AWS Secrets Manager**](https://aws.amazon.com/secrets-manager/pricing/?nc1=h_ls)\n- [**AWS Key Management Service**](https://aws.amazon.com/kms/pricing/?nc2=type_a)\n- [**Amazon CloudWatch**](https://aws.amazon.com/cloudwatch/pricing/?nc2=type_a)\n- (_Optional_ if you are not using a public certificate with AWS Certificate Manager) [**Application Load Balancer**](https://aws.amazon.com/elasticloadbalancing/pricing/?nc=sn&loc=3)\n- (_Optional_) [**Amazon Devops Guru**](https://aws.amazon.com/devops-guru/pricing/?nc=sn&loc=3&refid=0c5ce5de-7dc6-4ce5-95c9-29c9047095fc~ha_awssm-10495_event_prospect)\n\nYou are responsible for the cost of the AWS services and any third-party licenses that you use while running this Quick Start. There is no additional cost for using the Quick Start.\n\nAWS maintains service limits for each account to help guarantee the availability of AWS resources. You are responsible for monitoring and managing the service limits of the resources that this Quick Start provisions.\n\nFor more information, visit [Manage Service Limits](https://aws.amazon.com/premiumsupport/knowledge-center/manage-service-limits/).\n\n## Best Practices\n\n### Do not run as the root user\n\nThe operations on the Chainlink node do not require the root user so it is recommended to use the default user or run as a non-root user.\n\n### Protect your AWS account\n\nAs a best security practice, [rotate programmatic system credentials](https://aws.amazon.com/blogs/security/how-to-rotate-access-keys-for-iam-users/) and [cryptographic keys](https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html).\n\nIf you enable Amazon Devops Guru, the Quick Start deploys an AWS managed customer key (CMK) that is used for the Amazon SNS topic for DevOps Guru. The default setting is automatically set to rotate this KMS key every year.\n\n### Monitor your Chainlink node's health\n\nRun regular health checks of your Chainlink node.\n\nWe recommend using a monitoring solution to track the health of your Chainlink node, such as [Prometheus](https://prometheus.io/docs/prometheus/latest/getting_started/) or [Grafana](https://grafana.com/docs/grafana/latest/getting-started/getting-started-prometheus/). Chainlink exposes metrics on the `/metrics` endpoint of the UI. By default, that's http://localhost:6688/metrics.\n\n```\n# A scrape configuration containing exactly one endpoint to scrape:\n# Here it's Prometheus itself.\nscrape_configs:\n  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.\n  - job_name: 'chainlink_node'\n    static_configs:\n    - targets: ['127.0.0.1:6688']\n    metrics_path: '/metrics'\n```\n\nAlternatively, you can run a health check on your node using `curl` and make sure the checks are `passing`. You can replace `localhost:6688` with the load balancer endpoint if you are using a domain.\n\n```shell\ncurl -XGET localhost:6688/health | jq '.'\n```\n\n```json\n% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  1900  100  1900    0     0   927k      0 --:--:-- --:--:-- --:--:--  927k\n{\n  \"data\": [\n    {\n      \"type\": \"checks\",\n      \"id\": \"*offchainreporting.SingletonPeerWrapper\",\n      \"attributes\": {\n        \"name\": \"*offchainreporting.SingletonPeerWrapper\",\n        \"status\": \"passing\",\n        \"output\": \"\"\n      }\n    },\n    {\n      \"type\": \"checks\",\n      \"id\": \"*job.spawner\",\n      \"attributes\": {\n        \"name\": \"*job.spawner\",\n        \"status\": \"passing\",\n        \"output\": \"\"\n      }\n    },\n    {\n      \"type\": \"checks\",\n      \"id\": \"*fluxmonitor.concreteFluxMonitor\",\n      \"attributes\": {\n        \"name\": \"*fluxmonitor.concreteFluxMonitor\",\n        \"status\": \"passing\",\n        \"output\": \"\"\n      }\n    },\n\n    ⋮\n\n  ]\n}\n```\n\nTo check the status of your Chainlink node container, use the `docker ps` command.\n\n## Recovering or Upgrading your Chainlink Node Container\n\nTag versions for Chainlink node releases are available in the [Chainlink docker hub](https://hub.docker.com/r/smartcontract/chainlink/tags)\n\nIf the Chainlink node containers are stopped or if you need to start up a new instance during an upgrade or recovery, you must create new `.env`, `.password`, and `.api` files to start the Chainlink node.\n\n### Generating the `.env` file\n\n```shell\ncd /home/ec2-user/.chainlink/ && ./create-env.sh \\\n${chainNetwork} \\\n${blockchainNodeUrl} \\\n${psqlUser} \\\n$(aws secretsmanager get-secret-value --secret-id DBSecret --query \"SecretString\" --output text) \\\n${psqlHostname} \\\n${psqlPort} \\\n${psqlDb}\n```\n\n### Generating the `.password` file\n\n```shell\ncd /home/ec2-user/.chainlink/ && ./create-password.sh \\\n$(aws secretsmanager get-secret-value --secret-id WalletSecret --query \"SecretString\" --output text)\n```\n\n### Generating the `.api` file\n\n```shell\ncd /home/ec2-user/.chainlink/ && ./create-api.sh \\\n${apiUser} \\\n$(aws secretsmanager get-secret-value --secret-id ApiSecret --query \"SecretString\" --output text)\n```\n\n### Stopping and removing the existing Chainlink node container\n\nThis process is required when you update the container to a newer release.\n\n```shell\ndocker stop chainlink && docker rm chainlink\n```\n\n### Starting the Chainlink node container in Docker\n\n```shell\nlatestimage=$(curl -s -S \"https://registry.hub.docker.com/v2/repositories/smartcontract/chainlink/tags/\" | jq -r '.\"results\"[][\"name\"]' | head -n 1)\ncd /home/ec2-user/.chainlink && docker run -d \\\n--log-driver=awslogs \\\n--log-opt awslogs-group=ChainlinkLogs \\\n--restart unless-stopped \\\n--name chainlink \\\n-p 6688:6688 \\\n-v /home/ec2-user/.chainlink:/chainlink \\\n--env-file=/home/ec2-user/.chainlink/.env  smartcontract/chainlink:$latestimage local n \\\n-p /chainlink/.password\n-a /chainlink/.api\n```\n\nYou can find more details with maintenance and examples in the [Performing System Maintenance](/chainlink-nodes/performing-system-maintenance/) guide.\n\nAdditionally, follow the directions in the [User Guide for Linux Instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/install-updates.html) to keep your Amazon Linux instance software up to date.\n\n## Backup and Restore\n\n### Database Backup\n\nThe PostgreSQL database is critical because it stores most of the Chainlink node data. Aurora automatically backs up your PostgreSQL cluster during the backup window with a default backup retention of 7 days. You can change the database cluster’s backup retention period to be as short as 1 day or up to 35 days. For more details, see the guide for [backing up and restoring an Aurora cluster](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html).\n\nIf the primary instance in your PostgreSQL cluster fails during an instance or service failure, Aurora will automatically fail over to an existing read replica or create a new primary instance if there are no read replicas available.\n\n### EC2 Instance Backup\n\nBy default, the Chainlink node does not contain any critical data other than the logs found in the Chainlink directory. If the primary Chainlink node instance is marked as unhealthy during an instance or service failure, the Auto Scaling group schedules a replacement instance and the standby Chainlink node instance will automatically fail over.\n\nYou can backup the EBS volumes attached to the Chainlink node by following the instructions in the [Amazon EBS snapshots](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html) guide. The [Amazon Data Lifecycle Manager](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html) can help to automate your EBS snapshots. To create a backup of the entire EC2 instance, you must create an AMI from the instance.\n\nTo see how to restore resources from an Amazon EBS snapshot or an AMI, see the [Restoring from an Amazon EBS snapshot or an AMI](https://docs.aws.amazon.com/prescriptive-guidance/latest/backup-recovery/restore.html) guide.\n\n## Failover Capabilities and Disaster Recovery\n\nChainlink node reputation depends on the uptime of the following itmes:\n\n- The Chainlink node\n- The database\n- The Ethereum client\n\nTo reduce downtime, failover capabilities are required on both the Chainlink node and Ethereum clients so that the service is still online even in the unlikely event of a virtual machine or network failure.\n\nThe [Amazon EC2 Auto Scaling](https://aws.amazon.com/ec2/autoscaling/) group provisions both a primary Chainlink node and a standby Chainlink node. Each node is placed in a separate Availability Zone.\n\nIf one Availability Zone becomes unhealthy or unavailable, the Amazon EC2 Auto Scaling group launches a new instance of the Chainlink node or bastion host in the unaffected Availability Zone. The failover happens automatically.\n\nThe data from both the Chainlink node and the Ethereum client is stored in the PostgreSQL database. The Aurora database cluster is fault tolerant by design and can handle an Availability Zone failure without any loss of data. There might be only a brief interruption of service with an automatic failover, which helps to reduce the Recovery Point Objective (RPO) and Recovery Time Objective (RTO).\n\nManagement of AWS service limits are not required for proper disaster recovery. The Quick Start deployment is configured with high availability in mind.\n\n## Troubleshooting and Design Practices\n\n### AWS Certificate Manager\n\nIn the AWS console, if the **SSL certificate with AWS Certificate Manager** is set to `false`, you can leave **arn:aws:acm:region:account-id:certificate** as is. However, if your node is external facing and must be reached by the internet, enable this feature and set it to `true`.\n\n![AWS Certificate Manager](/images/chainlink-nodes/aws-certificate-manager.png)\n\n### Amazon Devops Guru\n\nIn the AWS console, if the **Amazon DevOps Guru** is set to `false`, you can leave **AdministerAccountId** and **EmailAddress** as is.\n\n![Amazon Devops Guru](/images/chainlink-nodes/amazon-devops-guru.png)\n"
    },
    {
      "title": "Security and Operation Best Practices",
      "headings": [
        {
          "depth": 2,
          "slug": "restricting-access",
          "text": "Restricting Access"
        },
        {
          "depth": 2,
          "slug": "failover-capabilities",
          "text": "Failover Capabilities"
        },
        {
          "depth": 2,
          "slug": "disaster-recovery",
          "text": "Disaster Recovery"
        },
        {
          "depth": 2,
          "slug": "active-monitoring",
          "text": "Active Monitoring"
        },
        {
          "depth": 2,
          "slug": "frequent-updates",
          "text": "Frequent Updates"
        },
        {
          "depth": 2,
          "slug": "jobs-and-config",
          "text": "Jobs and Config"
        },
        {
          "depth": 2,
          "slug": "addresses",
          "text": "Addresses"
        },
        {
          "depth": 2,
          "slug": "infrastructure-as-code-iac",
          "text": "Infrastructure as Code (IaC)"
        }
      ],
      "url": "/chainlink-nodes/best-security-practices",
      "section": "nodeOperator",
      "content": "The following information provides a set of security and operation best practices that node operators need to use at a minimum to enhance the security and reliability of their infrastructure.\n\n## Restricting Access\n\nTo run a Chainlink node, the Operator UI port does not need to be open on the internet for it to correctly function. Due to this, we recommend restricting access to all of the services required over the internet.\n\n**Minimum Requirements:**\n\n- SSH (port 22 or changed from the default) is open, and access to the node is granted via SSH tunnelling. This is done typically by adding `-L 6688:localhost:6688` to your SSH command.\n- Access to the Ethereum client that the Chainlink node uses is restricted to solely the Chainlink node. This includes ports 8545 and 8546, but excludes 30303 for P2P traffic.\n\n**Recommended:**\n\n- The use of a VPN restricts access to only those who are signed into the VPN in order to access internal resources. For example, this can be achieved by using something like [OpenVPN Access Server](https://openvpn.net/vpn-server/).\n- With the use of the VPN, all traffic between Chainlink nodes and Ethereum clients is routed internally rather than over the internet. For example, all servers are placed in an internal subnet range such as `10.0.0.0/16` and use these IP addresses for communicating.\n- Chainlink nodes have the potential to send arbitrary HTTP GET and POST requests, exposing internal network resources. We recommend deploying with a DMZ which has strong outbound network restrictions.\n\n## Failover Capabilities\n\nTo ensure there is very minimal downtime, failover capabilities are required on both the Chainlink and Ethereum clients so that if any one server fails, the service is still online.\n\n**Minimum Requirements:**\n\n- Chainlink nodes are using a PostgreSQL database that are not on the same servers as the Chainlink nodes.\n- At least two Chainlink nodes are running at any one time, with both of them pointing to the same database to ensure failover if one fails.\n\n**Ethereum-specific:**\n\n- Ethereum client websocket connectivity is fronted by a load balancer, used by the Chainlink nodes. [Here is an example on how to set up a load balancer](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/tutorial-target-ecs-containers.html).\n    - If a VPN and internal routing is configured, SSL is not needed but still recommended, as all traffic is purely internal.\n    - If both Ethereum and Chainlink nodes are public facing without a VPN, SSL is required to ensure that no communication between both can be intercepted.\n\n## Disaster Recovery\n\nProblems occur and when they do, the right processes need to be in-place to ensure that as little downtime as possible occurs. The main impediment to incurring large amounts of downtime in the context of Chainlink node operators is a fully corrupted Ethereum node that requires a re-sync.\n\nDue to the challenge of recovering an Ethereum client, we recommend:\n\n- Daily snapshots of the Ethereum chain on a separate server than what the Chainlink node is connected to.\n- An Ethereum client start-up process that pulls down the latest template of the chain and syncs it to the latest height.\n\nWith this process in-place, the elapsed time of full disaster is kept to a minimum.\n\n## Active Monitoring\n\nTo be proactive in detecting any issues before or when they occur, active monitoring needs to be in place. The areas where we recommend to monitor are:\n\n- (Minimum Required) ETH balance of the wallet address assigned to the node.\n- Errored job runs.\n- Operator UI port to be open and responsive. (Usually: 6688)\n- Ethereum http and websocket ports to be open and responsive. (Usually: 8545 & 8546)\n- Ethereum client disk, RAM and CPU usage.\n\nMonitoring can be set up from the Docker container's output and fed into most major logging providers. For example, you can use Docker's docs to set up the logging driver for [Amazon CloudWatch](https://docs.docker.com/config/containers/logging/awslogs/) and [Google Cloud Logging](https://docs.docker.com/config/containers/logging/gcplogs/). You will want to set the [\nJSON_CONSOLE](/chainlink-nodes/configuration-variables/#json_console) configuration variable to `true` so that the output of the container is JSON-formatted for logging.\n\n## Frequent Updates\n\nDue to the early nature of the software, it may be required to perform frequent updates to your Chainlink node.\n\nOn performing system maintenance to update the Chainlink node, follow [this](/chainlink-nodes/performing-system-maintenance/#failover-node-example) guide.\n\n## Jobs and Config\n\nThe following are suggestions for job specifications and configuration settings for the node.\n\n[Job Specifications](/chainlink-nodes/oracle-jobs/jobs/):\n\n- Include the address of your oracle contract address for all RunLog initiated jobs, as shown in the [Fulfilling Requests](/chainlink-nodes/fulfilling-requests/#add-a-job-to-the-node) guide.\n- Override the global `MIN_INCOMING_CONFIRMATIONS` config by setting a `confirmations` field in jobs which perform off-chain payments to allow for greater security by making the node ensure the transaction is still valid after X blocks.\n\n[Configuring Chainlink Nodes](/chainlink-nodes/configuration-variables/):\n\n- [MINIMUM_CONTRACT_PAYMENT_LINK_JUELS](/chainlink-nodes/configuration-variables/#minimum_contract_payment_link_juels): ensure your required payment amount is high enough to meet the costs of responding on-chain.\n- [MIN_INCOMING_CONFIRMATIONS](/chainlink-nodes/configuration-variables/#min_incoming_confirmations): this can be set to 0 for common data request jobs. See the bullet above on setting individual `confirmations` for specific jobs.\n- [LOG_FILE_MAX_SIZE](/chainlink-nodes/configuration-variables/#log_file_max_size): Set this to `0` if you're using external log drivers which parse the output from Docker containers. This will save you disk space.\n- [JSON_CONSOLE](/chainlink-nodes/configuration-variables/#json_console): Set to `true` if you're using external log drivers to parse the output of Docker containers. This will make it easier to parse individual fields of the log and set up alerts.\n\n## Addresses\n\n- Chainlink node address: this is the address used by the Chainlink node to sign and send responses on-chain. This address should not be used by any other service since the Chainlink node keeps track of its nonce locally (instead of polling the network each transaction). This address only needs to be funded with ETH to be able to write back to the blockchain.\n- Oracle contract address: this is the address that users will send Chainlink requests to, and which your Chainlink node will fulfill them through this contract. For best practice, it should be owned by a secure address in your control, like a hardware or cold wallet, since it has access to your earned LINK funds. You will not need to fund this contract with anything (LINK or ETH). Instead, users will fund the contract with LINK as they send requests to it, and those funds will become available for withdrawal as your node fulfills the requests.\n\n## Infrastructure as Code (IaC)\n\nRunning a Chainlink node works well if you template out your infrastructure using tools like Kubernetes or Terraform. The following repositories can assist you with doing that:\n\n- [Pega88's Kubernetes & Terraform setup](https://github.com/Pega88/chainlink-gcp)\n- [SDL Chainlink Kubernetes Deployment](https://github.com/mycelium-ethereum/ChainlinkKubernetes)\n- [LinkPool's Terraform Provider](https://github.com/linkpoolio/terraform-provider-chainlink)\n- [Ansible hardened Chainlink](https://github.com/WilsonBillkia/bane)\n- [Terraform module for serverless OCR node on AWS](https://github.com/ChainOrion/terraform-aws-chainlink-node)\n- [Terraform module for serverless adapters on AWS](https://github.com/ChainOrion/terraform-aws-chainlink-ea)\n"
    },
    {
      "title": "Configuring Chainlink Nodes",
      "headings": [
        {
          "depth": 2,
          "slug": "changes-to-node-configuration-starting-in-v110-nodes",
          "text": "Changes to node configuration starting in v1.1.0 nodes"
        },
        {
          "depth": 2,
          "slug": "essential-environment-variables",
          "text": "Essential environment variables"
        },
        {
          "depth": 3,
          "slug": "database_url",
          "text": "DATABASE_URL"
        },
        {
          "depth": 2,
          "slug": "general-node-configuration",
          "text": "General Node Configuration"
        },
        {
          "depth": 3,
          "slug": "chain_type",
          "text": "CHAIN_TYPE"
        },
        {
          "depth": 3,
          "slug": "chainlink_dev",
          "text": "CHAINLINK_DEV"
        },
        {
          "depth": 3,
          "slug": "explorer_access_key",
          "text": "EXPLORER_ACCESS_KEY"
        },
        {
          "depth": 3,
          "slug": "explorer_secret",
          "text": "EXPLORER_SECRET"
        },
        {
          "depth": 3,
          "slug": "explorer_url",
          "text": "EXPLORER_URL"
        },
        {
          "depth": 3,
          "slug": "root",
          "text": "ROOT"
        },
        {
          "depth": 3,
          "slug": "telemetry_ingress_uniconn",
          "text": "TELEMETRY_INGRESS_UNICONN"
        },
        {
          "depth": 3,
          "slug": "telemetry_ingress_logging",
          "text": "TELEMETRY_INGRESS_LOGGING"
        },
        {
          "depth": 3,
          "slug": "telemetry_ingress_url",
          "text": "TELEMETRY_INGRESS_URL"
        },
        {
          "depth": 3,
          "slug": "telemetry_ingress_server_pub_key",
          "text": "TELEMETRY_INGRESS_SERVER_PUB_KEY"
        },
        {
          "depth": 3,
          "slug": "telemetry_ingress_buffer_size",
          "text": "TELEMETRY_INGRESS_BUFFER_SIZE"
        },
        {
          "depth": 3,
          "slug": "telemetry_ingress_max_batch_size",
          "text": "TELEMETRY_INGRESS_MAX_BATCH_SIZE"
        },
        {
          "depth": 3,
          "slug": "telemetry_ingress_send_interval",
          "text": "TELEMETRY_INGRESS_SEND_INTERVAL"
        },
        {
          "depth": 3,
          "slug": "telemetry_ingress_send_timeout",
          "text": "TELEMETRY_INGRESS_SEND_TIMEOUT"
        },
        {
          "depth": 3,
          "slug": "telemetry_ingress_use_batch_send",
          "text": "TELEMETRY_INGRESS_USE_BATCH_SEND"
        },
        {
          "depth": 2,
          "slug": "chains",
          "text": "Chains"
        },
        {
          "depth": 3,
          "slug": "solana_enabled",
          "text": "SOLANA_ENABLED"
        },
        {
          "depth": 3,
          "slug": "evm_enabled",
          "text": "EVM_ENABLED"
        },
        {
          "depth": 2,
          "slug": "database-settings",
          "text": "Database Settings"
        },
        {
          "depth": 3,
          "slug": "migrate_database",
          "text": "MIGRATE_DATABASE"
        },
        {
          "depth": 3,
          "slug": "orm_max_idle_conns",
          "text": "ORM_MAX_IDLE_CONNS"
        },
        {
          "depth": 3,
          "slug": "orm_max_open_conns",
          "text": "ORM_MAX_OPEN_CONNS"
        },
        {
          "depth": 2,
          "slug": "database-global-lock",
          "text": "Database Global Lock"
        },
        {
          "depth": 3,
          "slug": "database_locking_mode",
          "text": "DATABASE_LOCKING_MODE"
        },
        {
          "depth": 4,
          "slug": "technical-details",
          "text": "Technical details"
        },
        {
          "depth": 3,
          "slug": "advisory_lock_check_interval",
          "text": "ADVISORY_LOCK_CHECK_INTERVAL"
        },
        {
          "depth": 3,
          "slug": "advisory_lock_id",
          "text": "ADVISORY_LOCK_ID"
        },
        {
          "depth": 3,
          "slug": "lease_lock_duration",
          "text": "LEASE_LOCK_DURATION"
        },
        {
          "depth": 3,
          "slug": "lease_lock_refresh_interval",
          "text": "LEASE_LOCK_REFRESH_INTERVAL"
        },
        {
          "depth": 2,
          "slug": "database-automatic-backups",
          "text": "Database Automatic Backups"
        },
        {
          "depth": 3,
          "slug": "database_backup_frequency",
          "text": "DATABASE_BACKUP_FREQUENCY"
        },
        {
          "depth": 3,
          "slug": "database_backup_mode",
          "text": "DATABASE_BACKUP_MODE"
        },
        {
          "depth": 3,
          "slug": "database_backup_url",
          "text": "DATABASE_BACKUP_URL"
        },
        {
          "depth": 3,
          "slug": "database_backup_dir",
          "text": "DATABASE_BACKUP_DIR"
        },
        {
          "depth": 2,
          "slug": "logging",
          "text": "Logging"
        },
        {
          "depth": 3,
          "slug": "json_console",
          "text": "JSON_CONSOLE"
        },
        {
          "depth": 3,
          "slug": "log_file_dir",
          "text": "LOG_FILE_DIR"
        },
        {
          "depth": 3,
          "slug": "log_level",
          "text": "LOG_LEVEL"
        },
        {
          "depth": 3,
          "slug": "log_sql",
          "text": "LOG_SQL"
        },
        {
          "depth": 3,
          "slug": "log_file_max_size",
          "text": "LOG_FILE_MAX_SIZE"
        },
        {
          "depth": 3,
          "slug": "log_file_max_age",
          "text": "LOG_FILE_MAX_AGE"
        },
        {
          "depth": 3,
          "slug": "log_file_max_backups",
          "text": "LOG_FILE_MAX_BACKUPS"
        },
        {
          "depth": 3,
          "slug": "log_unix_ts",
          "text": "LOG_UNIX_TS"
        },
        {
          "depth": 2,
          "slug": "nurse-service-auto-pprof",
          "text": "Nurse service (auto-pprof)"
        },
        {
          "depth": 3,
          "slug": "auto_pprof_enabled",
          "text": "AUTO_PPROF_ENABLED"
        },
        {
          "depth": 3,
          "slug": "auto_pprof_profile_root",
          "text": "AUTO_PPROF_PROFILE_ROOT"
        },
        {
          "depth": 3,
          "slug": "auto_pprof_poll_interval",
          "text": "AUTO_PPROF_POLL_INTERVAL"
        },
        {
          "depth": 3,
          "slug": "auto_pprof_gather_duration",
          "text": "AUTO_PPROF_GATHER_DURATION"
        },
        {
          "depth": 3,
          "slug": "auto_pprof_gather_trace_duration",
          "text": "AUTO_PPROF_GATHER_TRACE_DURATION"
        },
        {
          "depth": 3,
          "slug": "auto_pprof_max_profile_size",
          "text": "AUTO_PPROF_MAX_PROFILE_SIZE"
        },
        {
          "depth": 3,
          "slug": "auto_pprof_cpu_profile_rate",
          "text": "AUTO_PPROF_CPU_PROFILE_RATE"
        },
        {
          "depth": 3,
          "slug": "auto_pprof_mem_profile_rate",
          "text": "AUTO_PPROF_MEM_PROFILE_RATE"
        },
        {
          "depth": 3,
          "slug": "auto_pprof_block_profile_rate",
          "text": "AUTO_PPROF_BLOCK_PROFILE_RATE"
        },
        {
          "depth": 3,
          "slug": "auto_pprof_mutex_profile_fraction",
          "text": "AUTO_PPROF_MUTEX_PROFILE_FRACTION"
        },
        {
          "depth": 3,
          "slug": "auto_pprof_mem_threshold",
          "text": "AUTO_PPROF_MEM_THRESHOLD"
        },
        {
          "depth": 3,
          "slug": "auto_pprof_goroutine_threshold",
          "text": "AUTO_PPROF_GOROUTINE_THRESHOLD"
        },
        {
          "depth": 2,
          "slug": "chainlink-web-server",
          "text": "Chainlink Web Server"
        },
        {
          "depth": 3,
          "slug": "allow_origins",
          "text": "ALLOW_ORIGINS"
        },
        {
          "depth": 3,
          "slug": "authenticated_rate_limit",
          "text": "AUTHENTICATED_RATE_LIMIT"
        },
        {
          "depth": 3,
          "slug": "authenticated_rate_limit_period",
          "text": "AUTHENTICATED_RATE_LIMIT_PERIOD"
        },
        {
          "depth": 3,
          "slug": "bridge_response_url",
          "text": "BRIDGE_RESPONSE_URL"
        },
        {
          "depth": 3,
          "slug": "http_server_write_timeout",
          "text": "HTTP_SERVER_WRITE_TIMEOUT"
        },
        {
          "depth": 3,
          "slug": "chainlink_port",
          "text": "CHAINLINK_PORT"
        },
        {
          "depth": 3,
          "slug": "secure_cookies",
          "text": "SECURE_COOKIES"
        },
        {
          "depth": 3,
          "slug": "session_timeout",
          "text": "SESSION_TIMEOUT"
        },
        {
          "depth": 3,
          "slug": "unauthenticated_rate_limit",
          "text": "UNAUTHENTICATED_RATE_LIMIT"
        },
        {
          "depth": 3,
          "slug": "unauthenticated_rate_limit_period",
          "text": "UNAUTHENTICATED_RATE_LIMIT_PERIOD"
        },
        {
          "depth": 2,
          "slug": "web-server-mfa",
          "text": "Web Server MFA"
        },
        {
          "depth": 3,
          "slug": "mfa_rpid",
          "text": "MFA_RPID"
        },
        {
          "depth": 3,
          "slug": "mfa_rporigin",
          "text": "MFA_RPORIGIN"
        },
        {
          "depth": 2,
          "slug": "web-server-tls",
          "text": "Web Server TLS"
        },
        {
          "depth": 3,
          "slug": "chainlink_tls_host",
          "text": "CHAINLINK_TLS_HOST"
        },
        {
          "depth": 3,
          "slug": "chainlink_tls_port",
          "text": "CHAINLINK_TLS_PORT"
        },
        {
          "depth": 3,
          "slug": "chainlink_tls_redirect",
          "text": "CHAINLINK_TLS_REDIRECT"
        },
        {
          "depth": 3,
          "slug": "tls_cert_path",
          "text": "TLS_CERT_PATH"
        },
        {
          "depth": 3,
          "slug": "tls_key_path",
          "text": "TLS_KEY_PATH"
        },
        {
          "depth": 2,
          "slug": "evmethereum-legacy-environment-variables",
          "text": "EVM/Ethereum Legacy Environment Variables"
        },
        {
          "depth": 3,
          "slug": "eth_url",
          "text": "ETH_URL"
        },
        {
          "depth": 3,
          "slug": "eth_http_url",
          "text": "ETH_HTTP_URL"
        },
        {
          "depth": 3,
          "slug": "evm_nodes",
          "text": "EVM_NODES"
        },
        {
          "depth": 3,
          "slug": "eth_secondary_urls",
          "text": "ETH_SECONDARY_URLS"
        },
        {
          "depth": 2,
          "slug": "evmethereum-global-settings",
          "text": "EVM/Ethereum Global Settings"
        },
        {
          "depth": 3,
          "slug": "eth_chain_id",
          "text": "ETH_CHAIN_ID"
        },
        {
          "depth": 3,
          "slug": "evm_rpc_enabled",
          "text": "EVM_RPC_ENABLED"
        },
        {
          "depth": 2,
          "slug": "evmethereum-chain-specific-overrides",
          "text": "EVM/Ethereum Chain-specific Overrides"
        },
        {
          "depth": 3,
          "slug": "balance_monitor_enabled",
          "text": "BALANCE_MONITOR_ENABLED"
        },
        {
          "depth": 3,
          "slug": "block_backfill_depth",
          "text": "BLOCK_BACKFILL_DEPTH"
        },
        {
          "depth": 3,
          "slug": "block_backfill_skip",
          "text": "BLOCK_BACKFILL_SKIP"
        },
        {
          "depth": 3,
          "slug": "eth_tx_reaper_interval",
          "text": "ETH_TX_REAPER_INTERVAL"
        },
        {
          "depth": 3,
          "slug": "eth_tx_reaper_threshold",
          "text": "ETH_TX_REAPER_THRESHOLD"
        },
        {
          "depth": 3,
          "slug": "eth_tx_resend_after_threshold",
          "text": "ETH_TX_RESEND_AFTER_THRESHOLD"
        },
        {
          "depth": 3,
          "slug": "eth_finality_depth",
          "text": "ETH_FINALITY_DEPTH"
        },
        {
          "depth": 3,
          "slug": "eth_head_tracker_history_depth",
          "text": "ETH_HEAD_TRACKER_HISTORY_DEPTH"
        },
        {
          "depth": 3,
          "slug": "eth_head_tracker_max_buffer_size",
          "text": "ETH_HEAD_TRACKER_MAX_BUFFER_SIZE"
        },
        {
          "depth": 3,
          "slug": "eth_head_tracker_sampling_interval",
          "text": "ETH_HEAD_TRACKER_SAMPLING_INTERVAL"
        },
        {
          "depth": 3,
          "slug": "eth_log_backfill_batch_size",
          "text": "ETH_LOG_BACKFILL_BATCH_SIZE"
        },
        {
          "depth": 3,
          "slug": "eth_log_poll_interval",
          "text": "ETH_LOG_POLL_INTERVAL"
        },
        {
          "depth": 3,
          "slug": "eth_rpc_default_batch_size",
          "text": "ETH_RPC_DEFAULT_BATCH_SIZE"
        },
        {
          "depth": 3,
          "slug": "link_contract_address",
          "text": "LINK_CONTRACT_ADDRESS"
        },
        {
          "depth": 3,
          "slug": "min_incoming_confirmations",
          "text": "MIN_INCOMING_CONFIRMATIONS"
        },
        {
          "depth": 3,
          "slug": "min_outgoing_confirmations",
          "text": "MIN_OUTGOING_CONFIRMATIONS"
        },
        {
          "depth": 3,
          "slug": "minimum_contract_payment_link_juels",
          "text": "MINIMUM_CONTRACT_PAYMENT_LINK_JUELS"
        },
        {
          "depth": 3,
          "slug": "node_no_new_heads_threshold",
          "text": "NODE_NO_NEW_HEADS_THRESHOLD"
        },
        {
          "depth": 3,
          "slug": "node_poll_failure_threshold",
          "text": "NODE_POLL_FAILURE_THRESHOLD"
        },
        {
          "depth": 3,
          "slug": "node_poll_interval",
          "text": "NODE_POLL_INTERVAL"
        },
        {
          "depth": 3,
          "slug": "node_selection_mode",
          "text": "NODE_SELECTION_MODE"
        },
        {
          "depth": 2,
          "slug": "evm-gas-controls",
          "text": "EVM Gas Controls"
        },
        {
          "depth": 3,
          "slug": "configuring-your-eth-node",
          "text": "Configuring your ETH node"
        },
        {
          "depth": 4,
          "slug": "go-ethereum",
          "text": "go-ethereum"
        },
        {
          "depth": 3,
          "slug": "evm_eip1559_dynamic_fees",
          "text": "EVM_EIP1559_DYNAMIC_FEES"
        },
        {
          "depth": 4,
          "slug": "technical-details-1",
          "text": "Technical details"
        },
        {
          "depth": 3,
          "slug": "eth_gas_bump_percent",
          "text": "ETH_GAS_BUMP_PERCENT"
        },
        {
          "depth": 3,
          "slug": "eth_gas_bump_threshold",
          "text": "ETH_GAS_BUMP_THRESHOLD"
        },
        {
          "depth": 3,
          "slug": "eth_gas_bump_tx_depth",
          "text": "ETH_GAS_BUMP_TX_DEPTH"
        },
        {
          "depth": 3,
          "slug": "eth_gas_bump_wei",
          "text": "ETH_GAS_BUMP_WEI"
        },
        {
          "depth": 3,
          "slug": "evm_gas_fee_cap_default",
          "text": "EVM_GAS_FEE_CAP_DEFAULT"
        },
        {
          "depth": 3,
          "slug": "eth_gas_limit_default",
          "text": "ETH_GAS_LIMIT_DEFAULT"
        },
        {
          "depth": 3,
          "slug": "eth_gas_limit_multiplier",
          "text": "ETH_GAS_LIMIT_MULTIPLIER"
        },
        {
          "depth": 3,
          "slug": "eth_gas_limit_transfer",
          "text": "ETH_GAS_LIMIT_TRANSFER"
        },
        {
          "depth": 3,
          "slug": "eth_gas_price_default",
          "text": "ETH_GAS_PRICE_DEFAULT"
        },
        {
          "depth": 3,
          "slug": "evm_gas_tip_cap_default",
          "text": "EVM_GAS_TIP_CAP_DEFAULT"
        },
        {
          "depth": 3,
          "slug": "evm_gas_tip_cap_minimum",
          "text": "EVM_GAS_TIP_CAP_MINIMUM"
        },
        {
          "depth": 3,
          "slug": "eth_max_gas_price_wei",
          "text": "ETH_MAX_GAS_PRICE_WEI"
        },
        {
          "depth": 3,
          "slug": "eth_max_in_flight_transactions",
          "text": "ETH_MAX_IN_FLIGHT_TRANSACTIONS"
        },
        {
          "depth": 3,
          "slug": "eth_max_queued_transactions",
          "text": "ETH_MAX_QUEUED_TRANSACTIONS"
        },
        {
          "depth": 3,
          "slug": "eth_min_gas_price_wei",
          "text": "ETH_MIN_GAS_PRICE_WEI"
        },
        {
          "depth": 3,
          "slug": "eth_gas_limit_ocr_job_type",
          "text": "ETH_GAS_LIMIT_OCR_JOB_TYPE"
        },
        {
          "depth": 3,
          "slug": "eth_gas_limit_dr_job_type",
          "text": "ETH_GAS_LIMIT_DR_JOB_TYPE"
        },
        {
          "depth": 3,
          "slug": "eth_gas_limit_vrf_job_type",
          "text": "ETH_GAS_LIMIT_VRF_JOB_TYPE"
        },
        {
          "depth": 3,
          "slug": "eth_gas_limit_fm_job_type",
          "text": "ETH_GAS_LIMIT_FM_JOB_TYPE"
        },
        {
          "depth": 3,
          "slug": "eth_gas_limit_keeper_job_type",
          "text": "ETH_GAS_LIMIT_KEEPER_JOB_TYPE"
        },
        {
          "depth": 3,
          "slug": "eth_nonce_auto_sync",
          "text": "ETH_NONCE_AUTO_SYNC"
        },
        {
          "depth": 3,
          "slug": "eth_use_forwarders",
          "text": "ETH_USE_FORWARDERS"
        },
        {
          "depth": 2,
          "slug": "evmethereum-gas-price-estimation",
          "text": "EVM/Ethereum Gas Price Estimation"
        },
        {
          "depth": 3,
          "slug": "gas_estimator_mode",
          "text": "GAS_ESTIMATOR_MODE"
        },
        {
          "depth": 3,
          "slug": "block_history_estimator_batch_size",
          "text": "BLOCK_HISTORY_ESTIMATOR_BATCH_SIZE"
        },
        {
          "depth": 3,
          "slug": "block_history_estimator_block_history_size",
          "text": "BLOCK_HISTORY_ESTIMATOR_BLOCK_HISTORY_SIZE"
        },
        {
          "depth": 3,
          "slug": "block_history_estimator_block_delay",
          "text": "BLOCK_HISTORY_ESTIMATOR_BLOCK_DELAY"
        },
        {
          "depth": 3,
          "slug": "block_history_estimator_eip1559_fee_cap_buffer_blocks",
          "text": "BLOCK_HISTORY_ESTIMATOR_EIP1559_FEE_CAP_BUFFER_BLOCKS"
        },
        {
          "depth": 3,
          "slug": "block_history_estimator_transaction_percentile",
          "text": "BLOCK_HISTORY_ESTIMATOR_TRANSACTION_PERCENTILE"
        },
        {
          "depth": 2,
          "slug": "evmethereum-transaction-simulation",
          "text": "EVM/Ethereum Transaction Simulation"
        },
        {
          "depth": 4,
          "slug": "fm_simulate_transactions",
          "text": "FM_SIMULATE_TRANSACTIONS"
        },
        {
          "depth": 4,
          "slug": "ocr_simulate_transactions",
          "text": "OCR_SIMULATE_TRANSACTIONS"
        },
        {
          "depth": 2,
          "slug": "job-pipeline-and-tasks",
          "text": "Job Pipeline and tasks"
        },
        {
          "depth": 3,
          "slug": "default_http_limit",
          "text": "DEFAULT_HTTP_LIMIT"
        },
        {
          "depth": 3,
          "slug": "default_http_timeout",
          "text": "DEFAULT_HTTP_TIMEOUT"
        },
        {
          "depth": 3,
          "slug": "feature_external_initiators",
          "text": "FEATURE_EXTERNAL_INITIATORS"
        },
        {
          "depth": 3,
          "slug": "job_pipeline_max_run_duration",
          "text": "JOB_PIPELINE_MAX_RUN_DURATION"
        },
        {
          "depth": 3,
          "slug": "job_pipeline_reaper_interval",
          "text": "JOB_PIPELINE_REAPER_INTERVAL"
        },
        {
          "depth": 3,
          "slug": "job_pipeline_reaper_threshold",
          "text": "JOB_PIPELINE_REAPER_THRESHOLD"
        },
        {
          "depth": 3,
          "slug": "job_pipeline_result_write_queue_depth",
          "text": "JOB_PIPELINE_RESULT_WRITE_QUEUE_DEPTH"
        },
        {
          "depth": 2,
          "slug": "ocr",
          "text": "OCR"
        },
        {
          "depth": 3,
          "slug": "feature_offchain_reporting",
          "text": "FEATURE_OFFCHAIN_REPORTING"
        },
        {
          "depth": 3,
          "slug": "ocr_key_bundle_id",
          "text": "OCR_KEY_BUNDLE_ID"
        },
        {
          "depth": 3,
          "slug": "ocr_monitoring_endpoint",
          "text": "OCR_MONITORING_ENDPOINT"
        },
        {
          "depth": 3,
          "slug": "ocr_transmitter_address",
          "text": "OCR_TRANSMITTER_ADDRESS"
        },
        {
          "depth": 3,
          "slug": "p2p_networking_stack",
          "text": "P2P_NETWORKING_STACK"
        },
        {
          "depth": 4,
          "slug": "p2p_peer_id",
          "text": "P2P_PEER_ID"
        },
        {
          "depth": 3,
          "slug": "networking-stack-v1",
          "text": "Networking Stack V1"
        },
        {
          "depth": 4,
          "slug": "p2p_announce_ip",
          "text": "P2P_ANNOUNCE_IP"
        },
        {
          "depth": 4,
          "slug": "p2p_announce_port",
          "text": "P2P_ANNOUNCE_PORT"
        },
        {
          "depth": 4,
          "slug": "p2p_bootstrap_peers",
          "text": "P2P_BOOTSTRAP_PEERS"
        },
        {
          "depth": 4,
          "slug": "p2p_listen_ip",
          "text": "P2P_LISTEN_IP"
        },
        {
          "depth": 4,
          "slug": "p2p_listen_port",
          "text": "P2P_LISTEN_PORT"
        },
        {
          "depth": 4,
          "slug": "p2p_peer_id-1",
          "text": "P2P_PEER_ID"
        },
        {
          "depth": 3,
          "slug": "networking-stack-v2",
          "text": "Networking Stack V2"
        },
        {
          "depth": 4,
          "slug": "p2pv2_announce_addresses",
          "text": "P2PV2_ANNOUNCE_ADDRESSES"
        },
        {
          "depth": 4,
          "slug": "p2pv2_bootstrappers",
          "text": "P2PV2_BOOTSTRAPPERS"
        },
        {
          "depth": 4,
          "slug": "p2pv2_listen_addresses",
          "text": "P2PV2_LISTEN_ADDRESSES"
        },
        {
          "depth": 2,
          "slug": "keeper",
          "text": "Keeper"
        },
        {
          "depth": 3,
          "slug": "keeper_check_upkeep_gas_price_feature_enabled",
          "text": "KEEPER_CHECK_UPKEEP_GAS_PRICE_FEATURE_ENABLED"
        },
        {
          "depth": 3,
          "slug": "keeper_gas_price_buffer_percent",
          "text": "KEEPER_GAS_PRICE_BUFFER_PERCENT"
        },
        {
          "depth": 3,
          "slug": "keeper_gas_tip_cap_buffer_percent",
          "text": "KEEPER_GAS_TIP_CAP_BUFFER_PERCENT"
        },
        {
          "depth": 3,
          "slug": "keeper_base_fee_buffer_percent",
          "text": "KEEPER_BASE_FEE_BUFFER_PERCENT"
        },
        {
          "depth": 3,
          "slug": "keeper_maximum_grace_period",
          "text": "KEEPER_MAXIMUM_GRACE_PERIOD"
        },
        {
          "depth": 3,
          "slug": "keeper_registry_check_gas_overhead",
          "text": "KEEPER_REGISTRY_CHECK_GAS_OVERHEAD"
        },
        {
          "depth": 3,
          "slug": "keeper_registry_perform_gas_overhead",
          "text": "KEEPER_REGISTRY_PERFORM_GAS_OVERHEAD"
        },
        {
          "depth": 3,
          "slug": "keeper_registry_sync_interval",
          "text": "KEEPER_REGISTRY_SYNC_INTERVAL"
        },
        {
          "depth": 3,
          "slug": "keeper_registry_sync_upkeep_queue_size",
          "text": "KEEPER_REGISTRY_SYNC_UPKEEP_QUEUE_SIZE"
        },
        {
          "depth": 3,
          "slug": "keeper_turn_look_back",
          "text": "KEEPER_TURN_LOOK_BACK"
        },
        {
          "depth": 3,
          "slug": "keeper_turn_flag_enabled",
          "text": "KEEPER_TURN_FLAG_ENABLED"
        },
        {
          "depth": 2,
          "slug": "cli-client",
          "text": "CLI Client"
        },
        {
          "depth": 3,
          "slug": "admin_credentials_file",
          "text": "ADMIN_CREDENTIALS_FILE"
        },
        {
          "depth": 3,
          "slug": "client_node_url",
          "text": "CLIENT_NODE_URL"
        },
        {
          "depth": 3,
          "slug": "insecure_skip_verify",
          "text": "INSECURE_SKIP_VERIFY"
        },
        {
          "depth": 2,
          "slug": "notes-on-setting-environment-variables",
          "text": "Notes on setting environment variables"
        }
      ],
      "url": "/chainlink-nodes/configuration-variables",
      "section": "nodeOperator",
      "content": "\nRecent versions of the Chainlink node use sensible defaults for most configuration variables. You do not need to change much to get a standard deployment working.\n\nNot all environment variables are documented here. Any undocumented environment variable is subject to change in future releases. In almost all cases, you should leave any environment variable not listed here to its default value unless you really understand what you are doing.\n\nTo reiterate: _If you have an environment variable set that is not listed here, and you don't know exactly why you have it set, you should remove it!_\n\nThe environment variables listed here are explicitly supported and current as of Chainlink node v1.3.0.\n\n## Changes to node configuration starting in v1.1.0 nodes\n\nAs of Chainlink node v1.1.0 and up, the way nodes manage configuration is changing. Previously, environment variables exclusively handled all node configuration. Although this configuration method worked well in the past, it has its limitations. Notably, it doesn't mesh well with chain-specific configuration profiles.\n\nFor this reason, Chainlink nodes are moving towards a model where you set variables using the API, [CLI](/chainlink-nodes/configuration-variables/#cli-client), or GUI, and the configuration is saved in the database. We encourage you to become familiar with this model because it is likely that nodes will continue to move away from environment variable configuration in the future.\n\nAs of v1.1.0, Chainlink nodes still support environment variables to configure node settings and chain-specific settings. If the environment variable is set, it overrides any chain-specific, job-specific, or database configuration setting. The log displays a warning to indicate when an override happens, so you know when variables lower in the hierarchy are being ignored.\n\nYour node applies configuration settings using following hierarchy:\n\n1. Environment variables\n1. Chain-specific variables\n1. Job-specific variables\n\n**Topics**\n\n- [Changes to node configuration starting in v1.1.0 nodes](#changes-to-node-configuration-starting-in-v110-nodes)\n- [Essential environment variables](#essential-environment-variables)\n  - [DATABASE_URL](#database_url)\n- [General Node Configuration](#general-node-configuration)\n  - [CHAIN_TYPE](#chain_type)\n  - [CHAINLINK_DEV](#chainlink_dev)\n  - [EXPLORER_ACCESS_KEY](#explorer_access_key)\n  - [EXPLORER_SECRET](#explorer_secret)\n  - [EXPLORER_URL](#explorer_url)\n  - [ROOT](#root)\n  - [TELEMETRY_INGRESS_UNICONN](#telemetry_ingress_uniconn)\n  - [TELEMETRY_INGRESS_LOGGING](#telemetry_ingress_logging)\n  - [TELEMETRY_INGRESS_URL](#telemetry_ingress_url)\n  - [TELEMETRY_INGRESS_SERVER_PUB_KEY](#telemetry_ingress_server_pub_key)\n  - [TELEMETRY_INGRESS_BUFFER_SIZE](#telemetry_ingress_buffer_size)\n  - [TELEMETRY_INGRESS_MAX_BATCH_SIZE](#telemetry_ingress_max_batch_size)\n  - [TELEMETRY_INGRESS_SEND_INTERVAL](#telemetry_ingress_send_interval)\n  - [TELEMETRY_INGRESS_SEND_TIMEOUT](#telemetry_ingress_send_timeout)\n  - [TELEMETRY_INGRESS_USE_BATCH_SEND](#telemetry_ingress_use_batch_send)\n- [Chains](#chains)\n  - [SOLANA_ENABLED](#solana_enabled)\n  - [EVM_ENABLED](#evm_enabled)\n- [Database Settings](#database-settings)\n  - [MIGRATE_DATABASE](#migrate_database)\n  - [ORM_MAX_IDLE_CONNS](#orm_max_idle_conns)\n  - [ORM_MAX_OPEN_CONNS](#orm_max_open_conns)\n- [Database Global Lock](#database-global-lock)\n  - [DATABASE_LOCKING_MODE](#database_locking_mode)\n    - [Technical details](#technical-details)\n  - [ADVISORY_LOCK_CHECK_INTERVAL](#advisory_lock_check_interval)\n  - [ADVISORY_LOCK_ID](#advisory_lock_id)\n  - [LEASE_LOCK_DURATION](#lease_lock_duration)\n  - [LEASE_LOCK_REFRESH_INTERVAL](#lease_lock_refresh_interval)\n- [Database Automatic Backups](#database-automatic-backups)\n  - [DATABASE_BACKUP_FREQUENCY](#database_backup_frequency)\n  - [DATABASE_BACKUP_MODE](#database_backup_mode)\n  - [DATABASE_BACKUP_URL](#database_backup_url)\n  - [DATABASE_BACKUP_DIR](#database_backup_dir)\n- [Logging](#logging)\n  - [JSON_CONSOLE](#json_console)\n  - [LOG_FILE_DIR](#log_file_dir)\n  - [LOG_LEVEL](#log_level)\n  - [LOG_SQL](#log_sql)\n  - [LOG_FILE_MAX_SIZE](#log_file_max_size)\n  - [LOG_FILE_MAX_AGE](#log_file_max_age)\n  - [LOG_FILE_MAX_BACKUPS](#log_file_max_backups)\n  - [LOG_UNIX_TS](#log_unix_ts)\n- [Nurse service (auto-pprof)](#nurse-service-auto-pprof)\n  - [AUTO_PPROF_ENABLED](#auto_pprof_enabled)\n  - [AUTO_PPROF_PROFILE_ROOT](#auto_pprof_profile_root)\n  - [AUTO_PPROF_POLL_INTERVAL](#auto_pprof_poll_interval)\n  - [AUTO_PPROF_GATHER_DURATION](#auto_pprof_gather_duration)\n  - [AUTO_PPROF_GATHER_TRACE_DURATION](#auto_pprof_gather_trace_duration)\n  - [AUTO_PPROF_MAX_PROFILE_SIZE](#auto_pprof_max_profile_size)\n  - [AUTO_PPROF_CPU_PROFILE_RATE](#auto_pprof_cpu_profile_rate)\n  - [AUTO_PPROF_MEM_PROFILE_RATE](#auto_pprof_mem_profile_rate)\n  - [AUTO_PPROF_BLOCK_PROFILE_RATE](#auto_pprof_block_profile_rate)\n  - [AUTO_PPROF_MUTEX_PROFILE_FRACTION](#auto_pprof_mutex_profile_fraction)\n  - [AUTO_PPROF_MEM_THRESHOLD](#auto_pprof_mem_threshold)\n  - [AUTO_PPROF_GOROUTINE_THRESHOLD](#auto_pprof_goroutine_threshold)\n- [Chainlink Web Server](#chainlink-web-server)\n  - [ALLOW_ORIGINS](#allow_origins)\n  - [AUTHENTICATED_RATE_LIMIT](#authenticated_rate_limit)\n  - [AUTHENTICATED_RATE_LIMIT_PERIOD](#authenticated_rate_limit_period)\n  - [BRIDGE_RESPONSE_URL](#bridge_response_url)\n  - [HTTP_SERVER_WRITE_TIMEOUT](#http_server_write_timeout)\n  - [CHAINLINK_PORT](#chainlink_port)\n  - [SECURE_COOKIES](#secure_cookies)\n  - [SESSION_TIMEOUT](#session_timeout)\n  - [UNAUTHENTICATED_RATE_LIMIT](#unauthenticated_rate_limit)\n  - [UNAUTHENTICATED_RATE_LIMIT_PERIOD](#unauthenticated_rate_limit_period)\n- [Web Server MFA](#web-server-mfa)\n  - [MFA_RPID](#mfa_rpid)\n  - [MFA_RPORIGIN](#mfa_rporigin)\n- [Web Server TLS](#web-server-tls)\n  - [CHAINLINK_TLS_HOST](#chainlink_tls_host)\n  - [CHAINLINK_TLS_PORT](#chainlink_tls_port)\n  - [CHAINLINK_TLS_REDIRECT](#chainlink_tls_redirect)\n  - [TLS_CERT_PATH](#tls_cert_path)\n  - [TLS_KEY_PATH](#tls_key_path)\n- [EVM/Ethereum Legacy Environment Variables](#evmethereum-legacy-environment-variables)\n  - [ETH_URL](#eth_url)\n  - [ETH_HTTP_URL](#eth_http_url)\n  - [EVM_NODES](#evm_nodes)\n  - [ETH_SECONDARY_URLS](#eth_secondary_urls)\n- [EVM/Ethereum Global Settings](#evmethereum-global-settings)\n  - [ETH_CHAIN_ID](#eth_chain_id)\n  - [EVM_RPC_ENABLED](#evm_rpc_enabled)\n- [EVM/Ethereum Chain-specific Overrides](#evmethereum-chain-specific-overrides)\n  - [BALANCE_MONITOR_ENABLED](#balance_monitor_enabled)\n  - [BLOCK_BACKFILL_DEPTH](#block_backfill_depth)\n  - [BLOCK_BACKFILL_SKIP](#block_backfill_skip)\n  - [ETH_TX_REAPER_INTERVAL](#eth_tx_reaper_interval)\n  - [ETH_TX_REAPER_THRESHOLD](#eth_tx_reaper_threshold)\n  - [ETH_TX_RESEND_AFTER_THRESHOLD](#eth_tx_resend_after_threshold)\n  - [ETH_FINALITY_DEPTH](#eth_finality_depth)\n  - [ETH_HEAD_TRACKER_HISTORY_DEPTH](#eth_head_tracker_history_depth)\n  - [ETH_HEAD_TRACKER_MAX_BUFFER_SIZE](#eth_head_tracker_max_buffer_size)\n  - [ETH_HEAD_TRACKER_SAMPLING_INTERVAL](#eth_head_tracker_sampling_interval)\n  - [ETH_LOG_BACKFILL_BATCH_SIZE](#eth_log_backfill_batch_size)\n  - [ETH_LOG_POLL_INTERVAL](#eth_log_poll_interval)\n  - [ETH_RPC_DEFAULT_BATCH_SIZE](#eth_rpc_default_batch_size)\n  - [LINK_CONTRACT_ADDRESS](#link_contract_address)\n  - [MIN_INCOMING_CONFIRMATIONS](#min_incoming_confirmations)\n  - [MIN_OUTGOING_CONFIRMATIONS](#min_outgoing_confirmations)\n  - [MINIMUM_CONTRACT_PAYMENT_LINK_JUELS](#minimum_contract_payment_link_juels)\n  - [NODE_NO_NEW_HEADS_THRESHOLD](#node_no_new_heads_threshold)\n  - [NODE_POLL_FAILURE_THRESHOLD](#node_poll_failure_threshold)\n  - [NODE_POLL_INTERVAL](#node_poll_interval)\n  - [NODE_SELECTION_MODE](#node_selection_mode)\n- [EVM Gas Controls](#evm-gas-controls)\n  - [Configuring your ETH node](#configuring-your-eth-node)\n    - [go-ethereum](#go-ethereum)\n  - [EVM_EIP1559_DYNAMIC_FEES](#evm_eip1559_dynamic_fees)\n    - [Technical details](#technical-details-1)\n  - [ETH_GAS_BUMP_PERCENT](#eth_gas_bump_percent)\n  - [ETH_GAS_BUMP_THRESHOLD](#eth_gas_bump_threshold)\n  - [ETH_GAS_BUMP_TX_DEPTH](#eth_gas_bump_tx_depth)\n  - [ETH_GAS_BUMP_WEI](#eth_gas_bump_wei)\n  - [EVM_GAS_FEE_CAP_DEFAULT](#evm_gas_fee_cap_default)\n  - [ETH_GAS_LIMIT_DEFAULT](#eth_gas_limit_default)\n  - [ETH_GAS_LIMIT_MULTIPLIER](#eth_gas_limit_multiplier)\n  - [ETH_GAS_LIMIT_TRANSFER](#eth_gas_limit_transfer)\n  - [ETH_GAS_PRICE_DEFAULT](#eth_gas_price_default)\n  - [EVM_GAS_TIP_CAP_DEFAULT](#evm_gas_tip_cap_default)\n  - [EVM_GAS_TIP_CAP_MINIMUM](#evm_gas_tip_cap_minimum)\n  - [ETH_MAX_GAS_PRICE_WEI](#eth_max_gas_price_wei)\n  - [ETH_MAX_IN_FLIGHT_TRANSACTIONS](#eth_max_in_flight_transactions)\n  - [ETH_MAX_QUEUED_TRANSACTIONS](#eth_max_queued_transactions)\n  - [ETH_MIN_GAS_PRICE_WEI](#eth_min_gas_price_wei)\n  - [ETH_GAS_LIMIT_OCR_JOB_TYPE](#eth_gas_limit_ocr_job_type)\n  - [ETH_GAS_LIMIT_DR_JOB_TYPE](#eth_gas_limit_dr_job_type)\n  - [ETH_GAS_LIMIT_VRF_JOB_TYPE](#eth_gas_limit_vrf_job_type)\n  - [ETH_GAS_LIMIT_FM_JOB_TYPE](#eth_gas_limit_fm_job_type)\n  - [ETH_GAS_LIMIT_KEEPER_JOB_TYPE](#eth_gas_limit_keeper_job_type)\n  - [ETH_NONCE_AUTO_SYNC](#eth_nonce_auto_sync)\n  - [ETH_USE_FORWARDERS](#eth_use_forwarders)\n- [EVM/Ethereum Gas Price Estimation](#evmethereum-gas-price-estimation)\n  - [GAS_ESTIMATOR_MODE](#gas_estimator_mode)\n  - [BLOCK_HISTORY_ESTIMATOR_BATCH_SIZE](#block_history_estimator_batch_size)\n  - [BLOCK_HISTORY_ESTIMATOR_BLOCK_HISTORY_SIZE](#block_history_estimator_block_history_size)\n  - [BLOCK_HISTORY_ESTIMATOR_BLOCK_DELAY](#block_history_estimator_block_delay)\n  - [BLOCK_HISTORY_ESTIMATOR_EIP1559_FEE_CAP_BUFFER_BLOCKS](#block_history_estimator_eip1559_fee_cap_buffer_blocks)\n  - [BLOCK_HISTORY_ESTIMATOR_TRANSACTION_PERCENTILE](#block_history_estimator_transaction_percentile)\n- [EVM/Ethereum Transaction Simulation](#evmethereum-transaction-simulation)\n  - [FM_SIMULATE_TRANSACTIONS](#fm_simulate_transactions)\n  - [OCR_SIMULATE_TRANSACTIONS](#ocr_simulate_transactions)\n- [Job Pipeline and tasks](#job-pipeline-and-tasks)\n  - [DEFAULT_HTTP_LIMIT](#default_http_limit)\n  - [DEFAULT_HTTP_TIMEOUT](#default_http_timeout)\n  - [FEATURE_EXTERNAL_INITIATORS](#feature_external_initiators)\n  - [JOB_PIPELINE_MAX_RUN_DURATION](#job_pipeline_max_run_duration)\n  - [JOB_PIPELINE_REAPER_INTERVAL](#job_pipeline_reaper_interval)\n  - [JOB_PIPELINE_REAPER_THRESHOLD](#job_pipeline_reaper_threshold)\n  - [JOB_PIPELINE_RESULT_WRITE_QUEUE_DEPTH](#job_pipeline_result_write_queue_depth)\n- [OCR](#ocr)\n  - [FEATURE_OFFCHAIN_REPORTING](#feature_offchain_reporting)\n  - [OCR_KEY_BUNDLE_ID](#ocr_key_bundle_id)\n  - [OCR_MONITORING_ENDPOINT](#ocr_monitoring_endpoint)\n  - [OCR_TRANSMITTER_ADDRESS](#ocr_transmitter_address)\n  - [P2P_NETWORKING_STACK](#p2p_networking_stack)\n  - [P2P_PEER_ID](#p2p_peer_id)\n  - [Networking Stack V1](#networking-stack-v1)\n    - [P2P_ANNOUNCE_IP](#p2p_announce_ip)\n    - [P2P_ANNOUNCE_PORT](#p2p_announce_port)\n    - [P2P_BOOTSTRAP_PEERS](#p2p_bootstrap_peers)\n    - [P2P_LISTEN_IP](#p2p_listen_ip)\n    - [P2P_LISTEN_PORT](#p2p_listen_port)\n  - [Networking Stack V2](#networking-stack-v2)\n    - [P2PV2_ANNOUNCE_ADDRESSES](#p2pv2_announce_addresses)\n    - [P2PV2_BOOTSTRAPPERS](#p2pv2_bootstrappers)\n    - [P2PV2_LISTEN_ADDRESSES](#p2pv2_listen_addresses)\n\n- [Keeper](#keeper)\n  - [KEEPER_CHECK_UPKEEP_GAS_PRICE_FEATURE_ENABLED](#keeper_check_upkeep_gas_price_feature_enabled)\n  - [KEEPER_GAS_PRICE_BUFFER_PERCENT](#keeper_gas_price_buffer_percent)\n  - [KEEPER_GAS_TIP_CAP_BUFFER_PERCENT](#keeper_gas_tip_cap_buffer_percent)\n  - [KEEPER_BASE_FEE_BUFFER_PERCENT](#keeper_base_fee_buffer_percent)\n  - [KEEPER_MAXIMUM_GRACE_PERIOD](#keeper_maximum_grace_period)\n  - [KEEPER_REGISTRY_CHECK_GAS_OVERHEAD](#keeper_registry_check_gas_overhead)\n  - [KEEPER_REGISTRY_PERFORM_GAS_OVERHEAD](#keeper_registry_perform_gas_overhead)\n  - [KEEPER_REGISTRY_SYNC_INTERVAL](#keeper_registry_sync_interval)\n  - [KEEPER_REGISTRY_SYNC_UPKEEP_QUEUE_SIZE](#keeper_registry_sync_upkeep_queue_size)\n  - [KEEPER_TURN_LOOK_BACK](#keeper_turn_look_back)\n  - [KEEPER_TURN_FLAG_ENABLED](#keeper_turn_flag_enabled)\n- [CLI Client](#cli-client)\n  - [ADMIN_CREDENTIALS_FILE](#admin_credentials_file)\n  - [CLIENT_NODE_URL](#client_node_url)\n  - [INSECURE_SKIP_VERIFY](#insecure_skip_verify)\n- [Notes on setting environment variables](#notes-on-setting-environment-variables)\n\n## Essential environment variables\n\nThese are the only environment variables that are _required_ for a Chainlink node to run.\n\n### DATABASE_URL\n\n**Required**\n\n- Default: _none_\n\nThe PostgreSQL URI to connect to your database. Chainlink nodes require Postgres versions >= 11. See the [Running a Chainlink Node](/chainlink-nodes/running-a-chainlink-node/#set-the-remote-database_url-config) for an example.\n\n## General Node Configuration\n\n### CHAIN_TYPE\n\n- Default: _none_\n\nCHAIN_TYPE overrides all chains and forces them to act as a particular chain type. An up-to-date list of chain types is given in [`chaintype.go`](https://github.com/smartcontractkit/chainlink/blob/v1.3.0/core/chains/chaintype.go).\n\nThis variable enables some chain-specific hacks and optimizations. It is recommended not to use this environment variable and set the chain-type on a per-chain basis instead.\n\n### CHAINLINK_DEV\n\n- Default: `\"false\"`\n\nSetting `CHAINLINK_DEV` to `true` enables development mode. This setting is not recommended for production deployments. It can be useful for enabling experimental features and collecting debug information.\n\n### EXPLORER_ACCESS_KEY\n\n- Default: _none_\n\nThe access key for authenticating with the Explorer.\n\n### EXPLORER_SECRET\n\n- Default: _none_\n\nThe secret for authenticating with the Explorer.\n\n### EXPLORER_URL\n\n- Default: _none_\n\nThe Explorer websocket URL for the node to push stats to.\n\n### ROOT\n\n- Default: `\"~/.chainlink\"`\n\nThe Chainlink node's root directory. This is the default directory for logging, database backups, cookies, and other misc Chainlink node files. Chainlink nodes will always ensure this directory has `700` permissions because it might contain sensitive data.\n\n### TELEMETRY_INGRESS_UNICONN\n\n- Default: `\"true\"`\n\nToggles which ws connection style is used.\n\n### TELEMETRY_INGRESS_LOGGING\n\n- Default: `\"false\"`\n\nToggles verbose logging of the raw telemetry messages being sent.\n\n### TELEMETRY_INGRESS_URL\n\n- Default: _none_\n\nThe URL to connect to for sending telemetry.\n\n### TELEMETRY_INGRESS_SERVER_PUB_KEY\n\n- Default: _none_\n\nThe public key of the telemetry server.\n\n### TELEMETRY_INGRESS_BUFFER_SIZE\n\n- Default: `\"100\"`\n\nThe number of telemetry messages to buffer before dropping new ones.\n\n### TELEMETRY_INGRESS_MAX_BATCH_SIZE\n\n- Default: `\"50\"`\n\nThe maximum number of messages to batch into one telemetry request.\n\n### TELEMETRY_INGRESS_SEND_INTERVAL\n\n- Default: `\"500ms\"`\n\nThe interval on which batched telemetry is sent to the ingress server.\n\n### TELEMETRY_INGRESS_SEND_TIMEOUT\n\n- Default: `\"10s\"`\n\nThe max duration to wait for the request to complete when sending batch telemetry.\n\n### TELEMETRY_INGRESS_USE_BATCH_SEND\n\n- Default: `\"true\"`\n\nToggles sending telemetry to the ingress server using the batch client.\n\n## Chains\n\n### SOLANA_ENABLED\n\n:::caution\nNot intended for use on the Solana mainnet.\n:::\n\n- Default: `\"false\"`\n\nEnables Solana support.\n\n### EVM_ENABLED\n\n- Default: `\"true\"`\n\nEnables support for EVM-based chains. By default, this variable is set to `true` to provide legacy compatibility and ease the upgrade path from older versions of Chainlink which did not support disabling EVM.\n\n## Database Settings\n\n### MIGRATE_DATABASE\n\n- Default: `\"true\"`\n\nThis variable controls whether a Chainlink node will attempt to automatically migrate the database on boot. If you want more control over your database migration process, set this variable to `false` and manually migrate the database using the CLI `migrate` command instead.\n\n### ORM_MAX_IDLE_CONNS\n\n- Default: `\"10\"`\n\nThis setting configures the maximum number of idle database connections that the Chainlink node will keep open. Think of this as the baseline number of database connections per Chainlink node instance. Increasing this number can help to improve performance under database-heavy workloads.\n\nPostgres has connection limits, so you must use cation when increasing this value. If you are running several instances of a Chainlink node or another application on a single database server, you might run out of Postgres connection slots if you raise this value too high.\n\n### ORM_MAX_OPEN_CONNS\n\n- Default: `\"20\"`\n\nThis setting configures the maximum number of database connections that a Chainlink node will have open at any one time. Think of this as the maximum burst upper bound limit of database connections per Chainlink node instance. Increasing this number can help to improve performance under database-heavy workloads.\n\nPostgres has connection limits, so you must use cation when increasing this value. If you are running several instances of a Chainlink node or another application on a single database server, you might run out of Postgres connection slots if you raise this value too high.\n\n## Database Global Lock\n\nChainlink nodes use a database lock to ensure that only one Chainlink node instance can be run on the database at a time. If you run multiple instances of a Chainlink node that share a single database at the same time, the node will encounter strange errors and data integrity failures. Do not allow multiple nodes to write data to the database at the same time.\n\n### DATABASE_LOCKING_MODE\n\n- Default: `\"dual\"`\n\nThe `DATABASE_LOCKING_MODE` variable can be set to 'dual', 'advisorylock', 'lease', or 'none'. It controls which mode to use to enforce that only one Chainlink node can use the database. It is recommended to set this to `lease`.\n\n- `dual` - The default: Uses both advisory locks and lease locks for backward and forward compatibility\n- `advisorylock` - Advisory lock only\n- `lease` - Lease lock only\n- _none_ - No locking at all: This option useful for advanced deployment environments when you are sure that only one instance of a Chainlink node will ever be running.\n\n#### Technical details\n\nIdeally, you should use a container orchestration system like [Kubernetes](https://kubernetes.io/) to ensure that only one Chainlink node instance can ever use a specific Postgres database. However, some node operators do not have the technical capacity to do this. Common use cases run multiple Chainlink node instances in failover mode as recommended by our official documentation. The first instance takes a lock on the database and subsequent instances will wait trying to take this lock in case the first instance fails.\n\nBy default, Chainlink nodes use the `dual` setting to provide both advisory locks and lease locks for backward and forward compatibility. Using advisory locks alone presents the following problems:\n\n- If your nodes or applications hold locks open for several hours or days, Postgres is unable to complete internal cleanup tasks. The Postgres maintainers explicitly discourage holding locks open for long periods of time.\n- Advisory locks can silently disappear when you upgrade Postgres, so a new Chainlink node instance can take over even while the old node is still running.\n- Advisory locks do not work well with pooling tools such as [pgbouncer](https://www.pgbouncer.org/).\n- If the Chainlink node crashes, an advisory lock can hang around for up to several hours, which might require you to manually remove it so another instance of the Chainlink node will allow itself to boot.\n\nBecause of the complications with advisory locks, Chainlink nodes with v1.1.0 and later support a new `lease` locking mode. This mode might become the default in future. The `lease` locking mode works using the following process:\n\n- Node A creates one row in the database with the client ID and updates it once per second.\n- Node B spinlocks and checks periodically to see if the client ID is too old. If the client ID is not updated after a period of time, node B assumes that node A failed and takes over. Node B becomes the owner of the row and updates the client ID once per second.\n- If node A comes back, it attempts to take out a lease, realizes that the database has been leased to another process, and exits the entire application immediately.\n\n### ADVISORY_LOCK_CHECK_INTERVAL\n\n**ADVANCED**\n\nDo not change this setting unless you know what you are doing.\n\nThis setting applies only if `DATABASE_LOCKING_MODE` is set to enable advisory locking.\n\n- Default: `\"1s\"`\n\n`ADVISORY_LOCK_CHECK_INTERVAL` controls how often the Chainlink node checks to make sure it still holds the advisory lock when advisory locking is enabled. If a node no longer holds the lock, it will try to re-acquire it. If the node cannot re-acquire the lock, the application will exit.\n\n### ADVISORY_LOCK_ID\n\n**ADVANCED**\n\nDo not change this setting unless you know what you are doing.\n\nThis setting applies only if `DATABASE_LOCKING_MODE` is set to enable advisory locking.\n\n- Default: `\"1027321974924625846\"`\n\n`ADVISORY_LOCK_ID` is the application advisory lock ID. This must match all other Chainlink nodes that might access this database. It is unlikely you will ever need to change this from the default.\n\n### LEASE_LOCK_DURATION\n\n**ADVANCED**\n\nDo not change this setting unless you know what you are doing.\n\nThis setting applies only if `DATABASE_LOCKING_MODE` is set to enable lease locking.\n\n- Default: `\"30s\"`\n\nHow long the lease lock will last before expiring.\n\n### LEASE_LOCK_REFRESH_INTERVAL\n\n**ADVANCED**\n\nDo not change this setting unless you know what you are doing.\n\nThis setting applies only if `DATABASE_LOCKING_MODE` is set to enable lease locking.\n\n- Default: `\"1s\"`\n\nHow often to refresh the lease lock. Also controls how often a standby node will check to see if it can grab the lease.\n\n## Database Automatic Backups\n\nAs a best practice, take regular database backups in case of accidental data loss. This best practice is especially important when you upgrade your Chainlink node to a new version. Chainlink nodes support automated database backups to make this process easier.\n\nNOTE: Dumps can cause high load and massive database latencies, which will negatively impact the normal functioning of the Chainlink node. For this reason, it is recommended to set a DATABASE_BACKUP_URL and point it to a read replica if you enable automatic backups.\n\n### DATABASE_BACKUP_FREQUENCY\n\n- Default: `\"1h\"`\n\nIf this variable is set to a positive duration and `DATABASE_BACKUP_MODE` is not _none_, the node will dump the database at this regular interval.\n\nSet to `0` to disable periodic backups.\n\n### DATABASE_BACKUP_MODE\n\n- Default: `\"none\"`\n\nSet the mode for automatic database backups, which can be one of _none_, `lite`, or `full`. If enabled, the Chainlink node will always dump a backup on every boot before running migrations. Additionally, it will automatically take database backups that overwrite the backup file for the given version at regular intervals if `DATABASE_BACKUP_FREQUENCY` is set to a non-zero interval.\n\n_none_ - Disables backups.\n`lite` - Dumps small tables including configuration and keys that are essential for the node to function, which excludes historical data like job runs, transaction history, etc.\n`full` - Dumps the entire database.\n\nIt will write to a file like `$ROOT/backup/cl_backup_<VERSION>.dump`. There is one backup dump file per version of the Chainlink node. If you upgrade the node, it will keep the backup taken right before the upgrade migration so you can restore to an older version if necessary.\n\n### DATABASE_BACKUP_URL\n\nIf specified, the automatic database backup will pull from this URL rather than the main `DATABASE_URL`. It is recommended to set this value to a read replica if you have one to avoid excessive load on the main database.\n\n### DATABASE_BACKUP_DIR\n\nThis variable sets the directory to use for saving the backup file. Use this if you want to save the backup file in a directory other than the default ROOT directory.\n\n## Logging\n\n### JSON_CONSOLE\n\n- Default: `\"false\"`\n\nSet this to true to enable JSON logging. Otherwise, the log is saved in a human-friendly console format.\n\n### LOG_FILE_DIR\n\n- Default: `\"$ROOT\"`\n\nBy default, Chainlink nodes write log data to `$ROOT/log.jsonl`. The log directory can be changed by setting this var. For example, `LOG_FILE_DIR=/my/log/directory`.\n\n### LOG_LEVEL\n\n- Default: `\"info\"`\n\nThe `LOG_LEVEL` environment variable determines both what is printed on the screen and what is written to the log file.\n\nThe available options are:\n\n- `\"debug\"`: Useful for forensic debugging of issues.\n- `\"info\"`: High-level informational messages.\n- `\"warn\"`: A mild error occurred that might require non-urgent action. Check these warnings semi-regularly to see if any of them require attention. These warnings usually happen due to factors outside of the control of the node operator. Examples: Unexpected responses from a remote API or misleading networking errors.\n- `\"error\"`: An unexpected error occurred during the regular operation of a well-maintained node. Node operators might need to take action to remedy this error. Check these regularly to see if any of them require attention. Examples: Use of deprecated configuration options or incorrectly configured settings that cause a job to fail.\n- `\"crit\"`: A critical error occurred. The node might be unable to function. Node operators should take immediate action to fix these errors. Examples: The node could not boot because a network socket could not be opened or the database became inaccessible.\n- `\"panic\"`: An exceptional error occurred that could not be handled. If the node is unresponsive, node operators should try to restart their nodes and notify the Chainlink team of a potential bug.\n- `\"fatal\"`: The node encountered an unrecoverable problem and had to exit.\n\n### LOG_SQL\n\n- Default: `\"false\"`\n\nThis setting tells the Chainlink node to log SQL statements made using the default logger. SQL statements will be logged at `debug` level. Not all statements can be logged. The best way to get a true log of all SQL statements is to enable SQL statement logging on Postgres.\n\n### LOG_FILE_MAX_SIZE\n\n- Default: `\"5120mb\"`\n\nDetermines the log file's max size in megabytes before file rotation. Having this not set will disable logging to disk. If your disk doesn't have enough disk space, the logging will pause and the application will log errors until space is available again.\n\nValues must have suffixes with a unit like: `5120mb` (5,120 megabytes). If no unit suffix is provided, the value defaults to `b` (bytes). The list of valid unit suffixes are:\n\n- b (bytes)\n- kb (kilobytes)\n- mb (megabytes)\n- gb (gigabytes)\n- tb (terabytes)\n\n### LOG_FILE_MAX_AGE\n\n- Default: `\"0\"`\n\nDetermines the log file's max age in days before file rotation. Keeping this config with the default value will not remove log files based on age.\n\n### LOG_FILE_MAX_BACKUPS\n\n- Default: `\"1\"`\n\nDetermines the maximum number of old log files to retain. Keeping this config with the default value retains all old log files. The `LOG_FILE_MAX_AGE` variable can still cause them to get deleted.\n\n### LOG_UNIX_TS\n\n- Default: `\"false\"`\n\nPrevious versions of Chainlink nodes wrote JSON logs with a unix timestamp. As of v1.1.0 and up, the default has changed to use ISO8601 timestamps for better readability. Setting `LOG_UNIX_TS=true` will enable the old behavior.\n\n## Nurse service (auto-pprof)\n\nThe Chainlink node is equipped with an internal \"nurse\" service that can perform automatic `pprof` profiling when the certain resource thresholds are exceeded, such as memory and goroutine count. These profiles are saved to disk to facilitate fine-grained debugging of performance-related issues. In general, if you notice that your node has begun to accumulate profiles, forward them to the Chainlink team.\n\nTo learn more about these profiles, read the [Profiling Go programs with pprof](https://jvns.ca/blog/2017/09/24/profiling-go-with-pprof/) guide.\n\n### AUTO_PPROF_ENABLED\n\n- Default: `\"false\"`\n\nSet to `true` to enable the automatic profiling service.\n\n### AUTO_PPROF_PROFILE_ROOT\n\nDefaults to `$CHAINLINK_ROOT`\n\nThe location on disk where pprof profiles will be stored.\n\n### AUTO_PPROF_POLL_INTERVAL\n\n- Default: `\"10s\"`\n\nThe interval at which the node's resources are checked.\n\n### AUTO_PPROF_GATHER_DURATION\n\n- Default: `\"10s\"`\n\nThe duration for which profiles are gathered when profiling starts.\n\n### AUTO_PPROF_GATHER_TRACE_DURATION\n\n- Default: `\"5s\"`\n\nThe duration for which traces are gathered when profiling is kicked off. This is separately configurable because traces are significantly larger than other types of profiles.\n\n### AUTO_PPROF_MAX_PROFILE_SIZE\n\n- Default: `\"100mb\"`\n\nThe maximum amount of disk space that profiles may consume before profiling is disabled.\n\n### AUTO_PPROF_CPU_PROFILE_RATE\n\n- Default: `\"1\"`\n\nSee https://pkg.go.dev/runtime#SetCPUProfileRate.\n\n### AUTO_PPROF_MEM_PROFILE_RATE\n\n- Default: `\"1\"`\n\nSee https://pkg.go.dev/runtime#pkg-variables.\n\n### AUTO_PPROF_BLOCK_PROFILE_RATE\n\n- Default: `\"1\"`\n\nSee https://pkg.go.dev/runtime#SetBlockProfileRate.\n\n### AUTO_PPROF_MUTEX_PROFILE_FRACTION\n\n- Default: `\"1\"`\n\nSee https://pkg.go.dev/runtime#SetMutexProfileFraction.\n\n- Default: `\"1\"`\n\n### AUTO_PPROF_MEM_THRESHOLD\n\n- Default: `\"4gb\"`\n\nThe maximum amount of memory the node can actively consume before profiling begins.\n\n### AUTO_PPROF_GOROUTINE_THRESHOLD\n\n- Default: `\"5000\"`\n\nThe maximum number of actively-running goroutines the node can spawn before profiling begins.\n\n## Chainlink Web Server\n\n### ALLOW_ORIGINS\n\n- Default: `\"http://localhost:3000,http://localhost:6688\"`\n\nControls the URLs Chainlink nodes emit in the `Allow-Origins` header of its API responses. The setting can be a comma-separated list with no spaces. You might experience CORS issues if this is not set correctly.\n\nYou should set this to the external URL that you use to access the Chainlink UI.\n\nYou can set `ALLOW_ORIGINS=*` to allow the UI to work from any URL, but it is recommended for security reasons to make it explicit instead.\n\n### AUTHENTICATED_RATE_LIMIT\n\n- Default: `\"1000\"`\n\n`AUTHENTICATED_RATE_LIMIT` defines the threshold to which authenticated requests get limited. More than this many authenticated requests per `AUTHENTICATED_RATE_LIMIT_PERIOD` will be rejected.\n\n### AUTHENTICATED_RATE_LIMIT_PERIOD\n\n- Default: `\"1m\"`\n\n`AUTHENTICATED_RATE_LIMIT_PERIOD` defines the period to which authenticated requests get limited.\n\n### BRIDGE_RESPONSE_URL\n\n- Default: _none_\n\n`BRIDGE_RESPONSE_URL` defines the URL for bridges to send a response to. This _must_ be set when using async external adapters.\n\nUsually this will be the same as the URL/IP and port you use to connect to the Chainlink UI, such as `https://my-chainlink-node.example.com:6688`.\n\n### HTTP_SERVER_WRITE_TIMEOUT\n\n**ADVANCED**\n\nDo not change this setting unless you know what you are doing.\n\n- Default: `\"10s\"`\n\n`HTTP_SERVER_WRITE_TIMEOUT` controls how long the Chainlink node's API server can hold a socket open for writing a response to an HTTP request. Sometimes, this must be increased for pprof.\n\n### CHAINLINK_PORT\n\n- Default: `\"6688\"`\n\nPort used for the Chainlink Node API, [CLI](/chainlink-nodes/configuration-variables/#cli-client), and GUI.\n\n### SECURE_COOKIES\n\n- Default: `\"true\"`\n\nRequires the use of secure cookies for authentication. Set to false to enable standard HTTP requests along with `CHAINLINK_TLS_PORT=0`.\n\n### SESSION_TIMEOUT\n\n- Default: `\"15m\"`\n\nThis value determines the amount of idle time to elapse before session cookies expire. This signs out GUI users from their sessions.\n\n### UNAUTHENTICATED_RATE_LIMIT\n\n- Default: `\"5\"`\n\n`UNAUTHENTICATED_RATE_LIMIT` defines the threshold to which authenticated requests get limited. More than this many unauthenticated requests per `UNAUTHENTICATED_RATE_LIMIT_PERIOD` will be rejected.\n\n### UNAUTHENTICATED_RATE_LIMIT_PERIOD\n\n- Default: `\"20s\"`\n\n`UNAUTHENTICATED_RATE_LIMIT_PERIOD` defines the period to which unauthenticated requests get limited.\n\n## Web Server MFA\n\nThe Operator UI frontend now supports enabling Multi Factor Authentication via Webauthn per account. When enabled, logging in will require the account password and a hardware or OS security key such as Yubikey. To enroll, log in to the operator UI and click the circle purple profile button at the top right and then click **Register MFA Token**. Tap your hardware security key or use the OS public key management feature to enroll a key. Next time you log in, this key will be required to authenticate.\n\nThis feature must be enabled by setting the following environment variables: `MFA_RPID` and `MFA_RPORIGIN`.\n\n### MFA_RPID\n\n- Default: _none_\n\nThe `MFA_RPID` value should be the FQDN of where the Operator UI is served. When serving locally, the value should be `localhost`.\n\n### MFA_RPORIGIN\n\n- Default: _none_\n\nThe `MFA_RPORIGIN` value should be the origin URL where WebAuthn requests initiate, including scheme and port. When serving locally, the value should be `http://localhost:6688/`.\n\n## Web Server TLS\n\nThe TLS settings below apply only if you want to enable TLS security on your Chainlink node.\n\n### CHAINLINK_TLS_HOST\n\n- Default: _none_\n\nThe hostname configured for TLS to be used by the Chainlink node. This is useful if you configured a domain name specific for your Chainlink node.\n\n### CHAINLINK_TLS_PORT\n\n- Default: `\"6689\"`\n\nThe port used for HTTPS connections. Set this to `0` to disable HTTPS. Disabling HTTPS also relieves Chainlink nodes of the requirement for a TLS certificate.\n\n### CHAINLINK_TLS_REDIRECT\n\n- Default: `\"false\"`\n\nForces TLS redirect for unencrypted connections.\n\n### TLS_CERT_PATH\n\n- Default: _none_\n\nThe location of the TLS certificate file. Example: `/home/$USER/.chainlink/tls/server.crt`\n\n### TLS_KEY_PATH\n\n- Default: _none_\n\nThe location of the TLS private key file. Example: `/home/$USER/.chainlink/tls/server.key`\n\n## EVM/Ethereum Legacy Environment Variables\n\nPrevious Chainlink node versions supported only one chain. From v1.1.0 and up, Chainlink nodes support multiple EVM and non-EVM chains, so the way that chains and nodes are configured has changed.\n\nThe preferred way of configuring Chainlink nodes as of v1.1.0 and up is to use the API, [CLI](/chainlink-nodes/configuration-variables/#cli-client), or UI to set chain-specific configuration and create nodes.\n\nThe old way of specifying chains using environment variables is still supported, but discouraged. It works as follows:\n\nIf you set any value for `ETH_URL`, the values of `ETH_CHAIN_ID`, `ETH_URL`, `ETH_HTTP_URL` and `ETH_SECONDARY_URLS` will be used to create and update chains and nodes representing these values in the database. If an existing chain or node is found, it will be overwritten. This mode is used mainly to ease the process of upgrading. On subsequent runs (once your old settings have been written to the database) it is recommended to unset `ETH_URL` and use the API commands exclusively to administer chains and nodes.\n\nIn the future, support for the `ETH_URL` and associated environment variables might be removed, so it is recommended to use the API, [CLI](/chainlink-nodes/configuration-variables/#cli-client), or GUI instead to setup chains and nodes.\n\n### ETH_URL\n\nSetting this will enable \"legacy eth ENV\" mode, which is not compatible with multi-chain. It is better to configure settings using the API, [CLI](/chainlink-nodes/configuration-variables/#cli-client), or GUI instead.\n\n- Default: _none_\n\nThis is the websocket address of the Ethereum client that the Chainlink node will connect to. All interaction with the Ethereum blockchain will occur through this connection.\n\nNOTE: It is also required to set `ETH_CHAIN_ID` if you set ETH_URL.\n\n### ETH_HTTP_URL\n\nOnly has effect if `ETH_URL` set. Otherwise, it can be set in the API, [CLI](/chainlink-nodes/configuration-variables/#cli-client), or GUI.\n\n- Default: _none_\n\nThis should be set to the HTTP URL that points to the same ETH node as the primary. If set, the Chainlink node will automatically use HTTP mode for heavy requests, which can improve reliability.\n\n### EVM_NODES\n\n:::caution\nSetting this environment variable will **COMPLETELY ERASE** your `evm_nodes` table on every boot and repopulate from the given data to nullify any runtime modifications. This is a temporary solution until this configuration can be defined in a file in the future.\n:::\n\n- Default: _none_\n\nA JSON array of node specifications that allows you to configure multiple nodes or chains using an environment variable. This is not compatible with other environment variables that specify the node such as `ETH_URL` or `ETH_SECONDARY_URLS`. Set this variable using a configuration like the following example:\n\n```json\nEVM_NODES='\n[\n\t{\n\t\t\"name\": \"primary_0_1\",\n\t\t\"evmChainId\": \"0\",\n\t\t\"wsUrl\": \"ws://test1.invalid\",\n\t\t\"sendOnly\": false\n\t},\n\t{\n\t\t\"name\": \"primary_0_2\",\n\t\t\"evmChainId\": \"0\",\n\t\t\"wsUrl\": \"ws://test2.invalid\",\n\t\t\"httpUrl\": \"https://test3.invalid\",\n\t\t\"sendOnly\": false\n\t},\n\t{\n\t\t\"name\": \"primary_1337_1\",\n\t\t\"evmChainId\": \"1337\",\n\t\t\"wsUrl\": \"ws://test4.invalid\",\n\t\t\"httpUrl\": \"http://test5.invalid\",\n\t\t\"sendOnly\": false\n\t},\n\t{\n\t\t\"name\": \"sendonly_1337_1\",\n\t\t\"evmChainId\": \"1337\",\n\t\t\"httpUrl\": \"http://test6.invalid\",\n\t\t\"sendOnly\": true\n\t},\n\t{\n\t\t\"name\": \"sendonly_0_1\",\n\t\t\"evmChainId\": \"0\",\n\t\t\"httpUrl\": \"http://test7.invalid\",\n\t\t\"sendOnly\": true\n\t},\n\t{\n\t\t\"name\": \"primary_42_1\",\n\t\t\"evmChainId\": \"42\",\n\t\t\"wsUrl\": \"ws://test8.invalid\",\n\t\t\"sendOnly\": false\n\t},\n\t{\n\t\t\"name\": \"sendonly_43_1\",\n\t\t\"evmChainId\": \"43\",\n\t\t\"httpUrl\": \"http://test9.invalid\",\n\t\t\"sendOnly\": true\n\t}\n]\n'\n```\n\nUsage of Docker requires the variable to be formatted as one line with no whitespaces and quotes wrapping it, as follows in the example:\n\n```bash\nEVM_NODES=[{\"name\":\"primary_0_1\",\"evmChainId\":\"0\",\"wsUrl\":\"ws://test1.invalid\",\"sendOnly\":false},{\"name\":\"primary_0_2\",\"evmChainId\":\"0\",\"wsUrl\":\"ws://test2.invalid\",\"httpUrl\":\"https://test3.invalid\",\"sendOnly\":false},{\"name\":\"primary_1337_1\",\"evmChainId\":\"1337\",\"wsUrl\":\"ws://test4.invalid\",\"httpUrl\":\"http://test5.invalid\",\"sendOnly\":false}]\n```\n\n### ETH_SECONDARY_URLS\n\nOnly has effect if `ETH_URL` set. Otherwise, it can be set in the API, [CLI](/chainlink-nodes/configuration-variables/#cli-client), or GUI.\n\n- Default: _none_\n\nIf set, transactions will also be broadcast to this secondary Ethereum node. This allows transaction broadcasting to be more robust in the face of primary Ethereum node bugs or failures.\n\nIt is recommended to set at least one secondary ETH node here that is different from your primary.\n\nMultiple URLs can be specified as a comma-separated list e.g.\n\n`ETH_SECONDARY_URLS=https://example.com/1,https://example.text/2,...`\n\n## EVM/Ethereum Global Settings\n\nThis configuration is specific to EVM/Ethereum chains.\n\n### ETH_CHAIN_ID\n\n- Default: _none_\n\nThis environment variable specifies the default chain ID. Any job spec that has not explicitly set `EVMChainID` will connect to this default chain. If you do not have a chain in the database matching this value, any jobs that try to use it will throw an error.\n\n### EVM_RPC_ENABLED\n\n- Default: `\"true\"`\n\nEnables connecting to real EVM RPC nodes. Disabling this can be useful in certain cases such as spinning up a Chainlink node and adding EVM-based jobs without having it actually execute anything on-chain, or for debugging to see what the node _would_ do without actually doing it.\n\n## EVM/Ethereum Chain-specific Overrides\n\nThese configuration options act as an override, setting the value for _all_ chains.\n\nThis often doesn't make sense, e.g. `ETH_FINALITY_DEPTH` on Avalanche could be quite different from `ETH_FINALITY_DEPTH` on Ethereum mainnet.\n\nWe recommend setting this on a per-chain basis using the API, CLI, or GUI instead.\n\nIn general, Chainlink nodes contain built-in defaults for most of these settings that should work out of the box on all officially supported chains, so it is unlikely you must make any changes here.\n\n### BALANCE_MONITOR_ENABLED\n\n- Default: `\"true\"`\n\nEnables Balance Monitor feature. This is required to track balances of keys locally and warn if it drops too low. It also enables displaying balance in the Chainlink UI and API.\n\n### BLOCK_BACKFILL_DEPTH\n\n- Default: `\"10\"`\n\nThis variable specifies the number of blocks before the current head that the log broadcaster will try to re-consume logs from, e.g. after adding a new job.\n\n### BLOCK_BACKFILL_SKIP\n\n- Default: `\"false\"`\n\nThis variable enables skipping of very long log backfills. For example, this happens in a situation when the node is started after being offline for a long time.\nThis might be useful on fast chains and if only recent chain events are relevant\n\n### ETH_TX_REAPER_INTERVAL\n\nNOTE: This overrides the setting for _all_ chains, you might want to set this on a per-chain basis using the API, [CLI](/chainlink-nodes/configuration-variables/#cli-client), or GUI instead\n\n- Default: `\"1h\"`\n\nControls how often the ETH transaction reaper should run, used to delete old confirmed or fatally_errored transaction records from the database. Setting to `0` disables the reaper.\n\n### ETH_TX_REAPER_THRESHOLD\n\n- Default: `\"24h\"`\n\nRepresents how long any confirmed or fatally_errored `eth_tx` transactions will hang around in the database.\nIf the `eth_tx` is confirmed but still below `ETH_FINALITY_DEPTH`, it will not be deleted even if it was created at a time older than this value.\n\nEXAMPLE:\nWith: `EthTxReaperThreshold=1h` and `EthFinalityDepth=50`\nIf current head is 142, any `eth_tx` confirmed in block 91 or below will be reaped as long as its `created_at` value is older than the value set for `EthTxReaperThreshold`.\n\nSetting to `0` disables the reaper.\n\n### ETH_TX_RESEND_AFTER_THRESHOLD\n\nNOTE: This overrides the setting for _all_ chains, you might want to set this on a per-chain basis using the API, [CLI](/chainlink-nodes/configuration-variables/#cli-client), or GUI instead.\n\n- Default: _automatically set based on Chain ID, typically 1m_\n\nControls how long the `ethResender` will wait before re-sending the latest `eth_tx_attempt`. This is designed a as a fallback to protect against the ETH nodes dropping transactions (which has been anecdotally observed to happen), networking issues, or transactions being ejected from the mempool.\n\nSetting to `0` disables the resender.\n\n### ETH_FINALITY_DEPTH\n\n- Default: _automatically set based on Chain ID, typically 50_\n\nThe number of blocks after which an Ethereum transaction is considered \"final\".\n\n`ETH_FINALITY_DEPTH` determines how deeply we look back to ensure that transactions are confirmed onto the longest chain. There is not a large performance penalty to setting this relatively high (on the order of hundreds).\n\nIt is practically limited by the number of heads we store in the database (`HEAD_TRACKER_HISTORY_DEPTH`) and should be less than this with a comfortable margin.\nIf a transaction is mined in a block more than this many blocks ago, and is reorged out, we will NOT retransmit this transaction and undefined behavior can occur including gaps in the nonce sequence that require manual intervention to fix. Therefore, this number represents a number of blocks we consider large enough that no re-org this deep will ever feasibly happen.\n\n### ETH_HEAD_TRACKER_HISTORY_DEPTH\n\n- Default: _automatically set based on Chain ID, typically 100_\n\nTracks the top N block numbers to keep in the `heads` database table. Note that this can easily result in MORE than N total records since in the case of re-orgs we keep multiple heads for a particular block height, and it is also scoped per chain. This number should be at least as large as `ETH_FINALITY_DEPTH`. There might be a small performance penalty to setting this to something very large (10,000+)\n\n### ETH_HEAD_TRACKER_MAX_BUFFER_SIZE\n\n- Default: `\"3\"`\n\nThe maximum number of heads that can be buffered in front of the head tracker before older heads start to be dropped. Think this setting as the maximum permitted \"lag\" for the head tracker before the Chainlink node starts dropping heads to keep up.\n\n### ETH_HEAD_TRACKER_SAMPLING_INTERVAL\n\n- Default: _automatically set based on Chain ID, typically 1s_\n\nHead tracker sampling was introduced to handle chains with very high throughput. If this is set, the head tracker will \"gap\" heads and deliver a maximum of 1 head per this period.\n\nSet to `0` to disable head tracker sampling.\n\n### ETH_LOG_BACKFILL_BATCH_SIZE\n\n- Default: _automatic based on Chain ID, typically 100_\n\nControls the batch size for calling FilterLogs when backfilling missing or recent logs.\n\n### ETH_LOG_POLL_INTERVAL\n\n- Default: _automatic based on Chain ID_\n\nDefines how frequently to poll for new logs.\n\n### ETH_RPC_DEFAULT_BATCH_SIZE\n\n- Default: _automatic based on chain ID_\n\nChainlink nodes use batch mode for certain RPC calls to increase efficiency of communication with the remote ETH node. In some cases, trying to request too many items in a single batch will result in an error (e.g. due to bugs in go-ethereum, third-party provider limitations, limits inherent to the websocket channel etc). This setting controls the maximum number of items that can be requested in a single batch. Chainlink nodes use built-in conservative defaults for different chains that should work out of the box.\n\nIf you have enabled HTTP URLs for all of your ETH nodes, you can safely increase this to a larger value e.g. 100 and see significant RPC performance improvements.\n\n### LINK_CONTRACT_ADDRESS\n\n- Default: _automatic based on Chain ID_\n\nThe address of the LINK token contract. It is not essential to provide this, but if given, it is used for displaying the node account's LINK balance. For supported chains, this is automatically set based on the given chain ID. For unsupported chains, you must supply it yourself.\n\nThis environment variable is a global override. It is recommended instead to set this on a per-chain basis.\n\n### MIN_INCOMING_CONFIRMATIONS\n\n- Default: _automatic based on chain ID, typically 3_\n\nThe number of block confirmations to wait before kicking off a job run or proceeding with a task that listens to blockchain and log events. Setting this to a lower value improves node response time at the expense of occasionally submitting duplicate transactions in the event of chain re-orgs (duplicate transactions are harmless but cost some ETH).\n\nYou can override this on a per-job basis.\n\n`MIN_INCOMING_CONFIRMATIONS=1` would kick off a job after seeing the transaction in just one block.\n\n:::caution\nThe lowest value allowed here is 1, since setting to 0 would imply that logs are processed from the mempool before they are even mined into a block, which isn't possible with Chainlink's current architecture.\n:::\n\n### MIN_OUTGOING_CONFIRMATIONS\n\n- Default: _automatic based on chain ID, typically 12_\n\nThe default minimum number of block confirmations that need to be recorded on an outgoing `ethtx` task before the run can move onto the next task.\n\nThis can be overridden on a per-task basis by setting the `MinRequiredOutgoingConfirmations` parameter.\n\n`MIN_OUTGOING_CONFIRMATIONS=1` considers a transaction as \"done\" once it has been mined into one block.\n`MIN_OUTGOING_CONFIRMATIONS=0` would consider a transaction as \"done\" even before it has been mined.\n\n### MINIMUM_CONTRACT_PAYMENT_LINK_JUELS\n\n:::note\nThis has replaced the formerly used MINIMUM_CONTRACT_PAYMENT.\n:::\n\n- Default: _automatically set based on Chain ID, typically 10000000000000 (0.00001 LINK) on all chains except Ethereum Mainnet and Goerli where it is 100000000000000000 (0.1 LINK)._\n\nFor jobs that use the `EthTx` adapter, this is the minimum payment amount in order for the node to accept and process the job. Since there are no decimals on the EVM, the value is represented like wei.\n\n:::note\nKeep in mind, the Chainlink node currently responds with a 500,000 gas limit. Under pricing your node could mean it spends more in ETH (on gas) than it earns in LINK.\n:::\n\n### NODE_NO_NEW_HEADS_THRESHOLD\n\n- Default: _automatically set based on Chain ID, typically \"3m\" (3 minutes)_\n\nControls how long to wait after receiving no new heads before marking the node as out-of-sync.\n\nSet to zero to disable out-of-sync checking.\n\n### NODE_POLL_FAILURE_THRESHOLD\n\n- Default: _automatically set based on Chain ID, typically 3_\n\nIndicates how many consecutive polls must fail in order to mark a node as unreachable.\n\nSet to zero to disable poll checking.\n\n### NODE_POLL_INTERVAL\n\n- Default: _automatically set based on Chain ID, typically \"10s\" (10 seconds)_\n\nControls how often to poll the node to check for liveness.\n\nSet to zero to disable poll checking.\n\n### NODE_SELECTION_MODE\n\n- Default: `\"HighestHead\"`\n\nControls node picking strategy. Supported values:\n\n- `HighestHead` (default) mode picks a node having the highest reported head number among other alive nodes. When several nodes have the same latest head number, the strategy sticks to the last used node. This mode requires `NODE_NO_NEW_HEADS_THRESHOLD` to be configured, otherwise it will always use the first alive node.\n- `RoundRobin` mode simply iterates among available alive nodes. This was the default behavior prior to this release.\n\n## EVM Gas Controls\n\nThese settings allow you to tune your node's gas limits and pricing. In most cases, leaving these values at their defaults should give good results.\n\nAs of Chainlink node v1.1.0, it is recommended to use the API, [CLI](/chainlink-nodes/configuration-variables/#cli-client), or GUI to configure gas controls because you might want to use different settings for different chains. Setting the environment variable typically overrides the setting for all chains.\n\n### Configuring your ETH node\n\nYour ETH node might need some configuration tweaks to make it fully compatible with Chainlink nodes depending on your configuration.\n\n#### go-ethereum\n\nWARNING: By default, go-ethereum will reject transactions that exceed it's built-in RPC gas or txfee caps. Chainlink nodes will fatally error transactions if this happens which means if you ever exceed the caps your node will miss transactions.\n\nYou should at a bare minimum disable the default RPC gas and txfee caps on your ETH node. This can be done in the TOML file as seen below, or by running go-ethereum with the command line arguments: `--rpc.gascap=0 --rpc.txfeecap=0`.\n\nIt is also recommended to configure go-ethereum properly before increasing `ETH_MAX_IN_FLIGHT_TRANSACTIONS` to ensure all in-flight transactions are maintained in the mempool.\n\nRelevant settings for geth and forks (such as BSC).\n\n```toml\n[Eth]\nRPCGasCap = 0 # it is recommended to disable both gas and txfee cap\nRPCTxFeeCap = 0.0\n[Eth.TxPool]\nLocals = [\"0xYourNodeAddress1\", \"0xYourNodeAddress2\"]  # Add your node addresses here\nNoLocals = false # Disabled by default but might as well make sure\nJournal = \"transactions.rlp\" # Make sure you set a journal file\nRejournal = 3600000000000 # Default 1h, it might make sense to reduce this to e.g. 5m\nPriceBump = 10 # Must be set less than or equal to Chainlink's ETH_GAS_BUMP_PERCENT\nAccountSlots = 16 # Highly recommended to increase this, must be greater than or equal to Chainlink's ETH_MAX_IN_FLIGHT_TRANSACTIONS setting\nGlobalSlots = 4096 # Increase this as necessary\nAccountQueue = 64 # Increase this as necessary\nGlobalQueue = 1024 # Increase this as necessary\nLifetime = 10800000000000 # Default 3h, this is probably ok, you might even consider reducing it\n```\n\n### EVM_EIP1559_DYNAMIC_FEES\n\n- Default: _automatic based on chain ID_\n\nForces EIP-1559 transaction mode for all chains. Enabling EIP-1559 mode can help reduce gas costs on chains that support it. This is supported only on official Ethereum mainnet and testnets. It is not recommended to enable this setting on Polygon because the EIP-1559 fee market appears to be broken on all Polygon chains and EIP-1559 transactions are less likely to be included than legacy transactions.\n\n#### Technical details\n\nChainlink nodes include experimental support for submitting transactions using type 0x2 (EIP-1559) envelope.\n\nEIP-1559 mode is enabled by default on the Ethereum Mainnet, but can be enabled on a per-chain basis or globally.\n\nThis might help to save gas on spikes. Chainlink nodes should react faster on the upleg and avoid overpaying on the downleg. It might also be possible to set `BLOCK_HISTORY_ESTIMATOR_BATCH_SIZE` to a smaller value such as 12 or even 6 because tip cap should be a more consistent indicator of inclusion time than total gas price. This would make Chainlink nodes more responsive and should reduce response time variance. Some experimentation is required to find optimum settings.\n\nTo enable globally, set `EVM_EIP1559_DYNAMIC_FEES=true`. Set with caution, if you set this on a chain that does not actually support EIP-1559 your node will be broken.\n\nIn EIP-1559 mode, the total price for the transaction is the minimum of base fee + tip cap and fee cap. More information can be found on the [official EIP](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md).\n\nChainlink's implementation of EIP-1559 works as follows:\n\nIf you are using FixedPriceEstimator:\n\n- With gas bumping disabled, it will submit all transactions with `feecap=ETH_MAX_GAS_PRICE_WEI` and `tipcap=EVM_GAS_TIP_CAP_DEFAULT`\n- With gas bumping enabled, it will submit all transactions initially with `feecap=EVM_GAS_FEE_CAP_DEFAULT` and `tipcap=EVM_GAS_TIP_CAP_DEFAULT`.\n\nIf you are using BlockHistoryEstimator (default for most chains):\n\n- With gas bumping disabled, it will submit all transactions with `feecap=ETH_MAX_GAS_PRICE_WEI` and `tipcap=<calculated using past blocks>`\n- With gas bumping enabled (default for most chains) it will submit all transactions initially with `feecap=current block base fee * (1.125 ^ N)` where N is configurable by setting BLOCK_HISTORY_ESTIMATOR_EIP1559_FEE_CAP_BUFFER_BLOCKS but defaults to `gas bump threshold+1` and `tipcap=<calculated using past blocks>`\n\nBumping works as follows:\n\n- Increase tipcap by `max(tipcap * (1 + ETH_GAS_BUMP_PERCENT), tipcap + ETH_GAS_BUMP_WEI)`\n- Increase feecap by `max(feecap * (1 + ETH_GAS_BUMP_PERCENT), feecap + ETH_GAS_BUMP_WEI)`\n\nA quick note on terminology - Chainlink nodes use the same terms used internally by go-ethereum source code to describe various prices. This is not the same as the externally used terms. For reference:\n\n- Base Fee Per Gas = BaseFeePerGas\n- Max Fee Per Gas = FeeCap\n- Max Priority Fee Per Gas = TipCap\n\nIn EIP-1559 mode, the following changes occur to how configuration works:\n\n- All new transactions will be sent as type 0x2 transactions specifying a TipCap and FeeCap. Be aware that existing pending legacy transactions will continue to be gas bumped in legacy mode.\n- `BlockHistoryEstimator` will apply its calculations (gas percentile etc) to the TipCap and this value will be used for new transactions (GasPrice will be ignored)\n- `FixedPriceEstimator` will use `EVM_GAS_TIP_CAP_DEFAULT` instead of `ETH_GAS_PRICE_DEFAULT` for the tip cap\n- `FixedPriceEstimator` will use `EVM_GAS_FEE_CAP_DEFAULT` instaed of `ETH_GAS_PRICE_DEFAULT` for the fee cap\n- `ETH_MIN_GAS_PRICE_WEI` is ignored for new transactions and `EVM_GAS_TIP_CAP_MINIMUM` is used instead (default 0)\n- `ETH_MAX_GAS_PRICE_WEI` still represents that absolute upper limit that Chainlink will ever spend (total) on a single tx\n- `KEEPER_GAS_PRICE_BUFFER_PERCENT` is ignored in EIP-1559 mode and `KEEPER_TIP_CAP_BUFFER_PERCENT` is used instead\n\n### ETH_GAS_BUMP_PERCENT\n\n- Default: _automatic based on chain ID_\n\nThe percentage by which to bump gas on a transaction that has exceeded `ETH_GAS_BUMP_THRESHOLD`. The larger of `ETH_GAS_BUMP_PERCENT` and `ETH_GAS_BUMP_WEI` is taken for gas bumps.\n\n### ETH_GAS_BUMP_THRESHOLD\n\n- Default: _automatic based on chain ID_\n\nChainlink nodes can be configured to automatically bump gas on transactions that have been stuck waiting in the mempool for at least this many blocks. Set to 0 to disable gas bumping completely.\n\n### ETH_GAS_BUMP_TX_DEPTH\n\n- Default: `\"10\"`\n\nThe number of transactions to gas bump starting from oldest. Set to 0 for no limit (i.e. bump all).\n\n### ETH_GAS_BUMP_WEI\n\n- Default: _automatic based on chain ID_\n\nThe minimum fixed amount of wei by which gas is bumped on each transaction attempt.\n\n### EVM_GAS_FEE_CAP_DEFAULT\n\n- Default: _automatic based on chain ID_\n\nIf EIP1559 mode is enabled, and FixedPrice gas estimator is used, this env var controls the fixed initial fee cap.\n\n### ETH_GAS_LIMIT_DEFAULT\n\n- Default: _automatically set based on Chain ID, typically 500000_\n\nThe default gas limit for outgoing transactions. This should not need to be changed in most cases.\nSome job types, such as Keeper jobs, might set their own gas limit unrelated to this value.\n\n### ETH_GAS_LIMIT_MULTIPLIER\n\n- Default: `\"1.0\"`\n\nA factor by which a transaction's GasLimit is multiplied before transmission. So if the value is 1.1, and the GasLimit for a transaction is 10, 10% will be added before transmission.\n\nThis factor is always applied, so includes Optimism L2 transactions which uses a default gas limit of 1 and is also applied to EthGasLimitDefault.\n\n### ETH_GAS_LIMIT_TRANSFER\n\n- Default: _automatically set based on Chain ID, typically 21000_\n\nThe gas limit used for an ordinary ETH transfer.\n\n### ETH_GAS_PRICE_DEFAULT\n\n(Only applies to legacy transactions)\n\n- Default: _automatic based on chain ID_\n\nThe default gas price to use when submitting transactions to the blockchain. Will be overridden by the built-in `BlockHistoryEstimator` if enabled, and might be increased if gas bumping is enabled.\n\nCan be used with the `chainlink setgasprice` to be updated while the node is still running.\n\n### EVM_GAS_TIP_CAP_DEFAULT\n\n(Only applies to EIP-1559 transactions)\n\n- Default: _automatic based on chain ID_\n\nThe default gas tip to use when submitting transactions to the blockchain. Will be overridden by the built-in `BlockHistoryEstimator` if enabled, and might be increased if gas bumping is enabled.\n\n### EVM_GAS_TIP_CAP_MINIMUM\n\n(Only applies to EIP-1559 transactions)\n\n- Default: _automatic based on chain ID_\n\nThe minimum gas tip to use when submitting transactions to the blockchain.\n\n### ETH_MAX_GAS_PRICE_WEI\n\n- Default: _automatic based on chain ID_\n\nChainlink nodes will never pay more than this for a transaction.\n\n### ETH_MAX_IN_FLIGHT_TRANSACTIONS\n\n- Default: `\"16\"`\n\nControls how many transactions are allowed to be \"in-flight\" i.e. broadcast but unconfirmed at any one time. You can consider this a form of transaction throttling.\n\nThe default is set conservatively at 16 because this is a pessimistic minimum that geth will hold without evicting local transactions. If your node is falling behind and you need higher throughput, you can increase this setting, but you MUST make sure that your ETH node is configured properly otherwise you can get nonce gapped and your node will get stuck.\n\n0 value disables the limit. Use with caution.\n\n### ETH_MAX_QUEUED_TRANSACTIONS\n\n- Default: _automatically set based on Chain ID, typically 250_\n\nThe maximum number of unbroadcast transactions per key that are allowed to be enqueued before jobs will start failing and rejecting send of any further transactions. This represents a sanity limit and generally indicates a problem with your ETH node (transactions are not getting mined).\n\nDo NOT blindly increase this value thinking it will fix things if you start hitting this limit because transactions are not getting mined, you will instead only make things worse.\n\nIn deployments with very high burst rates, or on chains with large re-orgs, you _may_ consider increasing this.\n\n0 value disables any limit on queue size. Use with caution.\n\n### ETH_MIN_GAS_PRICE_WEI\n\n(Only applies to legacy transactions)\n\n- Default: _automatic based on chain ID_\n\nChainlink nodes will never pay less than this for a transaction.\n\nIt is possible to force the Chainlink node to use a fixed gas price by setting a combination of these, e.g.\n\n```text\nEVM_EIP1559_DYNAMIC_FEES=false\nETH_MAX_GAS_PRICE_WEI=100\nETH_MIN_GAS_PRICE_WEI=100\nETH_GAS_PRICE_DEFAULT=100\nETH_GAS_BUMP_THRESHOLD=0\nGAS_ESTIMATOR_MODE=\"FixedPrice\"\n```\n\n### ETH_GAS_LIMIT_OCR_JOB_TYPE\n\n- Default: _none_\n\nOverrides the [default gas limit](#eth_gas_limit_default) for OCR jobs. This environment variable does not override task-specific or job-specific `gasLimit` parameters or attributes.\n\n### ETH_GAS_LIMIT_DR_JOB_TYPE\n\n- Default: _none_\n\nOverrides the [default gas limit](#eth_gas_limit_default) for direct request jobs. This environment variable does not override task-specific or job-specific `gasLimit` parameters or attributes.\n\n### ETH_GAS_LIMIT_VRF_JOB_TYPE\n\n- Default: _none_\n\nOverrides the [default gas limit](#eth_gas_limit_default) for VRF jobs. This environment variable does not override task-specific or job-specific `gasLimit` parameters or attributes.\n\n### ETH_GAS_LIMIT_FM_JOB_TYPE\n\n- Default: _none_\n\nOverrides the [default gas limit](#eth_gas_limit_default) for Flux Monitor jobs. This environment variable does not override task-specific or job-specific `gasLimit` parameters or attributes.\n\n### ETH_GAS_LIMIT_KEEPER_JOB_TYPE\n\n- Default: _none_\n\nOverrides the [default gas limit](#eth_gas_limit_default) for Keeper jobs. This environment variable does not override task-specific or job-specific `gasLimit` parameters or attributes.\n\n### ETH_NONCE_AUTO_SYNC\n\n- Default: `\"false\"`\n\nChainlink nodes will automatically try to sync its local nonce with the remote chain on startup and fast forward if necessary. This is almost always safe but can be disabled in exceptional cases by setting this value to false.\n\n### ETH_USE_FORWARDERS\n\n- Default: `\"false\"`\n\nEnables or disables sending transactions through forwarder contracts.\n\n## EVM/Ethereum Gas Price Estimation\n\nThese settings allow you to configure how your node calculates gas prices. In most cases, leaving these values at their defaults should give good results.\n\nAs of Chainlink node v1.1.0, it is recommended to use the API, [CLI](/chainlink-nodes/configuration-variables/#cli-client), or GUI to configure gas controls because you might want to use different settings for different chains. Setting the environment variable typically overrides the setting for all chains.\n\nChainlink nodes decide what gas price to use using an `Estimator`. It ships with several simple and battle-hardened built-in estimators that should work well for almost all use-cases. Note that estimators will change their behaviour slightly depending on if you are in EIP-1559 mode or not.\n\nYou can also use your own estimator for gas price by selecting the `FixedPrice` estimator and using the exposed API to set the price.\n\nAn important point to note is that the Chainlink node does _not_ ship with built-in support for go-ethereum's `estimateGas` call. This is for several reasons, including security and reliability. We have found empirically that it is not generally safe to rely on the remote ETH node's idea of what gas price should be.\n\n### GAS_ESTIMATOR_MODE\n\n- Default: _automatic, based on chain ID_\n\nControls what type of gas estimator is used.\n\n- `FixedPrice` uses static configured values for gas price (can be set via API call).\n- `BlockHistory` dynamically adjusts default gas price based on heuristics from mined blocks.\n- `Optimism` is a special mode only for use with older versions of the Optimism blockchain.\n- `Optimism2` is a special mode only for use with current versions of the Optimism blockchain.\n\n### BLOCK_HISTORY_ESTIMATOR_BATCH_SIZE\n\n- Default: _automatic, based on chain ID, typically 4_\n\nSets the maximum number of blocks to fetch in one batch in the block history estimator.\nIf the `BLOCK_HISTORY_ESTIMATOR_BATCH_SIZE` environment variable is set to 0, it defaults to ETH_RPC_DEFAULT_BATCH_SIZE.\n\n### BLOCK_HISTORY_ESTIMATOR_BLOCK_HISTORY_SIZE\n\n- Default: _automatic, based on chain ID_\n\nControls the number of past blocks to keep in memory to use as a basis for calculating a percentile gas price.\n\n### BLOCK_HISTORY_ESTIMATOR_BLOCK_DELAY\n\n- Default: _automatic, based on chain ID_\n\nControls the number of blocks that the block history estimator trails behind head.\nFor example, if this is set to 3, and we receive block 10, block history estimator will fetch block 7.\n\nCAUTION: You might be tempted to set this to 0 to use the latest possible\nblock, but it is possible to receive a head BEFORE that block is actually\navailable from the connected node via RPC, due to race conditions in the code of the remote ETH node. In this case you will get false\n\"zero\" blocks that are missing transactions.\n\n### BLOCK_HISTORY_ESTIMATOR_EIP1559_FEE_CAP_BUFFER_BLOCKS\n\n**ADVANCED**\n\n- Default: _gas bump threshold + 1 block_\n\nIf EIP1559 mode is enabled, this optional env var controls the buffer blocks to add to the current base fee when sending a transaction. By default, the gas bumping threshold + 1 block is used. It is not recommended to change this unless you know what you are doing.\n\n### BLOCK_HISTORY_ESTIMATOR_TRANSACTION_PERCENTILE\n\n- Default: `\"60\"`\n\nMust be in range 0-100.\n\nOnly has an effect if gas updater is enabled. Specifies percentile gas price to choose. E.g. if the block history contains four transactions with gas prices `[100, 200, 300, 400]` then picking 25 for this number will give a value of 200. If the calculated gas price is higher than `ETH_GAS_PRICE_DEFAULT` then the higher price will be used as the base price for new transactions.\n\nThink of this number as an indicator of how aggressive you want your node to price its transactions.\n\nSetting this number higher will cause the Chainlink node to select higher gas prices.\n\nSetting it lower will tend to set lower gas prices.\n\n## EVM/Ethereum Transaction Simulation\n\nChainlink nodes support transaction simulation for certain types of job. When this is enabled, transactions will be simulated using `eth_call` before initial send. If the transaction would revert, the transaction is marked as an error without being broadcast, potentially avoiding an expensive on-chain revert.\n\nThis can add a tiny bit of latency with an upper bound of 2s, but generally much shorter under good conditions. This will add marginally more load to the ETH client, because it adds an extra call for every transaction sent. However, it might help to save gas in some cases especially during periods of high demand by avoiding unnecessary reverts due to outdated round etc.\n\nThis option is EXPERIMENTAL and disabled by default.\n\nTo enable for FM or OCR:\n\n`FM_SIMULATE_TRANSACTIONs=true`\n`OCR_SIMULATE_TRANSACTIONS=true`\n\nTo enable in the pipeline, use the `simulate=true` option like so:\n\n```toml\nsubmit [type=ethtx to=\"0xDeadDeadDeadDeadDeadDeadDeadDead\" data=\"0xDead\" simulate=true]\n```\n\nUse at your own risk.\n\n#### FM_SIMULATE_TRANSACTIONS\n\nNOTE: This overrides the setting for _all_ chains, it is not currently possible to configure this on a per-chain basis.\n\n- Default: `\"false\"`\n\n`FM_SIMULATE_TRANSACTIONS` allows to enable transaction simulation for Flux Monitor.\n\n#### OCR_SIMULATE_TRANSACTIONS\n\nNOTE: This overrides the setting for _all_ chains, it is not currently possible to configure this on a per-chain basis.\n\n- Default: `\"false\"`\n\n`OCR_SIMULATE_TRANSACTIONS` allows to enable transaction simulation for OCR.\n\n## Job Pipeline and tasks\n\n### DEFAULT_HTTP_LIMIT\n\n- Default: `\"32768\"`\n\n`DEFAULT_HTTP_LIMIT` defines the maximum number of bytes for HTTP requests and responses made by `http` and `bridge` adapters.\n\n### DEFAULT_HTTP_TIMEOUT\n\n- Default: `\"15s\"`\n\n`DEFAULT_HTTP_TIMEOUT` defines the default timeout for HTTP requests made by `http` and `bridge` adapters.\n\n### FEATURE_EXTERNAL_INITIATORS\n\n- Default: `\"false\"`\n\nEnables the External Initiator feature. If disabled, `webhook` jobs can ONLY be initiated by a logged-in user. If enabled, `webhook` jobs can be initiated by a whitelisted external initiator.\n\n### JOB_PIPELINE_MAX_RUN_DURATION\n\n- Default: `\"10m\"`\n\n`JOB_PIPELINE_MAX_RUN_DURATION` is the maximum time that a single job run might take. If it takes longer, it will exit early and be marked errored. If set to zero, disables the time limit completely.\n\n### JOB_PIPELINE_REAPER_INTERVAL\n\n- Default: `\"1h\"`\n\nIn order to keep database size manageable, Chainlink nodes will run a reaper that deletes completed job runs older than a certain threshold age. `JOB_PIPELINE_REAPER_INTERVAL` controls how often the job pipeline reaper will run.\n\nSet to `0` to disable the periodic reaper.\n\n### JOB_PIPELINE_REAPER_THRESHOLD\n\n- Default: `\"24h\"`\n\n`JOB_PIPELINE_REAPER_THRESHOLD` determines the age limit for job runs. Completed job runs older than this will be automatically purged from the database.\n\n### JOB_PIPELINE_RESULT_WRITE_QUEUE_DEPTH\n\n- Default: `\"100\"`\n\nSome jobs write their results asynchronously for performance reasons such as OCR. `JOB_PIPELINE_RESULT_WRITE_QUEUE_DEPTH` controls how many writes will be buffered before subsequent writes are dropped.\n\nDo not change this setting unless you know what you are doing.\n\n## OCR\n\nThis section applies only if you are running off-chain reporting jobs.\n\n### FEATURE_OFFCHAIN_REPORTING\n\n- Default: `\"false\"`\n\nSet to `true` to enable OCR jobs.\n\n### OCR_KEY_BUNDLE_ID\n\n- Default: _none_\n\n`OCR_KEY_BUNDLE_ID` is the default key bundle ID to use for OCR jobs. If you have an OCR job that does not explicitly specify a key bundle ID, it will fall back to this value.\n\n### OCR_MONITORING_ENDPOINT\n\n- Default: _none_\n\nOptional URL of OCR monitoring endpoint.\n\n### OCR_TRANSMITTER_ADDRESS\n\n- Default: _none_\n\n`OCR_TRANSMITTER_ADDRESS` is the default sending address to use for OCR. If you have an OCR job that does not explicitly specify a transmitter address, it will fall back to this value.\n\n### P2P_NETWORKING_STACK\n\n- Default: `\"V1\"`\n\nOCR supports multiple networking stacks. `P2P_NETWORKING_STACK` chooses which stack to use. Possible values are:\n\n- `V1`\n- `V1V2` - Runs both stacks simultaneously. For each link with another peer, V2 networking will be preferred. If V2 does not work, the link will automatically fall back to V1. If V2 starts working again later, it will automatically be prefered again. This is useful for migrating networks without downtime. Note that the two networking stacks _must not_ be configured to bind to the same IP/port.\n- `V2`\n\nAll nodes in the OCR network should share the same networking stack.\n\n#### P2P_PEER_ID\n\n- Default: _none_\n\nThis environment variable is used for both Networking Stack V1 and V2.\n\nThe default peer ID to use for OCR jobs. If unspecified, uses the first available peer ID.\nExample: `P2P_PEER_ID=12D3KooWMHMRLQkgPbFSYHwD3NBuwtS1AmxhvKVUrcfyaGDASR4U`\n\n### Networking Stack V1\n\n:::caution\nDo not set environment variables for Networking Stack v1 if you are using [Networking Stack V2](#networking-stack-v2).\n:::\n\n#### P2P_ANNOUNCE_IP\n\n- Default: _none_\n\nShould be set as the externally reachable IP address of the Chainlink node.\nExample: `P2P_ANNOUNCE_IP=1.2.3.4`\n\n#### P2P_ANNOUNCE_PORT\n\n- Default: _none_\n\nShould be set as the externally reachable port of the Chainlink node.\nExample: `P2P_ANNOUNCE_PORT=1337`\n\n#### P2P_BOOTSTRAP_PEERS\n\n- Default: _none_\n\nDefault set of bootstrap peers.\nExample: `P2P_BOOTSTRAP_PEERS=/dns4/example.com/tcp/1337/p2p/12D3KooWMHMRLQkgPbFSYHwD3NBuwtS1AmxhvKVUrcfyaGDASR4U /ip4/1.2.3.4/tcp/9999/p2p/12D3KooWLZ9uTC3MrvKfDpGju6RAQubiMDL7CuJcAgDRTYP7fh7R`\n\n#### P2P_LISTEN_IP\n\n- Default: `\"0.0.0.0\"`\n\nThe default IP address to bind to.\n\n#### P2P_LISTEN_PORT\n\n- Default: _none_\n\nThe port to listen on. If left blank, the node randomly selects a different port each time it boots. It is highly recommended to set this to a static value to avoid network instability.\n\n#### P2P_PEER_ID\n\n- Default: _none_\n\nThis environment variable is used for both Networking Stack V1 and V2.\n\nThe default peer ID to use for OCR jobs. If unspecified, uses the first available peer ID.\nExample: `P2P_PEER_ID=12D3KooWMHMRLQkgPbFSYHwD3NBuwtS1AmxhvKVUrcfyaGDASR4U`\n\n### Networking Stack V2\n\n:::caution\nIf using the Networking Stack V2, you must unset the following [Networking Stack V1](#networking-stack-v1) configuration variables:\n\n- [P2P_ANNOUNCE_IP](#p2p_announce_ip)\n- [P2P_ANNOUNCE_PORT](#p2p_announce_port)\n- [P2P_BOOTSTRAP_PEERS](#p2p_bootstrap_peers)\n- [P2P_LISTEN_IP](#p2p_listen_ip)\n- [P2P_LISTEN_PORT](#p2p_listen_port)\n\n[`P2P_PEER_ID`](#p2p_peer_id) is used for both Networking Stack V1 and V2.\n:::\n\n#### P2PV2_ANNOUNCE_ADDRESSES\n\n- Default: _none_\n\n`P2PV2_ANNOUNCE_ADDRESSES` contains the addresses the peer will advertise on the network in host:port form as accepted by net.Dial. The addresses should be reachable by peers of interest.\nExample: `P2PV2_ANNOUNCE_ADDRESSES=1.2.3.4:9999 [a52d:0:a88:1274::abcd]:1337`\n\n#### P2PV2_BOOTSTRAPPERS\n\n- Default: _none_\n\n`P2PV2_BOOTSTRAPPERS` returns the default bootstrapper peers for libocr's v2 networking stack.\nExample: `P2PV2_BOOTSTRAPPERS=12D3KooWMHMRLQkgPbFSYHwD3NBuwtS1AmxhvKVUrcfyaGDASR4U@1.2.3.4:9999 12D3KooWLZ9uTC3MrvKfDpGju6RAQubiMDL7CuJcAgDRTYP7fh7R@[a52d:0:a88:1274::abcd]:1337 12D3KooWM55u5Swtpw9r8aFLQHEtw7HR4t44GdNs654ej5gRs2Dh@example.com:1234`\n\n#### P2PV2_LISTEN_ADDRESSES\n\n- Default: _none_\n\n`P2PV2_LISTEN_ADDRESSES` contains the addresses the peer will listen to on the network in `host:port` form as accepted by `net.Listen()`, but the host and port must be fully specified and cannot be empty. You can specify `0.0.0.0` (IPv4) or `::` (IPv6) to listen on all interfaces, but that is not recommended.\n\nExample: `P2PV2_LISTEN_ADDRESSES=1.2.3.4:9999 [a52d:0:a88:1274::abcd]:1337`\n\n## Keeper\n\nThese environment variables are used specificly for Chainlink Keepers. For most Chainlink Nodes, leave these values at their defaults and do not configure these environment variables.\n\n### KEEPER_CHECK_UPKEEP_GAS_PRICE_FEATURE_ENABLED\n\n:::caution\nDo not change this setting unless you know what you are doing.\n:::\n\n- Default: `\"false\"`\n\nUse this setting _only_ on Polygon networks.\n\nIncludes gas price in calls to `checkUpkeep()` when set to `true`.\n\n### KEEPER_GAS_PRICE_BUFFER_PERCENT\n\n:::caution\nDo not change this setting unless you know what you are doing.\n:::\n\n- Default: `\"20\"`\n\n`KEEPER_GAS_PRICE_BUFFER_PERCENT` adds the specified percentage to the gas price used for checking whether to perform an upkeep. Only applies in legacy mode (EIP-1559 off).\n\n### KEEPER_GAS_TIP_CAP_BUFFER_PERCENT\n\n:::caution\nDo not change this setting unless you know what you are doing.\n:::\n\n- Default: `\"20\"`\n\n`KEEPER_GAS_TIP_CAP_BUFFER_PERCENT` adds the specified percentage to the gas price used for checking whether to perform an upkeep. Only applies in EIP-1559 mode.\n\n### KEEPER_BASE_FEE_BUFFER_PERCENT\n\n:::caution\nDo not change this setting unless you know what you are doing.\n:::\n\n- Default: `\"20\"`\n\nAdds the specified percentage to the base fee used for checking whether to perform an upkeep. Applies only in EIP-1559 mode.\n\n### KEEPER_MAXIMUM_GRACE_PERIOD\n\n:::caution\nDo not change this setting unless you know what you are doing.\n:::\n\n- Default: `\"100\"`\n\nThe maximum number of blocks that a keeper will wait after performing an upkeep before it resumes checking that upkeep\n\n### KEEPER_REGISTRY_CHECK_GAS_OVERHEAD\n\n:::caution\nDo not change this setting unless you know what you are doing.\n:::\n\n- Default: `\"200000\"`\n\nThe amount of extra gas to provide checkUpkeep() calls to account for the gas consumed by the keeper registry.\n\n### KEEPER_REGISTRY_PERFORM_GAS_OVERHEAD\n\n:::caution\nDo not change this setting unless you know what you are doing.\n:::\n\n- Default: `\"300000\"`\n\nThe amount of extra gas to provide performUpkeep() calls to account for the gas consumed by the keeper registry\n\n### KEEPER_REGISTRY_SYNC_INTERVAL\n\n:::caution\nDo not change this setting unless you know what you are doing.\n:::\n\n- Default: `\"30m\"`\n\nThe interval in which the RegistrySynchronizer performs a full sync of the keeper registry contract it is tracking.\n\n### KEEPER_REGISTRY_SYNC_UPKEEP_QUEUE_SIZE\n\n:::caution\nDo not change this setting unless you know what you are doing.\n:::\n\n- Default: `\"10\"`\n\n`KEEPER_REGISTRY_SYNC_UPKEEP_QUEUE_SIZE` represents the maximum number of upkeeps that can be synced in parallel.\n\n### KEEPER_TURN_LOOK_BACK\n\n:::caution\nDo not change this setting unless you know what you are doing.\n:::\n\n- Default: `\"1000\"`\n\nThe number of blocks in the past to look back when getting a block for a turn.\n\n### KEEPER_TURN_FLAG_ENABLED\n\n:::caution\nDo not change this setting unless you know what you are doing.\n:::\n\n- Default: `\"false\"`\n\nEnables a new algorithm for how keepers take turns.\n\n## CLI Client\n\nThe environment variables in this section apply only when running CLI commands that connect to a remote running instance of a Chainlink node.\n\n### ADMIN_CREDENTIALS_FILE\n\n:::caution[Deprecated]\nThis environment variable is deprecated and will be removed in a future release. Use the `--admin-credentials-file FILE` CLI argument instead.\n:::\n\n- Default: `$ROOT/apicredentials`\n\n`ADMIN_CREDENTIALS_FILE` optionally points to a text file containing admin credentials for logging in. It is useful for running client CLI commands and has no effect when passed to a running node.\n\nThe file should contain two lines, the first line is the username and second line is the password.\ne.g.\n\n```text\nmyusername@example.com\nmysecurepassw0rd\n```\n\n### CLIENT_NODE_URL\n\n:::caution[Deprecated]\nThis environment variable is deprecated and will be removed in a future release. Use the `--remote-node-url URL` CLI argument instead.\n:::\n\n- Default: `\"http://localhost:6688\"`\n\nThis is the URL that you will use to interact with the node, including the GUI. Use this URL to connect to the GUI or to run commands remotely using the Chainlink CLI.\n\n### INSECURE_SKIP_VERIFY\n\n:::caution[Deprecated]\nThis environment variable is deprecated and will be removed in a future release. Use the `--insecure-skip-verify` CLI argument instead.\n:::\n\n- Default: `\"false\"`\n\n`INSECURE_SKIP_VERIFY` disables SSL certificate verification when connection to a Chainlink node using the remote client. For example, when executing most remote commands in the CLI. This is mostly useful for people who want to use TLS on localhost.\n\nIt is not recommended to change this unless you know what you are doing.\n\n## Notes on setting environment variables\n\n:::note\nSome environment variables require a duration. A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". Some examples:\n:::\n\n`10ms`\n`1h15m`\n`42m30s`\n\n:::note\nSome configuration variables require a file size. A file size string is an unsigned integer (123) or a float (12.3) followed by a unit suffix. Valid file size units are \"b\", \"kb\", \"mb\", \"gb\", and \"tb\". If the unit is omitted, it is assumed to be \"b\" (bytes). Capitalization does not matter. Some examples:\n:::\n\n`123gb`\n`1.2TB`\n`12345`\n"
    },
    {
      "title": "Connecting to a Remote Database",
      "headings": [
        {
          "depth": 2,
          "slug": "obtain-information-about-your-database",
          "text": "Obtain Information About Your Database"
        },
        {
          "depth": 2,
          "slug": "set-your--database_url-environment-variable",
          "text": "Set Your  DATABASE_URL Environment Variable"
        }
      ],
      "url": "/chainlink-nodes/connecting-to-a-remote-database",
      "section": "nodeOperator",
      "content": "This page will serve as a basic, vendor-neutral guide for setting up a PostgreSQL database and connecting your Chainlink node to it.\n\nPostgreSQL is a popular and secure database available on a variety of platforms. This guide will not show you how to create and set up a PostgreSQL database, however, some common guides can be found below:\n- [Amazon AWS](https://aws.amazon.com/getting-started/tutorials/create-connect-postgresql-db/)\n- [Azure](https://docs.microsoft.com/en-us/azure/postgresql/quickstart-create-server-database-portal)\n- [Docker](https://docs.docker.com/samples/library/postgres/)\n- [Google Cloud](https://cloud.google.com/community/tutorials/setting-up-postgres)\n\n## Obtain Information About Your Database\n\nIn order to connect to a remote database, you will need to obtain information about the database and server. Take note of the database's:\n- Server or IP\n- Port\n- Username\n- Password\n- Database name\n\nThe user must be the owner of the desired database. On first run, the migrations will create the tables necessary for the Chainlink node.\n\n## Set Your  DATABASE_URL Environment Variable\n\nBelow is an example for setting the `DATABASE_URL` environment variable:\n\n```text DATABASE_URL\nDATABASE_URL=postgresql://$USERNAME:$PASSWORD@$SERVER:$PORT/$DATABASE\n```\n\nYou will need to change the following placeholders to their real values:\n- `$USERNAME`: The database username (must be owner)\n- `$PASSWORD`: The user's password\n- `$SERVER`: The server name or IP address of the database server\n- `$PORT`: The port that the database is listening on\n- `$DATABASE`: The database to use for the Chainlink node\n"
    },
    {
      "title": "Enabling HTTPS Connections",
      "headings": [],
      "url": "/chainlink-nodes/enabling-https-connections",
      "section": "nodeOperator",
      "content": "\nThis guide will walk you through how to generate your own self-signed certificates for use by the Chainlink node. You can also substitute self-signed certificates with certificates of your own, like those created by <a href=\"https://letsencrypt.org/\" target=\"_blank\">Let's Encrypt</a>.\n\n:::tip[TLS]\nYou will need [OpenSSL](https://www.openssl.org) in order to generate your own self-signed certificates.\n:::\n\nCreate a directory `tls/` within your local Chainlink directory:\n\n```text Goerli\nmkdir ~/.chainlink-goerli/tls\n```\n\n```text Mainnet\nmkdir ~/.chainlink/tls\n```\n\nRun this command to create a `server.crt` and `server.key` file in the previously created directory:\n\n```shell Goerli\nopenssl req -x509 -out  ~/.chainlink-goerli/tls/server.crt  -keyout ~/.chainlink-goerli/tls/server.key \\\n  -newkey rsa:2048 -nodes -sha256 -days 365 \\\n  -subj '/CN=localhost' -extensions EXT -config <( \\\n   printf \"[dn]\\nCN=localhost\\n[req]\\ndistinguished_name = dn\\n[EXT]\\nsubjectAltName=DNS:localhost\\nkeyUsage=digitalSignature\\nextendedKeyUsage=serverAuth\")\n```\n\n```shell Mainnet\nopenssl req -x509 -out  ~/.chainlink/tls/server.crt  -keyout ~/.chainlink/tls/server.key \\\n  -newkey rsa:2048 -nodes -sha256 -days 365 \\\n  -subj '/CN=localhost' -extensions EXT -config <( \\\n   printf \"[dn]\\nCN=localhost\\n[req]\\ndistinguished_name = dn\\n[EXT]\\nsubjectAltName=DNS:localhost\\nkeyUsage=digitalSignature\\nextendedKeyUsage=serverAuth\")\n```\n\nNext, add the `TLS_CERT_PATH` and `TLS_KEY_PATH` environment variables to your `.env` file.\n\n```shell Shell\necho \"TLS_CERT_PATH=/chainlink/tls/server.crt\nTLS_KEY_PATH=/chainlink/tls/server.key\" >> .env\n```\n\nIf `CHAINLINK_TLS_PORT=0` is present in your `.env` file, remove it by running:\n\n```shell Shell\nsed -i '/CHAINLINK_TLS_PORT=0/d' .env\n```\n\nAlso remove the line that disables `SECURE_COOKIES` by running:\n\n```shell Shell\ncode\": \"sed -i '/SECURE_COOKIES=false/d' .env\n```\n\nFinally, update your run command to forward port 6689 to the container instead of 6688:\n\n```shell Goerli\ncd ~/.chainlink-goerli && docker run -p 6689:6689 -v ~/.chainlink-goerli:/chainlink -it --env-file=.env smartcontract/chainlink local n\n```\n\n```shell Mainnet\ncd ~/.chainlink && docker run -p 6689:6689 -v ~/.chainlink:/chainlink -it --env-file=.env smartcontract/chainlink local n\n```\n\nNow when running the node, you can access it by navigating to [https://localhost:6689](https://localhost:6689) if running on the same machine or with a ssh tunnel.\n"
    },
    {
      "title": "Optimizing EVM Performance",
      "headings": [
        {
          "depth": 2,
          "slug": "using-multiple-nodes",
          "text": "Using multiple nodes"
        },
        {
          "depth": 2,
          "slug": "automatic-load-balancing-and-failover",
          "text": "Automatic load balancing and failover"
        },
        {
          "depth": 2,
          "slug": "configuring-websocket-and-http-urls",
          "text": "Configuring websocket and HTTP URLs"
        },
        {
          "depth": 2,
          "slug": "increasing-transaction-throughput",
          "text": "Increasing transaction throughput"
        },
        {
          "depth": 3,
          "slug": "increase-eth_max_queued_transactions",
          "text": "Increase ETH_MAX_QUEUED_TRANSACTIONS"
        },
        {
          "depth": 3,
          "slug": "increase-eth_max_in_flight_transactions",
          "text": "Increase ETH_MAX_IN_FLIGHT_TRANSACTIONS"
        },
        {
          "depth": 2,
          "slug": "optimizing-rpc-nodes",
          "text": "Optimizing RPC nodes"
        },
        {
          "depth": 2,
          "slug": "remove-rejections-on-expensive-transactions",
          "text": "Remove rejections on expensive transactions"
        },
        {
          "depth": 3,
          "slug": "arbitrum-differences",
          "text": "Arbitrum differences"
        },
        {
          "depth": 2,
          "slug": "adjusting-minimum-outgoing-confirmations-for-high-throughput-jobs",
          "text": "Adjusting minimum outgoing confirmations for high throughput jobs"
        },
        {
          "depth": 2,
          "slug": "increase-orm_max_open_conns-and-orm_max_idle_conns",
          "text": "Increase ORM_MAX_OPEN_CONNS and ORM_MAX_IDLE_CONNS"
        }
      ],
      "url": "/chainlink-nodes/evm-performance-configuration",
      "section": "nodeOperator",
      "description": "Configure your Chainlink and EVM nodes for high throughput and reliability",
      "content": "\nThe most basic Chainlink node deployment uses the default configuration on only a single primary node with a websocket URL. This configuration is appropriate for small or simple workloads with only a few jobs that execute infrequently. If you need to run hundreds of jobs and thousands of transactions per hour, your Chainlink and RPC nodes will require a more advanced configuration. This guide explains how to configure Chainlink and your EVM nodes for high reliability and throughput.\n\n:::note[Note on Ethereum clients]\nEthereum clients have bugs. Much work is done on the Chainlink node software to mitigate bugs in various different RPC implementations. This guide helps you understand how to mitigate and work around these bugs.\n:::\n\n**Topics**\n\n- [Using multiple nodes](#using-multiple-nodes)\n- [Automatic load balancing and failover](#automatic-load-balancing-and-failover)\n- [Configuring websocket and HTTP URLs](#configuring-websocket-and-http-urls)\n- [Increasing transaction throughput](#increasing-transaction-throughput)\n  - [Increase ETH_MAX_QUEUED_TRANSACTIONS](#increase-eth_max_queued_transactions)\n  - [Increase ETH_MAX_IN_FLIGHT_TRANSACTIONS](#increasing-transaction-throughput)\n- [Optimizing RPC nodes](#optimizing-rpc-nodes)\n- [Remove rejections on expensive transactions](#remove-rejections-on-expensive-transactions)\n- [Adjusting minimum outgoing confirmations for high throughput jobs](#adjusting-minimum-outgoing-confirmations-for-high-throughput-jobs)\n- [Increase ORM_MAX_OPEN_CONNS and ORM_MAX_IDLE_CONNS](#increase-orm_max_open_conns-and-orm_max_idle_conns)\n\n## Using multiple nodes\n\n:::note[Use multiple nodes]\nProviding multiple primary nodes can improve performance and reliability.\n:::\n\nChainlink node version 1.3.0 and later support configurations with multiple primary nodes and send-only nodes with automatic liveness detection and failover. It is no longer necessary to run a load balancing failover RPC proxy between Chainlink and its EVM RPC nodes.\n\nIf you are using a failover proxy transparently for commercial node provider services, it will continue to work properly as long as the RPC you are talking to acts just like a standard RPC node.\n\nYou can have as many primary nodes as you want. Requests are evenly distributed across all nodes, so the performance increase will be linear as you add more nodes. If a node fails with no heads for several minutes or a failed liveness check, it is removed from the live pool and all requests are routed to one of the live nodes. If no live nodes are available, the system attempts to use nodes from the list of failed nodes at random.\n\nYou can configure as many send-only nodes as you want. Send-only nodes only broadcast transactions and do not process regular RPC calls. Specifying additional send-only nodes uses a minimum number of RPC calls and can help to include transactions faster. Send-only nodes also act as backup if your primary node starts to blackhole transactions.\n\n:::note[Transaction broadcasts]\nTransaction broadcasts are always sent to every primary node and send-only node. It is redundant to specify the same URL for a send-only node as an existing primary node, and it has no effect.\n:::\n\nHere is an example for how to specifiy the [`EVM_NODES` environment variable](/chainlink-nodes/configuration-variables/#evm_nodes):\n\n```shell\nexport EVM_NODES='\n[\n  {\n    \"name\": \"primary_1\",\n    \"evmChainId\": \"137\",\n    \"wsUrl\": \"wss://endpoint-1.example.com/ws\",\n    \"httpUrl\": \"http://endpoint-1.example.com/\",\n    \"sendOnly\": false\n  },\n  {\n    \"name\": \"primary_2\",\n    \"evmChainId\": \"137\",\n    \"wsUrl\": \"ws://endpoint-2.example.com/ws\",\n    \"httpUrl\": \"http://endpoint-2.example.com/\",\n    \"sendOnly\": false\n  },\n  {\n    \"name\": \"primary_3\",\n    \"evmChainId\": \"137\",\n    \"wsUrl\": \"wss://endpoint-3.example.com/ws\",\n    \"httpUrl\": \"http://endpoint-3.example.com/\",\n    \"sendOnly\": false\n  },\n  {\n    \"name\": \"sendonly_1\",\n    \"evmChainId\": \"137\",\n    \"httpUrl\": \"http://endpoint-4.example.com/\",\n    \"sendOnly\": true\n  },\n  {\n    \"name\": \"sendonly_2\",\n    \"evmChainId\": \"137\",\n    \"httpUrl\": \"http://endpoint-5.example.com/\",\n    \"sendOnly\": true\n  },\n]\n'\n```\n\nSend-only nodes are used for broadcasting transactions only, and must support the following RPC calls:\n\n- `eth_chainId`: Returns the chain ID\n- `eth_sendRawTransaction`: Both regular and batched\n- `web3_clientVersion`: Can return any arbitrary string\n\n## Automatic load balancing and failover\n\nChainlink node version 1.3.0 and above has built in failover and load balancing for primary nodes. Chainlink always uses round-robin requests across all primary nodes. Chainlink monitors when nodes go offline and stops routing requests to those nodes. If you don’t want to use Chainlink’s built-in failover, or you want to use an external proxy instead, you can disable failover completely using the following environment variables:\n\n```text\nNODE_NO_NEW_HEADS_THRESHOLD=0\nNODE_POLL_FAILURE_THRESHOLD=0\nNODE_POLL_INTERVAL=0\n```\n\n- [NODE_NO_NEW_HEADS_THRESHOLD](/chainlink-nodes/configuration-variables/#node_no_new_heads_threshold): Controls how long to wait receiving no new heads before marking a node dead\n- [NODE_POLL_FAILURE_THRESHOLD](/chainlink-nodes/configuration-variables/#node_poll_failure_threshold): Controls how many consecutive poll failures will disable a node\n- [NODE_POLL_INTERVAL](/chainlink-nodes/configuration-variables/#node_poll_interval): Controls how often the node will be polled\n\nBy default, these environment variables use the following values:\n\n```text\nNODE_NO_NEW_HEADS_THRESHOLD=\"3m\"\nNODE_POLL_FAILURE_THRESHOLD=\"5\"\nNODE_POLL_INTERVAL=\"10s\"\n```\n\n## Configuring websocket and HTTP URLs\n\n:::note[Note on URLs]\nIdeally, every primary node specifies an HTTP URL in addition to the websocket URL.\n:::\n\nIt is not recommended to configure primary nodes with _only_ a websocket URL. Routing all traffic over only a websocket can cause problems. As a best practices, every primary node must have both websocket and HTTP URLs specified. This allows Chainlink to route almost all RPC calls over HTTP, which tends to be more robust and reliable. The websocket URL is used only for subscriptions. Both URLs must point to the same node because they are bundled together and have the same liveness state.\n\nIf you enabled HTTP URLs on all your primary nodes, you can increase the values for the following environment variables:\n\n- [ETH_RPC_DEFAULT_BATCH_SIZE](/chainlink-nodes/configuration-variables/#eth_rpc_default_batch_size)\n- [BLOCK_HISTORY_ESTIMATOR_BATCH_SIZE](/chainlink-nodes/configuration-variables/#block_history_estimator_batch_size)\n- [ETH_LOG_BACKFILL_BATCH_SIZE](/chainlink-nodes/configuration-variables/#eth_log_backfill_batch_size)\n\nBy default, these config variables are set conservatively to avoid overflowing websocket frames. In HTTP mode, there are no such limitations. You might be able to improve performance with increased values similar to the following example:\n\n```text\nETH_RPC_DEFAULT_BATCH_SIZE=1000\nBLOCK_HISTORY_ESTIMATOR_BATCH_SIZE=100\nETH_LOG_BACKFILL_BATCH_SIZE=1000\n```\n\n:::caution\nDo not modify these values unless _all_ primary nodes are configured with HTTP URLs.\n:::\n\n## Increasing transaction throughput\n\nBy default, Chainlink has conservative limits because it must be compliant with standard out-of-the-box RPC configurations. This limits transaction throughput and the performance of some RPC calls.\n\nBefore you make any changes to your Chainlink configuration, you must ensure that _all_ of your primary and send-only nodes are configured to handle the increased throughput.\n\n:::note[Transaction throughput]\nThe best way to improve transaction throughput is to keep the default configuration and use multiple keys to transmit. Chainlink supports an arbitrary number of keys for any given chain. By default, tasks will round-robin through keys, but you can assign them individually to keys as well. Assigning tasks to keys is the preferred way to improve throughput because increasing the max number of in-flight requests can have complicated effects based on the mempool conmfigurations of other RPC nodes. If you are unable to distribute transmission load across multiple keys, try the following options to increase throughput.\n:::\n\n### Increase `ETH_MAX_QUEUED_TRANSACTIONS`\n\nYou can increase `ETH_MAX_QUEUED_TRANSACTIONS` if you require high burst throughput. Setting this variable to `0` disables any limit and ensures that no transaction are ever dropped. The default is set automatically based on the chain ID and usually is `250`. Overriding this value does not require any RPC changes and only affects the Chainlink side.\n\nThis represents the maximum number of unbroadcast transactions per key that are allowed to be enqueued before jobs start failing and refusing to send further transactions. It acts as a “buffer” for transactions waiting to be sent. If the buffer is exceeded, transactions will be permanently dropped.\n\nDo not set `ETH_MAX_QUEUED_TRANSACTIONS` too high. It acts as a sanity limit and the queue can grow unbounded if you are trying to send transactions consistently faster than they can be confirmed. If you have an issue that must be recovered later, you will have to churn through all the enqueued transactions. As a best practice, set `ETH_MAX_QUEUED_TRANSACTIONS` to the minimum possible value that supports your burst requirements or represents the maximum number of transactions that could be sent in a given 15 minute window.\n\n`ETH_MAX_QUEUED_TRANSACTIONS=10000` might be an example where very high burst throughput is needed.\n\n### Increase `ETH_MAX_IN_FLIGHT_TRANSACTIONS`\n\n`ETH_MAX_IN_FLIGHT_TRANSACTIONS` is another variable that you can increase if you require higher constant transaction throughput. Setting this variable to `0` disables any kind of limit. The default value is `16`.\n\n`ETH_MAX_IN_FLIGHT_TRANSACTIONS` controls how many transactions are allowed to be broadcast but unconfirmed at any one time. This is a form of transaction throttling.\n\nThe default is set conservatively at `16` because this is a pessimistic minimum that go-ethereum will hold without evicting local transactions. If your node is falling behind and not able to get transactions in as fast as they are created, you can increase this setting.\n\n:::caution\nIf you increase `ETH_MAX_IN_FLIGHT_TRANSACTIONS` you must make sure that your ETH node is configured properly otherwise you can get nonce-gapped and your node will get stuck.\n:::\n\n## Optimizing RPC nodes\n\nYou can also improve transaction throughput by optimizing RPC nodes. Configure your RPC node to **never** evict local transactions. For example, you can use the following example configurations:\n\n```text Go-Ethereum\n[Eth.TxPool]\nLocals = [\"0xYourNodeAddress1\", \"0xYourNodeAddress2\"]  # Add your node addresses here\nNoLocals = false # Disabled by default but might as well make sure\nJournal = \"transactions.rlp\" # Make sure you set a journal file\nRejournal = 3600000000000 # Default 1h, it might make sense to reduce this to e.g. 5m\nPriceBump = 10 # Must be set less than or equal to Chainlink's ETH_GAS_BUMP_PERCENT\nAccountSlots = 16 # Highly recommended to increase this, must be greater than or equal to Chainlink's ETH_MAX_IN_FLIGHT_TRANSACTIONS setting\nGlobalSlots = 4096 # Increase this as necessary\nAccountQueue = 64 # Increase this as necessary\nGlobalQueue = 1024 # Increase this as necessary\nLifetime = 10800000000000 # Default 3h, this is probably ok, you might even consider reducing it\n```\n\nIf you are using another RPC node, such as Besu or Nethermind, you must look at the documentation for that node to ensure that it will keep at least as many transactions in the mempool for the Chainlink node keys as you have set in `ETH_MAX_IN_FLIGHT_TRANSACTIONS`.\n\nThe recommended way to scale is to use more keys rather than increasing throughput for one key.\n\n## Remove rejections on expensive transactions\n\nBy default, go-ethereum rejects transactions that exceed its built-in RPC gas or txfee caps. Chainlink nodes fatally error transactions if this happens. If you ever exceed the caps, your node will miss transactions.\n\nDisable the default RPC gas and txfee caps on your ETH node in the config using the TOML snippet shown below, or by running go-ethereum with the command line arguments: `--rpc.gascap=0 --rpc.txfeecap=0`.\n\n```text\n[Eth]\nRPCGasCap = 0\nRPCTxFeeCap = 0.0\n```\n\n### Arbitrum differences\n\nArbitrum Nitro runs a fork of go-ethereum internally, but the original flags are not valid. These modified flags are equivalent:\n\n`--node.rpc.gas-cap 0 --node.rpc.tx-fee-cap 0`\n\n## Adjusting minimum outgoing confirmations for high throughput jobs\n\n`ethtx` tasks have a `minConfirmations` label that can be adjusted. You can get a minor performance boost if you set this label to `0`. Use this if you do not need to wait for confirmations on your `ethtx` tasks. For example, if you don't need the receipt or don’t care about failing the task if the transaction reverts on-chain, you can set `minConfirmations` to `0`.\n\nSet the task label similiarly to the following example:\n\n`foo [type=ethtx minConfirmations=0 ...]`\n\nNote that this only affects the presentation of jobs, and whether they are marked as errored or not. It has no effect on inclusion of the transaction, which is handled with separate logic.\n\n:::caution\nDo not confuse `minConfirmations` set on the task with transaction inclusion. The transaction manager always attempts to get every transaction mined up to `EVMFinalityDepth`. `minConfirmations` on the task is a task-specific view of when the transaction that can be considered final, which might be fewer blocks than `EVMFinalityDepth`.\n:::\n\n## Increase `ORM_MAX_OPEN_CONNS` and `ORM_MAX_IDLE_CONNS`\n\nChainlink can be configured to allow more concurrent database connections than the default. This might improve performance, but be careful not to exceed postgres connection limits. These variables have the following default values:\n\n```text\nORM_MAX_OPEN_CONNS=20\nORM_MAX_IDLE_CONNS=10\n```\n\nYou might increase these values to `ORM_MAX_OPEN_CONNS=50` and `ORM_MAX_IDLE_CONNS=25` if you have a large and powerful database server with high connection count headroom.\n"
    },
    {
      "title": "External Adapters in Solidity",
      "headings": [
        {
          "depth": 3,
          "slug": "using-parameters-with-an-external-adapter",
          "text": "Using parameters with an External Adapter"
        },
        {
          "depth": 3,
          "slug": "using-the-copy-adapter-with-an-external-adapter",
          "text": "Using the Copy adapter with an External Adapter"
        }
      ],
      "url": "/chainlink-nodes/external-adapters/contract-creators",
      "section": "nodeOperator",
      "content": "\n### Using parameters with an External Adapter\n\nAs a contract creator, using an external adapter is no different than creating a request for any other job spec. You will simply need to know which parameters are supported by the adapter. Notice the method below uses `req.add` to create a run parameter for each required value.\n\n```javascript\nfunction requestMWAPrice(string _coin, string _market)\n  public\n  onlyOwner\n  returns (bytes32 requestId)\n{\n  Chainlink.Request memory req = buildChainlinkRequest(SPEC_ID, this, this.fulfill.selector);\n  req.add(\"endpoint\", \"mwa-historic\");\n  req.add(\"coin\", _coin);\n  req.add(\"market\", _market);\n  req.add(\"copyPath\", \"data.-1.1\");\n  req.addInt(\"times\", 100);\n  requestId = sendChainlinkRequest(req, oraclePayment);\n}\n```\n\n### Using the Copy adapter with an External Adapter\n\nThe [Copy](/chainlink-nodes/oracle-jobs/v1/adapters/#copy) adapter allows for the same functionality of the [JsonParse](/chainlink-nodes/oracle-jobs/v1/adapters/#jsonparse) adapter but for getting data from the external adapter's response.\n\nFor example, if an adapter returns JSON data like what is below:\n\n```json\n{\n  \"firstValue\": \"SomeValue\",\n  \"details\": {\n    \"close\": \"100\",\n    \"open\": \"110\",\n    \"current\": \"111\"\n  },\n  \"other\": \"GetData\"\n}\n```\n\nAnd you wanted the value in the field \"open\", you would specify the path for the adapter to walk through the JSON object to your desired field.\n\n```json\n\"copyPath\": [\"details\", \"open\"]\n```\n\nIn Solidity, this would look like:\n\n```javascript\nstring[] memory path = new string[](2);\npath[0] = \"details\";\npath[1] = \"open\";\nrun.addStringArray(\"copyPath\", path);\n```\n\nOr you can use dot-notation <a href=\"https://jsonpath.com/\">JSONPath</a> to simplify it:\n\n```javascript\nrun.add(\"copyPath\", \"details.open\")\n```\n"
    },
    {
      "title": "Building External Adapters",
      "headings": [
        {
          "depth": 3,
          "slug": "requesting-data",
          "text": "Requesting Data"
        },
        {
          "depth": 4,
          "slug": "examples",
          "text": "Examples"
        },
        {
          "depth": 3,
          "slug": "returning-data",
          "text": "Returning Data"
        },
        {
          "depth": 3,
          "slug": "returning-errors",
          "text": "Returning Errors"
        },
        {
          "depth": 3,
          "slug": "asynchronous-callbacks",
          "text": "Asynchronous callbacks"
        },
        {
          "depth": 3,
          "slug": "example",
          "text": "Example"
        }
      ],
      "url": "/chainlink-nodes/external-adapters/developers",
      "section": "nodeOperator",
      "content": "\nDevelopers of external adapters will need to know how the Chainlink node requests data from it, and how the data should be formatted for a response. External adapters can be written in any language, and even run on separate machines, to include serverless functions.\n\nHere is our external adapters monorepo which contains many examples to help get you started:\n\n- <a href=\"https://github.com/smartcontractkit/external-adapters-js\">Official Chainlink External Adapter Monorepo (NodeJS)</a>\n\n### Requesting Data\n\nWhen an external adapter receives a request from the Chainlink node, the JSON payload will include the following objects:\n\n- `data` (guaranteed to be present but may be empty)\n- `meta` (optional, depends on job type)\n- `responseURL` (optional, will be supplied if job supports asynchronous callbacks)\n- `id` (optional, can be nice to use for EA logging to help debug job runs)\n\n#### Examples\n\n```json\n{ \"data\": {} }\n```\n\n```json\n{\n  \"data\": {},\n  \"responseURL\": \"http://localhost:6688/v2/runs/278c97ffadb54a5bbb93cfec5f7b5503\"\n}\n```\n\n```json\n{\n  \"data\": { \"foo\": 42 },\n  \"meta\": { \"bar\": \"baz\" },\n  \"id\": \"2d38ecdb-975c-4f99-801c-b916a429947c\"\n}\n```\n\nAdditional data may be specified in the spec to be utilized by the adapter. This can be useful for requesting data from a REST endpoint where the keys and values can be specified by the requester. For example, if the REST endpoint supports the following:\n\n```text\nhttps://example.com/api/:parent/:child\n```\n\nThen the payload to the external adapter would need:\n\n```json\n{\n  \"data\": {\n    \"parent\": \"myParentValue\",\n    \"child\": \"myChildValue\"\n  }\n}\n```\n\nThe values for `:parent` and `:child` can be used within the adapter to dynamically build the URL for the request. This same concept can also be applied to URLs with query values. For example:\n\n```text\nhttps://example.com/api/?parent=myParentValue&child=myChildValue\n```\n\n### Returning Data\n\nWhen the external adapter wants to return data immediately, it must include `data` in the returned JSON.\n\nAn example of the response data can look like:\n\n```json\n{\n  \"data\": {\n    \"symbol\": \"ETH-USD\",\n    \"last\": {\n      \"price\": 467.85,\n      \"size\": 0.01816561,\n      \"timestamp\": 1528926483463\n    }\n  }\n}\n```\n\n### Returning Errors\n\nIf the endpoint gave a known error, the `error` field should be included in the external adapter's response back to the Chainlink node.\n\nAn example of what the error response payload should look like:\n\n```json\n{\n  \"error\": \"The endpoint is under maintenance.\"\n}\n```\n\n### Asynchronous callbacks\n\nSome job types support external callbacks. When supported, Chainlink will provide a non-null `responseURL` alongside the request payload.\n\nIf the external adapter wants to return data immediately it can simply respond with data directly as normal.\n\nIf the external adapter wants to use the response URL to send data later, it may initially return a response like this:\n\n```json\n{\n  \"pending\": true\n}\n```\n\nIn this case, the job run on Chainlink side will be put into a `pending` state, awaiting data which can be delivered at a later date.\n\nWhen the external adapter is ready, it should callback to the node to resume the JobRun using an HTTP PATCH request to the `responseURL` field. This will resume the job on the Chainlink side.\n\n```json\n{\n  \"data\": {\n    \"symbol\": \"ETH-USD\",\n    \"last\": {\n      \"price\": 467.85,\n      \"size\": 0.01816561,\n      \"timestamp\": 1528926483463\n    }\n  }\n}\n```\n\nOr, for the error case:\n\n```json\n{\n  \"error\": \"something went wrong\"\n}\n```\n\n### Example\n\nHere is a complete example of a simple external adapter written as a serverless function. This external adapter takes two input fields, inserts the API key as a header, and returns the resulting payload to the node.\n\n```javascript External Adapter\nlet request = require(\"request\")\n\nexports.myExternalAdapter = (req, res) => {\n  const url = \"https://some-api.example.com/api\"\n  const coin = req.body.data.coin || \"\"\n  const market = req.body.data.market || \"\"\n  let requestObj = {\n    coin: coin,\n    market: market,\n  }\n  let headerObj = {\n    API_KEY: \"abcd-efgh-ijkl-mnop-qrst-uvwy\",\n  }\n  let options = {\n    url: url,\n    headers: headerObj,\n    qs: requestObj,\n    json: true,\n  }\n\n  request(options, (error, response, body) => {\n    if (error || response.statusCode >= 400) {\n      let errorData = {\n        jobRunID: req.body.id,\n        status: \"errored\",\n        error: body,\n      }\n      res.status(response.statusCode).send(errorData)\n    } else {\n      let returnData = {\n        jobRunID: req.body.id,\n        data: body,\n      }\n      res.status(response.statusCode).send(returnData)\n    }\n  })\n}\n```\n\nIf given \"ETH\" as the value for `coin` and \"USD\" as the value for `market`, this external adapter will build the following URL for the request:\n\n```text\nhttps://some-api.example.com/api?coin=ETH&market=USD\n```\n\nThe headers in this case would include the API key, but that could just as easily be added to the `requestObj` if an API requires the key in the URL.\n"
    },
    {
      "title": "External Adapters Introduction",
      "headings": [],
      "url": "/chainlink-nodes/external-adapters/external-adapters",
      "section": "nodeOperator",
      "content": "\nExternal adapters are how Chainlink enables easy integration of custom computations and specialized APIs. External adapters are services which the core of the Chainlink node communicates via its API with a simple JSON specification. If you want a step by step, be sure to check out our [blog post](https://blog.chain.link/build-and-use-external-adapters/).\n\nInformation on external adapters is broken up into three main categories: contract creators, developers, and node operators.\n\n- [Contract Creators](/chainlink-nodes/external-adapters/contract-creators/) will need to know how to specify an external adapter in their request for external data.\n- [Developers](/chainlink-nodes/external-adapters/developers/) will need to know how to implement an external adapter for an API.\n- [Node Operators](/chainlink-nodes/external-adapters/node-operators/) will need to know how to add an external adapter to their node so that they can provide specialized services to smart contracts.\n"
    },
    {
      "title": "Bridges: Adding External Adapters to Nodes",
      "headings": [
        {
          "depth": 2,
          "slug": "testing-external-adapters-and-bridges",
          "text": "Testing External Adapters and Bridges"
        }
      ],
      "url": "/chainlink-nodes/external-adapters/node-operators",
      "section": "nodeOperator",
      "content": "\nYou can add external adapters to a Chainlink node by creating a bridge in the Node Operators Interface. Each bridge must have a unique name and a URL for the external adapter. If a job has a [Bridge Task](/chainlink-nodes/oracle-jobs/task-types/task_bridge/), the node searches for a bridge by name and uses that bridge as your external adapter. Bridge names are case insensitive.\n\nTo create a bridge on the node, go to the **Create Bridge** tab in the Node Operators Interface. Specify a name for the bridge, the URL for your external adapter, and optionally specify the minimum contract payment and number of confirmations for the bridge. Minimum contract payment is a fee paid in LINK for the Chainlink node making a call to the external adapter via the bridge. This fee is in addition to the fee specified at the global node level for processing job requests.\n\n![Node UI New Bridge Screen](/files/ea-new-bridge.png)\n\nThe bridge name must be unique to the local node. The bridge URL is the URL of your external adapter, which can be local or on a separate machine.\n\nTo add jobs that use the bridge, add a [Bridge Task](/chainlink-nodes/oracle-jobs/task-types/task_bridge/) to your job. The `bridge` task defined in the example below is defined as `fetch` and the name of the bridge is `soccer-data`.\n\n```toml\ntype = \"directrequest\"\nschemaVersion = 1\nname = \"Soccer-Data-EA\"\ncontractAddress = \"0xA74F1E1Bb6204B9397Dac33AE970E68F8aBC7651\"\nmaxTaskDuration = \"0s\"\nobservationSource = \"\"\"\n    decode_log   [type=ethabidecodelog\n                  abi=\"OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)\"\n                  data=\"$(jobRun.logData)\"\n                  topics=\"$(jobRun.logTopics)\"]\n\n    decode_cbor  [type=cborparse data=\"$(decode_log.data)\"]\n    fetch        [type=bridge name=\"soccer-data\" requestData=\"{\\\\\"id\\\\\": $(jobSpec.externalJobID), \\\\\"data\\\\\": { \\\\\"playerId\\\\\": $(decode_cbor.playerId)}}\"]\n    parse        [type=jsonparse path=\"data,0,Games\" data=\"$(fetch)\"]\n    encode_data  [type=ethabiencode abi=\"(uint256 value)\" data=\"{ \\\\\"value\\\\\": $(parse) }\"]\n    encode_tx    [type=ethabiencode\n                  abi=\"fulfillOracleRequest(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes32 data)\"\n                  data=\"{\\\\\"requestId\\\\\": $(decode_log.requestId), \\\\\"payment\\\\\": $(decode_log.payment), \\\\\"callbackAddress\\\\\": $(decode_log.callbackAddr), \\\\\"callbackFunctionId\\\\\": $(decode_log.callbackFunctionId), \\\\\"expiration\\\\\": $(decode_log.cancelExpiration), \\\\\"data\\\\\": $(encode_data)}\"\n                 ]\n    submit_tx    [type=ethtx to=\"0xA74F1E1Bb6204B9397Dac33AE970E68F8aBC7651\" data=\"$(encode_tx)\"]\n\n    decode_log -> decode_cbor -> fetch -> parse -> encode_data -> encode_tx -> submit_tx\n\"\"\"\n```\n\nSince `soccer-data` is a bridge task, each node that has this job defined needs to have a bridge defined with the name `soccer-data` in order to sucessfully fulfill the request.\n\n## Testing External Adapters and Bridges\n\nThe easiest way to test if your external adapter is working is to use a [Webhook Job](/chainlink-nodes/oracle-jobs/job-types/webhook/).\n\nAs an example, assume you have an external adapter named `soccer-data` that is registered in the `bridges` section and it takes one parameter named `playerId`. In solidity, you would pass the parameter with the following request:\n\n```solidity\nrequest.add(\"playerId\",\"12345678\")\n```\n\nHow can you test the adapter on your node?\n\nThe easiest way is to setup a [Webhook Job](/chainlink-nodes/oracle-jobs/job-types/webhook/) that uses the external adapter, and manually set the parameter.\n\n:::note\nYou might need to set the [configuration variable](/chainlink-nodes/configuration-variables/) `FEATURE_WEBHOOK_V2=true` in your `.env` file.\n:::\n\n```toml\ntype = \"webhook\"\nschemaVersion = 1\nname = \"Soccer-Data-EA-Web\"\nobservationSource = \"\"\"\nfetch        [type=bridge name=\"soccer-data\" requestData=\"{\\\\\"id\\\\\": \\\\\"0\\\\\", \\\\\"data\\\\\": { \\\\\"playerId\\\\\": \\\\\"12345678\\\\\"}}\"]\n\n    fetch\n\"\"\"\n```\n\nAdding the following into the TOML spec manually sets the parameters passed into the bridge task. It is equivalent to using `request.add` as shown above or adding the data with the `--d` flag if you're using [curl](https://curl.se/).\n\n```json\nrequestData=\"{\\\\\"id\\\\\": \\\\\"0\\\\\", \\\\\"data\\\\\": { \\\\\"playerId\\\\\": \\\\\"12345678\\\\\"}}\"\n```\n\nThere will be a big `Run` button on your job definition, which you can use to kick off the job.\n\n![Node UI Click Run](/files/webhook-run.png)\n"
    },
    {
      "title": "Building External Initiators",
      "headings": [
        {
          "depth": 2,
          "slug": "json-jobs-removed",
          "text": "JSON jobs (REMOVED)"
        }
      ],
      "url": "/chainlink-nodes/external-initiators/building-external-initiators",
      "section": "nodeOperator",
      "content": "\nAn external initiator can trigger a run for any webhook job that it has been linked to.\n\nThe URL for triggering a run is such:\n\n```shell\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"myKey\": \"myVal\"}' http://localhost:6688/v2/jobs/<job external UUID>/runs\n```\n\nYou will need to specify two headers:\n\n1. \"X-Chainlink-EA-AccessKey\"\n1. \"X-Chainlink-EA-Secret\"\n\n## JSON jobs (REMOVED)\n\n:::caution[v1 Jobs are removed]\nThe initiators for v1 Jobs are removed for Chainlink nodes running version 1.0.0 and later. Use [v2 job types](/chainlink-nodes/oracle-jobs/jobs) instead.<br/>\nSee the [v2 jobs migration page](/chainlink-nodes/oracle-jobs/migration-v1-v2) to learn how to migrate to v2 jobs.\n:::\n\nWe will be using the <a href=\"https://github.com/smartcontractkit/external-initiator\">Chainlink external initiator</a> repo for reference. You can see some examples of existing initiators in the <a href=\"https://github.com/smartcontractkit/external-initiator/tree/master/blockchain\" >blockchain</a> folder.\n\nExternal initiators are simple web initiators that can be activated by any job instead of just one. To set one up, you need to have a service similar to an external adapter that sends an `HTTPPost` message runs API call to your chainlink node service. Here is a sample URL for a web job could look like:\n\n```shell\ncurl -b cookiefile -X POST -H \"Content-Type: application/json\" --data '{\"myKey\":\"myVal\"}' http://localhost:6688/v2/jobs/%s/runs\n```\n\nWhere `%s` is the jobId.\n\nExternal initiators make the same API call, with 2 added headers:\n\n1. \"X-Chainlink-EA-AccessKey\"\n1. \"X-Chainlink-EA-Secret\"\n\nThese are keys generated when you register your external initiator with your node.\n\nTriggering a run through an external initiator is as simple as making this API call to your node. All jobs with this EI configured will then be kicked off in this way. A simple external initiator in psedo code could look like this:\n\n```text\nwhile(True):\n    send_api_call_with_external_initiator_access_key_headers()\n    sleep(4)\n```\n\nAnd have this job run on the same machine as your node.\n"
    },
    {
      "title": "Adding External Initiators to Nodes",
      "headings": [
        {
          "depth": 2,
          "slug": "creating-an-external-initiator",
          "text": "Creating an external initiator"
        },
        {
          "depth": 2,
          "slug": "deleting-an-external-initiator",
          "text": "Deleting an external initiator"
        },
        {
          "depth": 2,
          "slug": "listing-external-initiators",
          "text": "Listing external initiators"
        }
      ],
      "url": "/chainlink-nodes/external-initiators/external-initiators-in-nodes",
      "section": "nodeOperator",
      "content": "\n:::note\nExternal initiators are disabled on nodes by default. Set the `FEATURE_EXTERNAL_INITIATORS=true` [configuration variable](/chainlink-nodes/configuration-variables/#feature_external_initiators) to enable this feature.\n:::\n\n## Creating an external initiator\n\nTo create an external initiator you must use the remote API. You can do this yourself, like so:\n\n```text\nPOST http://<your chainlink node>/v2/external_initiators -d <PAYLOAD>\n```\n\nwhere payload is a JSON blob that contains:\n\n```json\n{\n  \"name\": <MANDATORY UNIQUE NAME>,\n  \"url\": <OPTIONAL EXTERNAL INITIATOR URL>\n}\n```\n\nIf a URL is provided, Chainlink will notify this URL of added and deleted jobs that can be triggered by this external initiator. This allows the external initiator to program in certain actions e.g. subscribing/unsubscribing to logs based on the job, etc.\n\nOn creation:\n\n```text\nPOST <URL> -d {\"jobId\": <job external UUID>, \"type\": <name of external initiator>, \"params\": <optional arbitrary JSON specified at job creation time>}\n```\n\nOn deletion:\n\n```text\nDELETE <URL>/<job external UUID>\n```\n\nYou can use the chainlink client for convenience to access this API.\n\nEnter the [Chainlink nodes CLI](/chainlink-nodes/miscellaneous/#execute-commands-running-docker) and run the following command\n\n```shell\nchainlink initiators create <NAME> <URL>\n```\n\n`NAME`: The name you want to use for your external initiator.\n`URL`: The URL of your jobs endpoint. ie: `http://172.17.0.1:8080/jobs`\n\nThis will give you the environment variables you need to run your external initiator. Copy the output. It will look something like this:\n\n```\n║ ei_name  ║ http://localhost:8080/jobs ║ a4846e85727e46b48889c6e28b555696 ║ dnNfNhiiCTm1o6l+hGJVfCtRSSuDfZbj1VO4BkZG3E+b96lminE7yQHj2KALMAIk ║ iWt64+Q9benOf5JuGwJtQnbByN9rtHwSlElOVpHVTvGTP5Zb2Guwzy6w3wflwyYt ║ 56m38YkeCymYU0kr4Yg6x3e98CyAu+37y2+kMO2AL9lRMjA3hRA1ejFdG9UfFCAE\n```\n\nBe sure to save these values, since the secrets cannot be shown again.\n\nYou now can use `ei_name` as an initiator in your jobspec.\n\nSet a new `.env` file, and add the respective values\n\n```text\nEI_DATABASEURL=postgresql://$USERNAME:$PASSWORD@$SERVER:$PORT/$DATABASE\nEI_CHAINLINKURL=http://localhost:6688\nEI_IC_ACCESSKEY=<INSERT KEY>\nEI_IC_SECRET=<INSERT KEY>\nEI_CI_ACCESSKEY=<INSERT KEY>\nEI_CI_SECRET=<INSERT KEY>\n```\n\nAt the time of writing, the output should be in order. For example, in from the output above, `EI_IC_ACCESSKEY=a4846e85727e46b48889c6e28b555696` and so on.\n\nStart your EI.\n\nWhatever code you used to run your external initiator, pass it the new headers created for the access headers, and then start your service. An easy way to do this is by having it read from the `.env` file you just created. Check out the <a href=\"https://github.com/Conflux-Network-Global/demo-cfx-chainlink\" target=\"_blank\">Conflux External initiator</a> for an example.\n\nYou'll want to test that your job is running properly. Meeting the criteria of your EI and then checking to see if a sample job kicks off is the best way to test this.\n\nTo try a real-life example, feel free to follow along with the <a href=\"https://www.youtube.com/watch?v=J8oJEp4qz5w\">Conflux EI demo</a>.\n\n<a href=\"https://github.com/smartcontractkit/chainlink/wiki/External-Initiators\">Additional external initiator reference</a>\n\n:::note\nThe External Initiator can only initiate [webhook jobs](/chainlink-nodes/oracle-jobs/job-types/webhook) that have been linked to it. Trying to initiate a job that is not linked will give an unauthorised error.\n:::\n\n## Deleting an external initiator\n\nTo delete an external initiator you must use the remote API. You can do this yourself, like so:\n\n```text\nDELETE http://<your chainlink node>/v2/external_initiators/<external initiator name>\n```\n\nYou can alternatively use the chainlink client for convenience:\n\n```shell\nchainlink initiators destroy <NAME>\n```\n\n## Listing external initiators\n\nTo see your installed external initiators:\n\n```text\nGET http://<your chainlink node>/v2/external_initiators?size=100&page=1\n```\n\nOr, using the chainlink client:\n\n```shell\nchainlink initiators list\n```\n"
    },
    {
      "title": "Introduction",
      "headings": [],
      "url": "/chainlink-nodes/external-initiators/external-initiators-introduction",
      "section": "nodeOperator",
      "content": "\nExternal initiators allow jobs in a node to be initiated depending on some external condition. The ability to create and add external initiators to Chainlink nodes enables blockchain agnostic cross-chain compatibility.\n\n:::note\nAt this time of writing, external initiators do not show up in the bridges tab. However, they act exactly the same as if they did.\n:::\n\n:::note\nExternal initiators are disabled on nodes by default. Set the `FEATURE_EXTERNAL_INITIATORS=true` [configuration variable](/chainlink-nodes/configuration-variables/#feature_external_initiators) to enable this feature.\n:::\n\nInitiator Bridges handle the authentication to and from the External Initiator and where to send the messages. When creating a Bridge two parameters are required:\n\nOnly the [webhook](/chainlink-nodes/oracle-jobs/job-types/webhook/) job type can be initiated using an External Initiator.\n\nThe external initiator must be created before the webhook job, and must be referenced by name (whitelisted) in order for that external initiator to be allowed to trigger the given webhook job.\n\nWhen the External Initiator is created it generates two pairs of credentials: Outgoing and Incoming. The Outgoing Access Key and Secret are used to authenticate messages sent from the Core to the External Initiator. The Incoming Access Key and Secret are used to authenticate messages sent from the External Initiator to the Core.\n\nThen, once you've created the name, bridge, and have the correct access keys for the URL, you can proceed to use the external initiator as if it's a regular initiator in future job specs.\n\nFor how to create an external initiator see [adding external initiators to nodes](/chainlink-nodes/external-initiators/external-initiators-in-nodes).\n"
    },
    {
      "title": "Fulfilling Requests",
      "headings": [
        {
          "depth": 2,
          "slug": "requirements",
          "text": "Requirements"
        },
        {
          "depth": 2,
          "slug": "address-types",
          "text": "Address Types"
        },
        {
          "depth": 2,
          "slug": "deploy-your-own-oracle-contract",
          "text": "Deploy your own Oracle contract"
        },
        {
          "depth": 2,
          "slug": "add-your-node-to-the-oracle-contract",
          "text": "Add your node to the Oracle contract"
        },
        {
          "depth": 2,
          "slug": "add-a-job-to-the-node",
          "text": "Add a job to the node"
        },
        {
          "depth": 2,
          "slug": "create-a-request-to-your-node",
          "text": "Create a request to your node"
        },
        {
          "depth": 2,
          "slug": "retrieving-other-types-of-data",
          "text": "Retrieving other types of data"
        },
        {
          "depth": 2,
          "slug": "withdrawing-link",
          "text": "Withdrawing LINK"
        }
      ],
      "url": "/chainlink-nodes/fulfilling-requests",
      "section": "nodeOperator",
      "description": "Deploy your own Oracle contract and add jobs to your node so that it can provide data to smart contracts.",
      "content": "\nWith your own Oracle contract, you can use your own node to fulfill requests. This guide will show you how to deploy your own Oracle contract and add jobs to your node so that it can provide data to smart contracts.\n\nChainlink nodes can fulfill requests from open or unauthenticated APIs without the need for [External Adapters](/chainlink-nodes/external-adapters/external-adapters/) as long as you've [added the jobs](#add-a-job-to-the-node) to the node. For these requests, requesters supply the URL to the open API that they want each node to retrieve. The Chainlink node will use [tasks](/chainlink-nodes/oracle-jobs/task-types/tasks/) to fulfill the request.\n\nSome APIs require authentication by providing request headers for the operator's API key, which the Chainlink node supports. If you would like to provide access to an API that requires authentication, you must create a job that is specific for that API either using an external adapter or by using the parameters of the [HTTP task](/chainlink-nodes/oracle-jobs/task-types/task_http).\n\n## Requirements\n\nBefore you begin this guide, complete the following tasks to make sure you have all of the tools that you need:\n\n- [Set up MetaMask](/getting-started/deploy-your-first-contract/#install-and-fund-your-metamask-wallet) and [obtain testnet LINK](/resources/acquire-link/).\n- Configure an Ethereum client with an active websocket connection. Either [Run an Ethereum Client](/chainlink-nodes/run-an-ethereum-client/) yourself or use an [External Service](/chainlink-nodes/run-an-ethereum-client/#external-services) that your Chainlink Node can access.\n- [Run a Chainlink Node](/chainlink-nodes/running-a-chainlink-node/) and connect it to a [supported database](/chainlink-nodes/connecting-to-a-remote-database/).\n- Fund the Ethereum address that your Chainlink node uses. You can find the address in the node Operator GUI under the **Keys** tab. The address of the node is the `Regular` type. You can obtain test ETH from several [faucets](/resources/link-token-contracts/).\n\n## Address Types\n\nYour node works with several different types of addresses. Each address type has a specific function:\n\n- **Node address:** This is the address for your Chainlink node wallet. The node requires native blockchain tokens at all times to respond to requests. For this example, the node uses ETH. When you start a Chainlink node, it automatically generates this address. You can find this address on the Node Operator GUI under Keys > Account addresses.\n- **Oracle contract address:** This is the address for contracts like `Operator.sol` or `Oracle.sol` that are deployed to a blockchain. Do not fund these addresses with native blockchain tokens such as ETH. When you make API call requests, the funds pass through this contract to interact with your Chainlink node. This will be the address that smart contract developers point to when they choose a node for an API call.\n- **Admin wallet address:** This is the address that owns your `Operator.sol` or `Oracle.sol` contract addresses. If you're on OCR, this is the wallet address that receives LINK tokens.\n\n## Deploy your own Oracle contract\n\n1. Go to Remix and [open the `Oracle.sol` smart contract](https://remix.ethereum.org/#url=https://docs.chain.link/samples/ChainlinkNodes/Oracle.sol). The contents of this file will be very minimal.\n\n1. On the **Compile** tab, click the **Compile** button for `Oracle.sol`. Remix automatically selects the compiler version and language from the `pragma` line unless you select a specific version manually.\n\n1. On the **Deploy and Run** tab, configure the following settings:\n\n   - Select \"Injected Provider\" as your **Environment**. The Javascript VM environment cannot access your oracle node.\n   - Select the \"Oracle\" contract from the **Contract** menu.\n   - Copy the [LINK token contract address](/resources/link-token-contracts/) for the network you are using and paste it into the `address_link` field next to the **Deploy** button. Use one of the following network addresses:\n\n     ```text Goerli\n     0x326C977E6efc84E512bB9C30f76E30c160eD06FB\n     ```\n\n     ```text Mainnet\n     0x514910771AF9Ca656af840dff83E8264EcF986CA\n     ```\n\n   ![The Deploy & Run transaction window showing Injected Web 3 selected and the address for your MetaMask wallet.](/files/b9d3620-remix004.jpg)\n\n1. Click **Deploy**. MetaMask prompts you to confirm the transaction.\n\n   :::note[MetaMask doesn't pop up?]\n   If MetaMask does not prompt you and instead displays the error below, disable \"Privacy Mode\" in MetaMask. You can do this by clicking on your unique account icon at the top-right, then go to the Settings. Privacy Mode will be a switch near the bottom.<br/>\n   Error: **Send transaction failed: Invalid address. If you use an injected provider, please check it is properly unlocked.**\n   :::\n\n1. After you deploy the contract, a link to Etherscan displays at the bottom. Open that link in a new tab to keep track of the transaction.\n\n   ![Remix Pending Transaction Message](/files/b6fe1ac-remix005.jpg)\n\n1. If the transaction is successful, a new address displays in the **Deployed Contracts** section.\n\n   ![Screenshot showing the newly deployed contract.](/files/6858cf3-remix006.jpg)\n\n1. Keep note of the Oracle contract address. You need it later for your consuming contract.\n\n## Add your node to the Oracle contract\n\nFind the address for your Chainlink node and add it to the Oracle contract.\n\n1. In the Chainlink Operator GUI for your node, find and copy the address at the bottom of the **Keys** page in the Account addresses section.\n   ![Node UI Account Addresses](/images/chainlink-nodes/node-address.png)\n\n1. In Remix, call the `setFulfillmentPermission` function with the address of your node, a comma, and the value `true`, as the input parameters. This allows your node to fulfill requests to your oracle contract.\n\n   ![A screenshot showing all of the fields for the deployed contract in Remix.](/files/c6925db-remix007.jpg)\n\n1. Click the `setFulfillmentPermission` function to run it. Approve the transaction in MetaMask and wait for it to confirm on the blockchain.\n\n## Add a job to the node\n\nYou can add jobs to your Chainlink node in the Chainlink Operator GUI. The [ATestnetConsumer.sol](https://remix.ethereum.org/#url=https://docs.chain.link/samples/APIRequests/ATestnetConsumer.sol) consumer contract expects the price value in `Uint256`. Use the following [Job](/chainlink-nodes/oracle-jobs/jobs/) example:\n\n<!-- prettier-ignore -->\n<CodeSample src=\"samples/ChainlinkNodes/jobs/get-uint256.toml\"/>\n\n1. In the Chainlink Operator GUI on the **Jobs** tab, click **New Job**.\n\n   ![The new job button.](/images/chainlink-nodes/new-job-button.png)\n\n1. Paste the job specification from above into the text field.\n\n   ![The new job page with TOML format for a new job pasted.](/images/chainlink-nodes/new-job-toml.png)\n\n1. Replace `YOUR_ORACLE_CONTRACT_ADDRESS` with the address of your deployed oracle contract address from the previous steps. Replace `YOUR_ORACLE_CONTRACT_ADDRESS` for both the attribute `contractAddress` and also attribute `to` for the `submit_tx` step in the `observationSource` part of the job specification. This address not the same as the `ACCOUNT_ADDRESS` from your Chainlink node.\n\n1. Click **Create Job**. If the node creates the job successfully, a notice with the job number appears.\n\n   ![A screenshot showing that the job is created successfully.](/images/chainlink-nodes/job-created.png)\n\n1. Click the job number to view the job details. You can also find the job listed on the **Jobs** tab in the Node Operators UI.\n\n1. In the job **Definition** tab, find the `externalJobID` value. Save this value because you will need it later to tell your consumer contract what job ID to request from your node.\n\n## Create a request to your node\n\n:::caution[Practice on testnets!]\nIf you're going through this guide on Ethereum mainnet, the `ATestnetConsumer.sol` contract will still work. However, understand that you're sending real LINK to yourself. **Be sure to practice on the test networks multiple times before attempting to run a node on mainnet.**\n:::\n\nAfter you add jobs to your node, you can use the node to fulfill requests. This section shows what a requester does when they send requests to your node. It is also a way to test and make sure that your node is functioning correctly.\n\n1. Open [ATestnetConsumer.sol in Remix](https://remix.ethereum.org/#url=https://docs.chain.link/samples/APIRequests/ATestnetConsumer.sol).\n\n1. Note that `setChainlinkToken(0x326C977E6efc84E512bB9C30f76E30c160eD06FB)` is configured for _Goerli_. Fetch the Link token address for the network you are deploying into from the [Link token contracts page](/resources/link-token-contracts/).\n\n1. On the **Compiler** tab, click the **Compile** button for `ATestnetConsumer.sol`.\n\n1. On the **Deploy and Run** tab, configure the following settings:\n\n   - Select \"Injected Provider\" as your environment.\n   - Select \"ATestnetConsumer\" from the **Contract** menu.\n\n1. Click **Deploy**. MetaMask prompts you to confirm the transaction.\n\n1. Ensure that your Chainlink Node is sufficiently funded with ETH to execute the callbacks to your oracle contract.\n\n1. Fund the contract by sending LINK to the contract's address. See the [Fund your contract](/resources/fund-your-contract/) page for instructions. The address for the `ATestnetConsumer` contract is on the list of your deployed contracts in Remix.\n\n1. After you fund the contract, create a request. Input your oracle contract address and the job ID for the `Get > Uint256` job into the `requestEthereumPrice` request method **without dashes**. The job ID is the `externalJobID` parameter, which you can find on your job's definition page in the Node Operators UI.\n\n   ![Screenshot of the requestEthereumPrice function with the oracle address and job ID specified.](/images/chainlink-nodes/request-price-function.png)\n\n1. Click the **transact** button for the `requestEthereumPrice` function and approve the transaction in Metamask. The `requestEthereumPrice` function asks the node to retrieve `uint256` data specifically from [https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD](https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD).\n\n1. After the transaction processes, you can see the details for the complete the job run the **Runs** page in the Node Operators UI.\n\n1. In Remix, click the `currentPrice` variable to see the current price updated on your consumer contract.\n\n   ![A screenshot of the currentPrice button](/files/6741635-Screenshot_from_2019-05-15_15-38-25.png)\n\n## Retrieving other types of data\n\nNow that you have a working consumer contract, you can use that same `ATestnetConsumer` contract to obtain other types of data. The [ATestnetConsumer.sol](https://remix.ethereum.org/#url=https://docs.chain.link/samples/APIRequests/ATestnetConsumer.sol) consumer contract has a `requestEthereumLastMarket` function that requests more detailed data from [https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&tsyms=USD](https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&tsyms=USD). Returning this type of data requires another job.\n\n<!-- prettier-ignore -->\n<CodeSample src=\"samples/ChainlinkNodes/jobs/get-bytes32.toml\"/>\n\n1. Add the `Get > Bytes32` job to your node like you did for the first job.\n\n1. In the new job's definition page, find the `externalJobID`.\n\n1. Input your oracle contract address and the job ID for the `Get > Bytes32` job into the `requestEthereumLastMarket` request method **without dashes**.\n\n   ![Screenshot of the requestEthereumLastMarket function with the oracle address and job ID specified.](/images/chainlink-nodes/request-lastmarket-function.png)\n\n1. Click the **transact** button for the `requestEthereumLastMarket` function and approve the transaction in Metamask.\n\n1. After the transaction processes, you can see the details for the complete the job run the **Runs** page in the Node Operators UI.\n\n1. In Remix, click the `lastMarket` variable. The value is in bytes that you can convert to a string outside of the smart contract later.\n\n   ![A screenshot of the lastMarket button](/images/chainlink-nodes/lastMarket-variable.png)\n\nJobs can do more than just retrieve data and put it on chain. You can write your own jobs to accomplish various tasks. See the [v2 Jobs](/chainlink-nodes/oracle-jobs/jobs/) page to learn more.\n\n## Withdrawing LINK\n\nYou can withdraw LINK from the Oracle contract. In Remix under the list of deployed contracts, click on your Oracle contract and find the `withdraw` function in the function list. Note that the testnet consumer contract also has a `withdraw` function that is different.\n\n![Remix Click Withdraw Button](/files/f8ffdc0-c6925db-remix007.jpg)\n\nPaste the address you want to withdraw to, and specify the amount of LINK that you want to withdraw. Then, click `withdraw`. Confirm the transaction in MetaMask when the popup appears.\n"
    },
    {
      "title": "Existing Job Example specs",
      "headings": [],
      "url": "/chainlink-nodes/job-specs/direct-request-existing-job",
      "section": "nodeOperator",
      "content": "\nThis is an example v2 (TOML) job spec for returning gas price using [etherscan](https://docs.etherscan.io/api-endpoints/gas-tracker#get-gas-oracle) in one Chainlink API Call. Note that the job :\n\n- Uses an [external adapter](/chainlink-nodes/external-adapters/external-adapters/) to consume the etherscan API: [EtherScan External Adapter](https://github.com/smartcontractkit/external-adapters-js/tree/develop/packages/sources/etherscan). Note that this is done using the [bridge](/chainlink-nodes/oracle-jobs/task-types/task_bridge/) task: `type=\"bridge\" name=\"etherscan\"`.\n- Calls the `fulfillOracleRequest2` function. If you are a node operator, use an [Operator contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol) with this job.\n\nTo test this job spec from a smart contract, see this [Example](/any-api/get-request/examples/existing-job-request/).\n\n```toml\ntype = \"directrequest\"\nschemaVersion = 1\nname = \"Etherscan gas price\"\nmaxTaskDuration = \"0s\"\ncontractAddress = \"YOUR_ORACLE_CONTRACT_ADDRESS\"\nminIncomingConfirmations = 0\nobservationSource = \"\"\"\n    decode_log   [type=\"ethabidecodelog\"\n                  abi=\"OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)\"\n                  data=\"$(jobRun.logData)\"\n                  topics=\"$(jobRun.logTopics)\"]\n\n    etherscanFast  [type=\"bridge\" name=\"etherscan\" requestData=\"{\\\\\"data\\\\\": {\\\\\"endpoint\\\\\": \\\\\"gasprice\\\\\",  \\\\\"speed\\\\\":\\\\\"fast\\\\\" }}\"]\n    etherscanAverage  [type=\"bridge\" name=\"etherscan\" requestData=\"{\\\\\"data\\\\\": {\\\\\"endpoint\\\\\": \\\\\"gasprice\\\\\",  \\\\\"speed\\\\\":\\\\\"medium\\\\\" }}\"]\n    etherscanSafe  [type=\"bridge\" name=\"etherscan\" requestData=\"{\\\\\"data\\\\\": {\\\\\"endpoint\\\\\": \\\\\"gasprice\\\\\",  \\\\\"speed\\\\\":\\\\\"safe\\\\\" }}\"]\n\n    decode_log -> etherscanFast\n    decode_log -> etherscanAverage\n    decode_log -> etherscanSafe\n\n    gasPriceFast    [type=jsonparse path=\"data,result\"]\n    gasPriceAverage    [type=jsonparse path=\"data,result\"]\n    gasPriceSafe    [type=jsonparse path=\"data,result\"]\n\n    etherscanFast -> gasPriceFast\n    etherscanAverage -> gasPriceAverage\n    etherscanSafe -> gasPriceSafe\n\n    gasPriceFast -> encode_data\n    gasPriceAverage -> encode_data\n    gasPriceSafe -> encode_data\n\n    encode_data [type=ethabiencode abi=\"(bytes32 _requestId, uint256 _fastPrice, uint256 _averagePrice, uint256 _safePrice)\"\n            data=\"{\\\\\"_requestId\\\\\": $(decode_log.requestId),\\\\\"_fastPrice\\\\\": $(gasPriceFast),\\\\\"_averagePrice\\\\\": $(gasPriceAverage),\\\\\"_safePrice\\\\\": $(gasPriceSafe)}\"]\n\n    encode_tx [type=ethabiencode\n            abi=\"fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)\"\n            data=\"{\\\\\"requestId\\\\\": $(decode_log.requestId), \\\\\"payment\\\\\": $(decode_log.payment), \\\\\"callbackAddress\\\\\": $(decode_log.callbackAddr), \\\\\"callbackFunctionId\\\\\": $(decode_log.callbackFunctionId), \\\\\"expiration\\\\\": $(decode_log.cancelExpiration), \\\\\"data\\\\\": $(encode_data)}\"]\n\n    submit_tx [type=ethtx to=\"YOUR_ORACLE_CONTRACT_ADDRESS\" data=\"$(encode_tx)\"]\n    encode_data -> encode_tx -> submit_tx\n\"\"\"\n\n```\n"
    },
    {
      "title": "GET > Bool Example Job Spec",
      "headings": [],
      "url": "/chainlink-nodes/job-specs/direct-request-get-bool",
      "section": "nodeOperator",
      "content": "\nThis is an example v2 (TOML) job spec for calling any public API, parsing the result then returning a _bool_ in one Chainlink API Call. Note that the job calls the `fulfillOracleRequest2` function. If you are a node operator, use an [Operator contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol) with this job.\n\n```toml\ntype = \"directrequest\"\nschemaVersion = 1\nname = \"Get > Bool - (TOML)\"\nmaxTaskDuration = \"0s\"\ncontractAddress = \"YOUR_ORACLE_CONTRACT_ADDRESS\"\nminIncomingConfirmations = 0\nobservationSource = \"\"\"\n    decode_log   [type=\"ethabidecodelog\"\n                  abi=\"OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)\"\n                  data=\"$(jobRun.logData)\"\n                  topics=\"$(jobRun.logTopics)\"]\n\n    decode_cbor  [type=\"cborparse\" data=\"$(decode_log.data)\"]\n    fetch        [type=\"http\" method=GET url=\"$(decode_cbor.get)\" allowUnrestrictedNetworkAccess=\"true\"]\n    parse        [type=\"jsonparse\" path=\"$(decode_cbor.path)\" data=\"$(fetch)\"]\n    encode_data  [type=\"ethabiencode\" abi=\"(bytes32 requestId, bool value)\" data=\"{ \\\\\"requestId\\\\\": $(decode_log.requestId), \\\\\"value\\\\\": $(parse) }\"]\n    encode_tx    [type=\"ethabiencode\"\n                  abi=\"fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)\"\n                  data=\"{\\\\\"requestId\\\\\": $(decode_log.requestId), \\\\\"payment\\\\\":   $(decode_log.payment), \\\\\"callbackAddress\\\\\": $(decode_log.callbackAddr), \\\\\"callbackFunctionId\\\\\": $(decode_log.callbackFunctionId), \\\\\"expiration\\\\\": $(decode_log.cancelExpiration), \\\\\"data\\\\\": $(encode_data)}\"\n                  ]\n    submit_tx    [type=\"ethtx\" to=\"YOUR_ORACLE_CONTRACT_ADDRESS\" data=\"$(encode_tx)\"]\n\n    decode_log -> decode_cbor -> fetch -> parse -> encode_data -> encode_tx -> submit_tx\n\"\"\"\n```\n"
    },
    {
      "title": "GET > Bytes Example Job Spec",
      "headings": [],
      "url": "/chainlink-nodes/job-specs/direct-request-get-bytes",
      "section": "nodeOperator",
      "content": "\nThis is an example v2 (TOML) job spec for returning _bytes_ in one Chainlink API Call. Note that the job calls the `fulfillOracleRequest2` function. If you are a node operator, use an [Operator contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol) with this job.\nTo test it from a smart contract, see this [Example](/any-api/get-request/examples/large-responses/).\n\n```toml\ntype = \"directrequest\"\nschemaVersion = 1\nname = \"Get > Bytes\"\nmaxTaskDuration = \"0s\"\ncontractAddress = \"YOUR_ORACLE_CONTRACT_ADDRESS\"\nminIncomingConfirmations = 0\nobservationSource = \"\"\"\n    decode_log   [type=\"ethabidecodelog\"\n                  abi=\"OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)\"\n                  data=\"$(jobRun.logData)\"\n                  topics=\"$(jobRun.logTopics)\"]\n\n    decode_cbor  [type=\"cborparse\" data=\"$(decode_log.data)\"]\n    fetch        [type=\"http\" method=GET url=\"$(decode_cbor.get)\" allowUnrestrictedNetworkAccess=\"true\"]\n    parse        [type=\"jsonparse\" path=\"$(decode_cbor.path)\" data=\"$(fetch)\"]\n    encode_large [type=\"ethabiencode\"\n                abi=\"(bytes32 requestId, bytes _data)\"\n                data=\"{\\\\\"requestId\\\\\": $(decode_log.requestId), \\\\\"_data\\\\\": $(parse)}\"\n                ]\n    encode_tx  [type=\"ethabiencode\"\n                abi=\"fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)\"\n                data=\"{\\\\\"requestId\\\\\": $(decode_log.requestId), \\\\\"payment\\\\\":   $(decode_log.payment), \\\\\"callbackAddress\\\\\": $(decode_log.callbackAddr), \\\\\"callbackFunctionId\\\\\": $(decode_log.callbackFunctionId), \\\\\"expiration\\\\\": $(decode_log.cancelExpiration), \\\\\"data\\\\\": $(encode_large)}\"\n                ]\n\n    submit_tx    [type=\"ethtx\" to=\"YOUR_ORACLE_CONTRACT_ADDRESS\" data=\"$(encode_tx)\"]\n\n    decode_log -> decode_cbor -> fetch -> parse  -> encode_large -> encode_tx -> submit_tx\n\"\"\"\n\n```\n\nThis is an example legacy v1 job spec for returning large responses in one Chainlink API Call.\n\n```json\n{\n  \"name\": \"large-word\",\n  \"initiators\": [\n    {\n      \"id\": 9,\n      \"jobSpecId\": \"7a97ff84-93ec-406d-9062-1b2531f9251a\",\n      \"type\": \"runlog\",\n      \"params\": {\n        \"address\": \"0xc57b33452b4f7bb189bb5afae9cc4aba1f7a4fd8\"\n      }\n    }\n  ],\n  \"tasks\": [\n    {\n      \"jobSpecId\": \"7a97ff8493ec406d90621b2531f9251a\",\n      \"type\": \"httpget\"\n    },\n    {\n      \"jobSpecId\": \"7a97ff8493ec406d90621b2531f9251a\",\n      \"type\": \"jsonparse\"\n    },\n    {\n      \"jobSpecId\": \"7a97ff8493ec406d90621b2531f9251a\",\n      \"type\": \"resultcollect\"\n    },\n    {\n      \"jobSpecId\": \"7a97ff8493ec406d90621b2531f9251a\",\n      \"type\": \"ethtx\",\n      \"confirmations\": 1,\n      \"params\": {\n        \"abiEncoding\": [\"bytes32\", \"bytes\"]\n      }\n    }\n  ]\n}\n```\n"
    },
    {
      "title": "GET > Int256 Example Job Spec",
      "headings": [],
      "url": "/chainlink-nodes/job-specs/direct-request-get-int256",
      "section": "nodeOperator",
      "content": "\nThis is an example v2 (TOML) job spec for calling any public API, retrieving a number , removing its decimals then returning _int256_ in one Chainlink API Call. Note that the job calls the `fulfillOracleRequest2` function. If you are a node operator, use an [Operator contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol) with this job.\n\n```toml\ntype = \"directrequest\"\nschemaVersion = 1\nname = \"Get > Int256 - (TOML)\"\nmaxTaskDuration = \"0s\"\ncontractAddress = \"YOUR_ORACLE_CONTRACT_ADDRESS\"\nminIncomingConfirmations = 0\nobservationSource = \"\"\"\n    decode_log   [type=\"ethabidecodelog\"\n                  abi=\"OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)\"\n                  data=\"$(jobRun.logData)\"\n                  topics=\"$(jobRun.logTopics)\"]\n\n    decode_cbor  [type=\"cborparse\" data=\"$(decode_log.data)\"]\n    fetch        [type=\"http\" method=GET url=\"$(decode_cbor.get)\" allowUnrestrictedNetworkAccess=\"true\"]\n    parse        [type=\"jsonparse\" path=\"$(decode_cbor.path)\" data=\"$(fetch)\"]\n\n    multiply     [type=\"multiply\" input=\"$(parse)\" times=\"$(decode_cbor.times)\"]\n\n    encode_data  [type=\"ethabiencode\" abi=\"(bytes32 requestId, int256 value)\" data=\"{ \\\\\"requestId\\\\\": $(decode_log.requestId), \\\\\"value\\\\\": $(multiply) }\"]\n    encode_tx    [type=\"ethabiencode\"\n                  abi=\"fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)\"\n                  data=\"{\\\\\"requestId\\\\\": $(decode_log.requestId), \\\\\"payment\\\\\":   $(decode_log.payment), \\\\\"callbackAddress\\\\\": $(decode_log.callbackAddr), \\\\\"callbackFunctionId\\\\\": $(decode_log.callbackFunctionId), \\\\\"expiration\\\\\": $(decode_log.cancelExpiration), \\\\\"data\\\\\": $(encode_data)}\"\n                  ]\n    submit_tx    [type=\"ethtx\" to=\"YOUR_ORACLE_CONTRACT_ADDRESS\" data=\"$(encode_tx)\"]\n\n    decode_log -> decode_cbor -> fetch -> parse -> multiply -> encode_data -> encode_tx -> submit_tx\n\"\"\"\n```\n"
    },
    {
      "title": "GET > String Example Job Spec",
      "headings": [],
      "url": "/chainlink-nodes/job-specs/direct-request-get-string",
      "section": "nodeOperator",
      "content": "\nThis is an example v2 (TOML) job spec for returning a _string_ in one Chainlink API Call. Note that the job calls the `fulfillOracleRequest2` function. If you are a node operator, use an [Operator contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol) with this job.\nTo test it from a smart contract, see this [Example](/any-api/get-request/examples/array-response/).\n\n<!-- prettier-ignore -->\n<CodeSample src=\"samples/ChainlinkNodes/jobs/get-string.toml\"/>\n"
    },
    {
      "title": "GET > Uint256 Example Job Spec",
      "headings": [],
      "url": "/chainlink-nodes/job-specs/direct-request-get-uint256",
      "section": "nodeOperator",
      "content": "\nThis is an example v2 (TOML) job spec for calling any public API, retrieving a number , removing its decimals then returning _uint256_ in one Chainlink API Call. Note that the job calls the `fulfillOracleRequest2` function. If you are a node operator, use an [Operator contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol) with this job.\nTo test it from a smart contract, see this [Example](/any-api/get-request/examples/single-word-response/).\n\n```toml\ntype = \"directrequest\"\nschemaVersion = 1\nname = \"Get > Uint256 - (TOML)\"\nmaxTaskDuration = \"0s\"\ncontractAddress = \"YOUR_ORACLE_CONTRACT_ADDRESS\"\nminIncomingConfirmations = 0\nobservationSource = \"\"\"\n    decode_log   [type=\"ethabidecodelog\"\n                  abi=\"OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)\"\n                  data=\"$(jobRun.logData)\"\n                  topics=\"$(jobRun.logTopics)\"]\n\n    decode_cbor  [type=\"cborparse\" data=\"$(decode_log.data)\"]\n    fetch        [type=\"http\" method=GET url=\"$(decode_cbor.get)\" allowUnrestrictedNetworkAccess=\"true\"]\n    parse        [type=\"jsonparse\" path=\"$(decode_cbor.path)\" data=\"$(fetch)\"]\n\n    multiply     [type=\"multiply\" input=\"$(parse)\" times=\"$(decode_cbor.times)\"]\n\n    encode_data  [type=\"ethabiencode\" abi=\"(bytes32 requestId, uint256 value)\" data=\"{ \\\\\"requestId\\\\\": $(decode_log.requestId), \\\\\"value\\\\\": $(multiply) }\"]\n    encode_tx    [type=\"ethabiencode\"\n                  abi=\"fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)\"\n                  data=\"{\\\\\"requestId\\\\\": $(decode_log.requestId), \\\\\"payment\\\\\":   $(decode_log.payment), \\\\\"callbackAddress\\\\\": $(decode_log.callbackAddr), \\\\\"callbackFunctionId\\\\\": $(decode_log.callbackFunctionId), \\\\\"expiration\\\\\": $(decode_log.cancelExpiration), \\\\\"data\\\\\": $(encode_data)}\"\n                  ]\n    submit_tx    [type=\"ethtx\" to=\"YOUR_ORACLE_CONTRACT_ADDRESS\" data=\"$(encode_tx)\"]\n\n    decode_log -> decode_cbor -> fetch -> parse -> multiply -> encode_data -> encode_tx -> submit_tx\n\"\"\"\n```\n"
    },
    {
      "title": "MultiWord Example Job Spec",
      "headings": [],
      "url": "/chainlink-nodes/job-specs/multi-word-job",
      "section": "nodeOperator",
      "content": "\nThis is an example v2(TOML) job spec for returning multiple responses in 1 Chainlink API Call.Note that the job calls the `fulfillOracleRequest2` function. If you are a node operator, use an [Operator contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/Operator.sol) with this job.\nTo test it from a smart contract, see this [Example](/any-api/get-request/examples/multi-variable-responses/).\n\n```toml\ntype = \"directrequest\"\nschemaVersion = 1\nname = \"multi-word (TOML)\"\nmaxTaskDuration = \"0s\"\ncontractAddress = \"YOUR_ORACLE_CONTRACT_ADDRESS\"\nminIncomingConfirmations = 0\nobservationSource = \"\"\"\n       decode_log   [type=\"ethabidecodelog\"\n                  abi=\"OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)\"\n                  data=\"$(jobRun.logData)\"\n                  topics=\"$(jobRun.logTopics)\"]\n    decode_cbor  [type=\"cborparse\" data=\"$(decode_log.data)\"]\n    decode_log -> decode_cbor\n    decode_cbor -> btc\n    decode_cbor -> usd\n    decode_cbor -> eur\n    btc          [type=\"http\" method=GET url=\"$(decode_cbor.urlBTC)\" allowunrestrictednetworkaccess=\"true\"]\n    btc_parse    [type=\"jsonparse\" path=\"$(decode_cbor.pathBTC)\" data=\"$(btc)\"]\n    btc_multiply [type=\"multiply\" input=\"$(btc_parse)\", times=\"100000\"]\n    btc -> btc_parse -> btc_multiply\n    usd          [type=\"http\" method=GET url=\"$(decode_cbor.urlUSD)\" allowunrestrictednetworkaccess=\"true\"]\n    usd_parse    [type=\"jsonparse\" path=\"$(decode_cbor.pathUSD)\" data=\"$(usd)\"]\n    usd_multiply [type=\"multiply\" input=\"$(usd_parse)\", times=\"100000\"]\n    usd -> usd_parse -> usd_multiply\n    eur          [type=\"http\" method=GET url=\"$(decode_cbor.urlEUR)\" allowunrestrictednetworkaccess=\"true\"]\n    eur_parse    [type=\"jsonparse\" path=\"$(decode_cbor.pathEUR)\" data=\"$(eur)\"]\n    eurs_multiply [type=\"multiply\" input=\"$(eur_parse)\", times=\"100000\"]\n    eur -> eur_parse -> eurs_multiply\n    btc_multiply -> encode_mwr\n    usd_multiply -> encode_mwr\n    eurs_multiply -> encode_mwr\n    // MWR API does NOT auto populate the requestID.\n    encode_mwr [type=\"ethabiencode\"\n                abi=\"(bytes32 requestId, uint256 _btc, uint256 _usd, uint256 _eurs)\"\n                data=\"{\\\\\"requestId\\\\\": $(decode_log.requestId), \\\\\"_btc\\\\\": $(btc_multiply), \\\\\"_usd\\\\\": $(usd_multiply), \\\\\"_eurs\\\\\": $(eurs_multiply)}\"\n                ]\n    encode_tx  [type=\"ethabiencode\"\n                abi=\"fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)\"\n                data=\"{\\\\\"requestId\\\\\": $(decode_log.requestId), \\\\\"payment\\\\\":   $(decode_log.payment), \\\\\"callbackAddress\\\\\": $(decode_log.callbackAddr), \\\\\"callbackFunctionId\\\\\": $(decode_log.callbackFunctionId), \\\\\"expiration\\\\\": $(decode_log.cancelExpiration), \\\\\"data\\\\\": $(encode_mwr)}\"\n                ]\n    submit_tx  [type=\"ethtx\" to=\"YOUR_ORACLE_CONTRACT_ADDRESS\" data=\"$(encode_tx)\"]\n    encode_mwr -> encode_tx -> submit_tx\n\"\"\"\n```\n"
    },
    {
      "title": "Miscellaneous",
      "headings": [
        {
          "depth": 2,
          "slug": "execute-commands-running-docker",
          "text": "Execute Commands Running Docker"
        },
        {
          "depth": 2,
          "slug": "transfer-funds-from-node-wallet",
          "text": "Transfer funds from node wallet."
        },
        {
          "depth": 2,
          "slug": "change-your-api-password",
          "text": "Change your API password"
        },
        {
          "depth": 2,
          "slug": "multi-user-and-role-based-access-control-rbac",
          "text": "Multi-user and Role Based Access Control (RBAC)"
        },
        {
          "depth": 2,
          "slug": "use-named-chainlink-container",
          "text": "Use Named Chainlink Container"
        },
        {
          "depth": 2,
          "slug": "use-password-and-api-files-on-startup",
          "text": "Use Password and API Files On Startup"
        },
        {
          "depth": 2,
          "slug": "importing-a-keystore",
          "text": "Importing a Keystore"
        },
        {
          "depth": 2,
          "slug": "full-example-in-detached-mode",
          "text": "Full example in detached mode"
        }
      ],
      "url": "/chainlink-nodes/miscellaneous",
      "section": "nodeOperator",
      "content": "\n## Execute Commands Running Docker\n\nIn order to interact with the node's CLI commands, you need to be authenticated. This means that you need to access a shell within the Chainlink node's running container first. You can obtain the running container's `NAME` by running:\n\n```shell\ndocker ps\n```\n\nThe output will look similar to:\n\n```\nCONTAINER ID        IMAGE                     COMMAND                  CREATED             STATUS              PORTS                              NAMES\n436882efd51d        smartcontract/chainlink   \"./chainlink-launche…\"   33 minutes ago      Up 21 minutes       6688/tcp, 0.0.0.0:6688->6688/tcp   chainlink\n```\n\nThe last item, `chainlink`, is the name of the running container (using `--name chainlink` in your `docker run` command will give you a common name). Accessing a shell for this container is accomplished by running:\n\n```shell\ndocker exec -it chainlink /bin/bash\n```\n\nThis changes the prompt to something similar to:\n\n```shell\nroot@436882efd51d:~#\n```\n\nYou can now log in by running:\n\n```shell\nchainlink admin login\n```\n\nYou will be prompted to enter your API Email and Password, and if successful, the prompt will simply appear again. You can check that you are authenticated by running:\n\n```shell\nchainlink jobs list\n```\n\nIf no jobs have been added, you will receive the following output, otherwise, the list of added jobs will be returned:\n\n```\n╔ Jobs\n╬════╬════════════╬════════════╬═══════╬\n║ ID ║ CREATED AT ║ INITIATORS ║ TASKS ║\n╬════╬════════════╬════════════╬═══════╬\n```\n\n## Transfer funds from node wallet.\n\n:::note[Note for Docker]\nIf using Docker, you will first need to follow the [Execute Commands Running Docker](#execute-commands-running-docker) guide to enter the running container.\n:::\n\nTo transfer funds from the node wallet to another address, use the following CLI command:\n\n```shell\nchainlink txs create <amount> <your-cl-node-address> <send-to-address>\n```\n\nThis method is the preferred way to interact with your node wallet. Using other methods to manually interact with the node wallet can cause nonce issues.\n\n## Change your API password\n\n:::note[Note for Docker]\nIf using Docker, you will first need to follow the [Execute Commands Running Docker](#execute-commands-running-docker) guide to enter the running container.\n:::\n\nIn order to change your password, you first need to log into the CLI by running:\n\n```shell\nchainlink admin login\n```\n\nUse your API email and old password in order to authenticate.\n\nThen run the following in order to update the password:\n\n```shell\nchainlink admin chpass\n```\n\nIt will ask for your old password first, then ask for the new password and a confirmation.\n\nOnce complete, you should see a message \"Password updated.\"\n\n## Multi-user and Role Based Access Control (RBAC)\n\nChainlink Nodes allow the root admin CLI user and any additional admin users to create and assign tiers of role-based access to new users. These new API users can able to log in to the Operator UI independently.\n\nEach user has a specific role assigned to their account. There are four roles: `admin`, `edit`, `run`, and `view`.\n\nIf there are multiple users who need specific access to manage the Chainlink Node instance, permissions and level of access can be set here.\n\nUser management is configured through the use of the admin `chainlink admin users` command. Run `chainlink admin login` before you set user roles for other accounts. For example, a read-only user can be created with the following command:\n\n```shell\nchainlink admin users create --email=operator-ui-read-only@test.com --role=view\n```\n\nSpecific actions are enabled to check role-based access before they execute. The following table lists the actions that have role-based access and the role that is required to run that action:\n\n| Action | Read | Run | Edit | Admin |\n|:--- | :---: | :---: | :---: | :---: |\n| Update password  | X | X | X | X |\n| Create self API token  | X | X | X | X |\n| Delete self API token  | X | X | X | X |\n| List external initiators  | X | X | X | X |\n| Create external initiator  |   |   | X | X |\n| Delete external initiator  |   |   | X | X |\n| List bridges  | X | X | X | X |\n| View bridge  | X | X | X | X |\n| Create bridge  |   |   | X | X |\n| Edit bridge  |   |   | X | X |\n| Delete bridge  |   |   | X | X |\n| View config  | X | X | X | X |\n| Update config  |   |   |   | X |\n| Dump env/config  |   |   |   | X |\n| View transaction attempts  | X | X | X | X |\n| View transaction attempts EVM  | X | X | X | X |\n| View transactions  | X | X | X | X |\n| Replay a specific block number  |  | X | X | X |\n| List keys (CSA,ETH,OCR(2),P2P,Solana,Terra)  | X | X | X | X |\n| Create keys (CSA,ETH,OCR(2),P2P,Solana,Terra)  |   |   | X | X |\n| Delete keys (CSA,ETH,OCR(2),P2P,Solana,Terra)  |   |   |   | X |\n| Import keys (CSA,ETH,OCR(2),P2P,Solana,Terra)  |   |   |   | X |\n| Export keys (CSA,ETH,OCR(2),P2P,Solana,Terra)  |   |   |   | X |\n| List jobs | X | X | X | X |\n| View job | X | X | X | X |\n| Create job |  |  | X | X |\n| Delete job |  |   | X | X |\n| List pipeline runs | X | X | X | X |\n| View job runs | X | X | X | X |\n| Delete job spec errors |  |  | X | X |\n| View features | X | X | X | X |\n| View log | X | X | X | X |\n| Update log |   |   |   | X |\n| List chains | X | X | X | X |\n| View chain | X | X | X | X |\n| Create chain |   |   | X | X |\n| Update chain |   |   | X | X |\n| Delete chain |   |   | X | X |\n| View nodes | X | X | X | X |\n| Create node |  |  | X | X |\n| Update node |  |  | X | X |\n| Delete node |  |  | X | X |\n| View forwarders | X | X | X | X |\n| Create forwarder |   |   | X | X |\n| Delete forwarder |   |   | X | X |\n| Create job run |   | X | X | X |\n| Create Transfer EVM  |   |   |   | X |\n| Create Transfer Terra  |   |   |   | X |\n| Create Transfer Solana  |   |   |   | X |\n| Create user  |   |   |   | X |\n| Delete user  |   |   |   | X |\n| Edit user  |   |   |   | X |\n| List users  |   |   |   | X |\n\nThe run command allows for minimal interaction and only enables the ability to replay a specific block number and kick off a job run.\n\n## Use Named Chainlink Container\n\nInstead of allowing Docker to generate a name for your running container for you, you can provide a name with the `--name` option in your run command. For example, without the `--name` option, `docker ps` could reveal a name like:\n\n```\n... NAMES\n... cocky_austin\n```\n\nHowever, if we add `--name chainlink` to our run command, `docker ps` gives us:\n\n```\n... NAMES\n... chainlink\n```\n\nThis can be easily accomplished by using the following example run command:\n\n```shell Goerli\ncd ~/.chainlink-goerli && docker run --name chainlink -p 6688:6688 -v ~/.chainlink-goerli:/chainlink -it --env-file=.env smartcontract/chainlink local n\n```\n\n```shell Mainnet\ncd ~/.chainlink && docker run --name chainlink -p 6688:6688 -v ~/.chainlink:/chainlink -it --env-file=.env smartcontract/chainlink local n\n```\n\nRunning this the once will save the options provided so that you may easily start the named container in the future by running:\n\n```shell\ndocker start -i chainlink\n```\n\nIf you need to make changes to the run parameters or the environment file, first remove the named container by running:\n\n```shell\ndocker rm chainlink\n```\n\nThen make your changes and use the longer `docker run` command again.\n\n## Use Password and API Files On Startup\n\nThe Chainlink node can be supplied with files for the wallet password and API email and password (on separate lines) on startup so that you don't need to enter credentials when starting the node. Following the pattern established in [Running a Chainlink Node](/chainlink-nodes/running-a-chainlink-node/), you can create an API file by running the following:\n\n:::tip[Important]\nChange the values within the quotes to something unique for your node.\n:::\n\n```shell Goerli\necho \"user@example.com\" > ~/.chainlink-goerli/.api\n```\n\n```shell Mainnet\necho \"user@example.com\" > ~/.chainlink/.api\n```\n\nThen add the password line by running:\n\n```shell Goerli\necho \"password\" >> ~/.chainlink-goerli/.api\n```\n\n```shell Mainnet\necho \"password\" >> ~/.chainlink/.api\n```\n\nCreate the password file by running the following:\n\n```shell Goerli\necho \"my_wallet_password\" > ~/.chainlink-goerli/.password\n```\n\n```shell Mainnet\necho \"my_wallet_password\" > ~/.chainlink/.password\n```\n\nFinally, in order to use the password and API files upon running the node, add `-p /chainlink/.password -a /chainlink/.api` to your run command, like so:\n\n```shell Goerli\ncd ~/.chainlink-goerli && docker run -p 6688:6688 -v ~/.chainlink-goerli:/chainlink -it --env-file=.env smartcontract/chainlink local n -p /chainlink/.password -a /chainlink/.api\n```\n\n```shell Mainnet\ncd ~/.chainlink && docker run -p 6688:6688 -v ~/.chainlink:/chainlink -it --env-file=.env smartcontract/chainlink local n -p /chainlink/.password -a /chainlink/.api\n```\n\n## Importing a Keystore\n\nIf you haven't ran the node before and want to import a key you can use the following command, where `./keystore.json` is the path to the keystore file of your account.\n\n```shell import\nchainlink local import ./keystore.json\n```\n\nIf there is already a key in your database and you want to import another key, you will need to make sure that the same password unlocks all accounts.\n\n## Full example in detached mode\n\n```shell\ncd ~/.chainlink-goerli && docker run --restart=always  -p 6688:6688 -d --name goerli-primary -v ~/.chainlink-goerli:/chainlink -it --env-file=.env smartcontract/chainlink:1.0.0 local n -p /chainlink/.password\n```\n"
    },
    {
      "title": "Node Versions and Upgrades",
      "headings": [
        {
          "depth": 2,
          "slug": "changes-in-v190-nodes",
          "text": "Changes in v1.9.0 nodes"
        },
        {
          "depth": 2,
          "slug": "changes-in-v181-nodes",
          "text": "Changes in v1.8.1 nodes"
        },
        {
          "depth": 2,
          "slug": "changes-in-v180-nodes",
          "text": "Changes in v1.8.0 nodes"
        },
        {
          "depth": 3,
          "slug": "added",
          "text": "Added"
        },
        {
          "depth": 3,
          "slug": "changed",
          "text": "Changed"
        },
        {
          "depth": 3,
          "slug": "removed",
          "text": "Removed"
        },
        {
          "depth": 2,
          "slug": "changes-in-v171-nodes",
          "text": "Changes in v1.7.1 nodes"
        },
        {
          "depth": 3,
          "slug": "fixed",
          "text": "Fixed"
        },
        {
          "depth": 2,
          "slug": "changes-in-v170-nodes",
          "text": "Changes in v1.7.0 nodes"
        },
        {
          "depth": 3,
          "slug": "added-1",
          "text": "Added"
        },
        {
          "depth": 3,
          "slug": "fixed-1",
          "text": "Fixed"
        },
        {
          "depth": 2,
          "slug": "changes-in-v160-nodes",
          "text": "Changes in v1.6.0 nodes"
        },
        {
          "depth": 2,
          "slug": "changes-in-v150-nodes",
          "text": "Changes in v1.5.0 nodes"
        },
        {
          "depth": 3,
          "slug": "added-2",
          "text": "Added"
        },
        {
          "depth": 3,
          "slug": "fixed-2",
          "text": "Fixed"
        },
        {
          "depth": 3,
          "slug": "removed-1",
          "text": "Removed"
        },
        {
          "depth": 2,
          "slug": "changes-in-v141-nodes",
          "text": "Changes in v1.4.1 nodes"
        },
        {
          "depth": 2,
          "slug": "changes-in-v140-nodes",
          "text": "Changes in v1.4.0 nodes"
        },
        {
          "depth": 2,
          "slug": "changes-in-v130-nodes",
          "text": "Changes in v1.3.0 nodes"
        },
        {
          "depth": 2,
          "slug": "changes-in-v120-nodes",
          "text": "Changes in v1.2.0 nodes"
        },
        {
          "depth": 2,
          "slug": "changes-in-v110-nodes",
          "text": "Changes in v1.1.0 nodes"
        },
        {
          "depth": 2,
          "slug": "changes-in-v100-and-v101-nodes",
          "text": "Changes in v1.0.0 and v1.0.1 nodes"
        }
      ],
      "url": "/chainlink-nodes/node-versions",
      "section": "nodeOperator",
      "description": "Details about various node versions and how to migrate between them.",
      "content": "\nYou can find a list of release notes for Chainlink nodes in the [smartcontractkit GitHub repository](https://github.com/smartcontractkit/chainlink/releases). Docker images are available in the [Chainlink Docker hub](https://hub.docker.com/r/smartcontract/chainlink/tags).\n\n## Changes in v1.9.0 nodes\n\n**[v1.9.0 release notes](https://github.com/smartcontractkit/chainlink/releases/tag/v1.9.0)**\n\n- Added the [`length` task](/chainlink-nodes/oracle-jobs/task-types/task_length/) and the [`lessthan` task](/chainlink-nodes/oracle-jobs/task-types/task_lessthan/) for jobs.\n- Added the `gasUnlimited` parameter to the [`ethcall` task](/chainlink-nodes/oracle-jobs/task-types/task_eth_call/).\n- The **Keys** page in Operator UI includes several admin commands that were previously available only by using the `keys eth chain` commands:\n  - Ability to abandon all current transactions: This is the same as the `abandon` CLI command. Previously it was necessary to edit the database directly to abandon transactions. This command makes it easier to resolve issues that require transactions to be abandoned.\n  - Ability to enable/disable a key for a specific chain: This allows you to control keys on a per-chain basis.\n  - Ability to manually set the nonce for a key. This gives you a way to set the next nonce for a specific key in the UI, which can be useful for debugging.\n\n## Changes in v1.8.1 nodes\n\n**[v1.8.1 release notes](https://github.com/smartcontractkit/chainlink/releases/tag/v1.8.1)**\n\n- Added several improvements for Arbitrum Nitro including a multi-dimensional gas model, with dynamic gas pricing and limits.\n  - The new default estimator for Arbitrum networks uses the suggested gas price up to `ETH_MAX_GAS_PRICE_WEI` with a 1000 gwei default value and an estimated gas limit up to `ETH_GAS_LIMIT_MAX` with a 1,000,000,000 default.\n  - Remove the `GAS_ESTIMATOR_MODE` environment variable to use the new defaults.\n- `ETH_GAS_LIMIT_MAX` to puts a maximum on the gas limit returned by the Arbitrum estimator.\n\n## Changes in v1.8.0 nodes\n\n**[v1.8.0 release notes](https://github.com/smartcontractkit/chainlink/releases/tag/v1.8.0)**\n\n### Added\n\n- Added the `hexencode` and `base64encode` tasks (pipeline). See the [Hex Encode Task](/chainlink-nodes/oracle-jobs/task-types/task_hexencode/) and [Base64 Encode Task](/chainlink-nodes/oracle-jobs/task-types/task_base64encode/) pages for examples.\n- `forwardingAllowed` per job attribute to allow forwarding txs submitted by the job.\n- Added `Arbitrum Goerli` configuration support.\n- Added the [`NODE_SELECTION_MODE` (`EVM.NodePool.SelectionMode`) environment variable](/chainlink-nodes/configuration-variables/#node_selection_mode), which controls node picking strategy. Supported values are:\n  - `HighestHead` is the default mode, which picks a node that has the highest reported head number among other alive nodes. When several nodes have the same latest head number, the strategy sticks to the last used node. This mode requires `NODE_NO_NEW_HEADS_THRESHOLD` to be configured, otherwise it will always use the first alive node.\n  - `RoundRobin` mode iterates among available alive nodes. This was the default behavior prior to this release.\n- New `evm keys chain` command. This can also be accessed at `/v2/keys/evm/chain`. This command has the following uses:\n  - Manually set or reset a nonce: `chainlink evm keys chain --address \"0xEXAMPLE\" --evmChainID 99 --setNextNonce 42`\n  - Enable a key for a particular chain: `chainlink evm keys chain --address \"0xEXAMPLE\" --evmChainID 99 --setEnabled true`\n  - Disable a key for a particular chain: `chainlink evm keys chain --address \"0xEXAMPLE\" --evmChainID 99 --setEnabled false`\n- It is now possible to use the same key across multiple chains.\n\n### Changed\n\n- The `chainlink admin users update` command is replaced with `chainlink admin users chrole`. Only the role can be changed for a user.\n- Keypath now supports paths with any depth, instead of limiting it to 2.\n- `Arbitrum` chains are no longer restricted to only `FixedPrice` `GAS_ESTIMATOR_MODE`.\n- Updated `Arbitrum Rinkeby & Mainnet` configurations for Nitro.\n\n### Removed\n\n- The `setnextnonce` local client command is removed and is replaced by the more general `evm keys chain` command client command.\n\n## Changes in v1.7.1 nodes\n\n**[v1.7.1 release notes](https://github.com/smartcontractkit/chainlink/releases/tag/v1.7.1)**\n\n### Fixed\n\n- Arbitrum Nitro client error support\n\n## Changes in v1.7.0 nodes\n\n**[v1.7.0 release notes](https://github.com/smartcontractkit/chainlink/releases/tag/v1.7.0)**\n\n### Added\n\n- `p2pv2Bootstrappers` is added as a new optional property of OCR1 job specs. The default can still be specified with the [`P2PV2_BOOTSTRAPPERS` environment variable](/chainlink-nodes/configuration-variables/#p2pv2_bootstrappers).\n\n- Added official support for the [Sepolia testnet](https://sepolia.dev/) on Chainlink nodes.\n\n- Added [`hexdecode` task](/chainlink-nodes/oracle-jobs/task-types/task_hexdecode/) and the [`base64decode` task](/chainlink-nodes/oracle-jobs/task-types/task_base64decode) (pipeline).\n\n- Added support for the Besu execution client. Although Chainlink supports Besu, Besu itself has several issues that can make it unreliable. For additional context, see the following issues:\n\n  - [hyperledger/besu/issues/4212](https://github.com/hyperledger/besu/issues/4212)\n  - [hyperledger/besu/issues/4192](https://github.com/hyperledger/besu/issues/4192)\n  - [hyperledger/besu/issues/4114](https://github.com/hyperledger/besu/issues/4114)\n\n- Added [Multi-user and Role Based Access Control](/chainlink-nodes/miscellaneous/#multi-user-and-role-based-access-control-rbac) functionality. This allows the root admin CLI user and additional admin users to create and assign tiers of role-based access to new users. These new API users are able to log in to the Operator UI independently and can each have specific roles tied to their account. There are four roles: `admin`, `edit`, `run`, and `view`.\n  - User management can be configured through the use of the new admin CLI command `chainlink admin users`. Be sure to run `chainlink admin login`. For example, a readonly user can be created with: `chainlink admin users create --email=operator-ui-read-only@test.com --role=view`.\n  - Updated documentation repo with a break down of actions to required role level\n\n- Added gas limit control for individual job specs and individual job types. The following rule of precedence is applied:\n\n  1. The task-specific parameter `gasLimit` overrides anything else when specified. For example, the `ethtx` task has a `gasLimit` parameter that overrides the other defaults for this specific task.\n  1. The job-spec attribute `gasLimit` applies only to a specific job spec.\n  1. The job-type limits affect any jobs of the corresponding type. The following environment variables are available:\n\n     - [ETH_GAS_LIMIT_OCR_JOB_TYPE](/chainlink-nodes/configuration-variables/#eth_gas_limit_ocr_job_type)\n     - [ETH_GAS_LIMIT_DR_JOB_TYPE](/chainlink-nodes/configuration-variables/#eth_gas_limit_dr_job_type)\n     - [ETH_GAS_LIMIT_VRF_JOB_TYPE](/chainlink-nodes/configuration-variables/#eth_gas_limit_vrf_job_type)\n     - [ETH_GAS_LIMIT_FM_JOB_TYPE](/chainlink-nodes/configuration-variables/#eth_gas_limit_fm_job_type)\n     - [ETH_GAS_LIMIT_KEEPER_JOB_TYPE](/chainlink-nodes/configuration-variables/#eth_gas_limit_keeper_job_type)\n\n  1. The global `ETH_GAS_LIMIT_DEFAULT` (`EVM.GasEstimator.LimitDefault`) value is used only when the preceding rules are not set.\n\n### Fixed\n\n- Addressed a very rare bug where using multiple nodes with differently configured RPC tx fee caps could cause missed transactions. Ensure that your RPC nodes have no caps. For more information, see the [performance and tuning guide](https://docs.chain.link/chainlink-nodes/evm-performance-configuration/).\n- Improved handling of unknown transaction error types to make Chainlink more robust in certain cases on unsupported chains or RPC clients.\n\n## Changes in v1.6.0 nodes\n\n**[v1.6.0 release notes](https://github.com/smartcontractkit/chainlink/releases/tag/v1.6.0)**\n\n- Simplified password complexity requirements. All passwords used with Chainlink must meet the following requirements:\n  - Must be 16 characters or more\n  - Must not contain leading or trailing whitespace\n  - User passwords must not contain the user's API email\n- Simplified the Keepers job spec by removing the observation source from the required parameters.\n\n## Changes in v1.5.0 nodes\n\n**[v1.5.0 release notes](https://github.com/smartcontractkit/chainlink/releases/tag/v1.5.0)**\n\n- Chainlink will not boot if the Postgres database password is missing or insecure. Passwords must conform to the following rules:\n\n  - Must be longer than 12 characters\n  - Must comprise at least 3 of the following items:\n    - Lowercase characters\n    - Uppercase characters\n    - Numbers\n    - Symbols\n  - Must not comprise:\n    - More than three identical consecutive characters\n    - Leading or trailing whitespace (note that a trailing newline in the password file, if present, will be ignored)\n\n  For backward compatibility, you can bypass this check at your own risk by setting `SKIP_DATABASE_PASSWORD_COMPLEXITY_CHECK=true`.\n\n- The following environment variables are deprecated and will be removed in a future release. They are are replaced by the following command line arguments:\n\n  - `INSECURE_SKIP_VERIFY`: Replaced by the `--insecure-skip-verify` CLI argument\n  - `CLIENT_NODE_URL`: Replaced by the `--remote-node-url URL` CLI argument\n  - `ADMIN_CREDENTIALS_FILE`: Replaced by the `--admin-credentials-file FILE` CLI argument\n\n  Run `./chainlink --help` to learn more about these CLI arguments.\n\n- The `Optimism2` `GAS_ESTIMATOR_MODE` has been renamed to `L2Suggested`. The old name is still supported for now.\n\n- The `p2pBootstrapPeers` property on OCR2 job specs has been renamed to `p2pv2Bootstrappers`.\n\n### Added\n\n- Added the [`ETH_USE_FORWARDERS` config](/chainlink-nodes/configuration-variables/#eth_use_forwarders) option to enable transactions forwarding contracts.\n\n- In the `directrequest` job pipeline, three new block variables are available:\n\n  - `$(jobRun.blockReceiptsRoot)` : the root of the receipts trie of the block (hash)\n  - `$(jobRun.blockTransactionsRoot)` : the root of the transaction trie of the block (hash)\n  - `$(jobRun.blockStateRoot)` : the root of the final state trie of the block (hash)\n\n- `ethtx` tasks can now be configured to error if the transaction reverts on-chain. You must set `failOnRevert=true` on the task to enable this behavior:\n\n  `foo [type=ethtx failOnRevert=true ...]`\n\n  The `ethtx` task now works as follows:\n\n  - If `minConfirmations == 0`, task always succeeds and nil is passed as output.\n  - If `minConfirmations > 0`, the receipt is passed through as output.\n  - If `minConfirmations > 0` and `failOnRevert=true` then the `ethtx` task will error on revert.\n  - If `minConfirmations` is not set on the task, the chain default will be used which is usually 12 and always greater than 0.\n\n- `http` task now allows specification of request headers. Use it like the following example:\n\n  `foo [type=http headers=\"[\\\\\"X-Header-1\\\\\", \\\\\"value1\\\\\", \\\\\"X-Header-2\\\\\", \\\\\"value2\\\\\"]\"]`.\n\n### Fixed\n\n- Fixed `max_unconfirmed_age` metric. Previously this would incorrectly report the max time since the last rebroadcast, capping the upper limit to the EthResender interval. This now reports the correct value of total time elapsed since the _first_ broadcast.\n\n- Correctly handle the case where bumped gas would exceed the RPC node's configured maximum on Fantom. Note that node operators should check their Fantom RPC node configuration and remove the fee cap if there is one.\n\n- Fixed handling of the Metis internal fee change.\n\n### Removed\n\n- The `Optimism` OVM 1.0 `GAS_ESTIMATOR_MODE` has been removed and the `Optimism2` `GAS_ESTIMATOR_MODE` has been renamed to `L2Suggested`.\n\n- `MIN_OUTGOING_CONFIRMATIONS` has been removed and no longer has any effect. The [`ETH_FINALITY_DEPTH` environment variable](/chainlink-nodes/configuration-variables/#eth_finality_depth) is now used as the default for `ethtx` confirmations instead. You can override this on a per-task basis by setting `minConfirmations` in the task definition. For example, `foo [type=ethtx minConfirmations=42 ...]`.\n\n  This setting might have a minor impact on performance for very high throughput chains. If you don't care about reporting task status in the UI, set `minConfirmations=0` in your job specs. For more details, see the [Optimizing EVM Performance](/chainlink-nodes/evm-performance-configuration/#adjusting-minimum-outgoing-confirmations-for-high-throughput-jobs) page.\n\n## Changes in v1.4.1 nodes\n\n**[v1.4.1 release notes](https://github.com/smartcontractkit/chainlink/releases/tag/v1.4.1)**\n\n- Added a fix to ensure that a failed `EthSubscribe` does not register `(*rpc.ClientSubscription)(nil)`, which leads to a panic when unsubscribing.\n- Fix parsing of float values on job specs.\n\n## Changes in v1.4.0 nodes\n\n**[v1.4.0 release notes](https://github.com/smartcontractkit/chainlink/releases/tag/v1.4.0)**\n\n- JSON parse tasks in TOML now support a custom `separator` parameter to substitute for the default `,`.\n- Slow SQL queries are now logged.\n- Updated the block explorer URLs to include FTMScan and SnowTrace.\n- Keeper upkeep order can now be shuffled. See [KEEPER_TURN_FLAG_ENABLED](/chainlink-nodes/configuration-variables/#keeper_turn_flag_enabled) for details.\n- Several fixes. See the [release notes](https://github.com/smartcontractkit/chainlink/releases/tag/v1.4.0) for a full list of changes.\n\n## Changes in v1.3.0 nodes\n\n**[v1.3.0 release notes](https://github.com/smartcontractkit/chainlink/releases/tag/v1.3.0)**\n\n- Added disk rotating logs. See the [Node Logging](/chainlink-nodes/configuration-variables/#logging) and [LOG_FILE_MAX_SIZE](/chainlink-nodes/configuration-variables/#log_file_max_size) documentation for details.\n- Added support for the `force` flag on the `chainlink blocks replay` CLI command. If set to true, already consumed logs that would otherwise be skipped will be rebroadcasted.\n- Added a version compatibility check when using the CLI to login to a remote node. The `bypass-version-check` flag skips this check.\n- Changed default locking mode to \"dual\". See the [DATABASE_LOCKING_MODE](/chainlink-nodes/configuration-variables/#database_locking_mode) documentation for details.\n- Specifying multiple EVM RPC nodes with the same URL is no longer supported. If you see `ERROR 0106_evm_node_uniqueness.sql: failed to run SQL migration`, you have multiple nodes specified with the same URL and you must fix this before proceeding with the upgrade.\n- EIP-1559 is now enabled by default on the Ethereum Mainnet. See the [EVM_EIP1559_DYNAMIC_FEES](/chainlink-nodes/configuration-variables/#evm_eip1559_dynamic_fees) documentation for details.\n- Added new Chainlink Automation feature that includes gas price in calls to `checkUpkeep()`. To enable the feature, set [KEEPER_CHECK_UPKEEP_GAS_PRICE_FEATURE_ENABLED](/chainlink-nodes/configuration-variables#keeper_check_upkeep_gas_price_feature_enabled) to `true`. Use this setting _only_ on Polygon networks.\n\n## Changes in v1.2.0 nodes\n\n**[v1.2.0 release notes](https://github.com/smartcontractkit/chainlink/releases/tag/v1.2.0)**\n\n:::caution[Not for use on Solana or Terra]\nAlthough this release provides `SOLANA_ENABLED` and `TERRA_ENABLED` environment variables, these are not intended for use on Solana or Terra mainnets.\n:::\n\nSignificant changes:\n\n- Added support for the [Nethermind Ethereum client](https://nethermind.io/).\n- Added support for batch sending telemetry to the ingress server to improve performance.\n- New environment variables: See the [release notes](https://github.com/smartcontractkit/chainlink/releases/tag/v1.2.0) for details.\n- Removed the `deleteuser` CLI command.\n- Removed the `LOG_TO_DISK` environment variable.\n\nSee the [v1.2.0 release notes](https://github.com/smartcontractkit/chainlink/releases/tag/v1.2.0) for a complete list of changes and fixes.\n\n## Changes in v1.1.0 nodes\n\n**[v1.1.0 release notes](https://github.com/smartcontractkit/chainlink/releases/tag/v1.1.0)**\n\nThe v1.1.0 release includes several substantial changes to the way you configure and operate Chainlink nodes:\n\n- **Legacy environment variables**: Legacy environment variables are supported, but they might be removed in future node versions. See the [Configuring Chainlink Nodes](/chainlink-nodes/configuration-variables/#evmethereum-legacy-environment-variables) page to learn how to migrate your nodes away from legacy environment variables and use the API, CLI, or GUI exclusively to administer chains and nodes.\n- **Full EIP1559 Support**: Chainlink nodes include experimental support for submitting transactions using type 0x2 (EIP-1559) envelope. EIP-1559 mode is off by default, but can be enabled either globally or on a per-chain basis.\n- **New log level added**:\n  - [crit]: Critical level logs are more severe than [error] and require quick action from the node operator.\n- **Multichain support (Beta)**: Chainlink now supports connecting to multiple different EVM chains simultaneously. This is disabled by default. See the [v1.1.0 Changelog](https://github.com/smartcontractkit/chainlink/blob/v1.1.0/docs/CHANGELOG.md#multichain-support-added) for details.\n\nWith multliple chain support, eth node configuration is stored in the database.\n\nThe following environment variables are DEPRECATED:\n\n- ETH_URL\n- ETH_HTTP_URL\n- ETH_SECONDARY_URLS\n\nSetting ETH_URL will cause Chainlink to automatically overwrite the database records with the given ENV values every time Chainlink boots. This behavior is used mainly to ease the process of upgrading from older versions, and on subsequent runs (once your old settings have been written to the database) it is recommended to unset these ENV vars and use the API commands exclusively to administer chains and nodes.\n\nIf you wish to continue using these environment variables (as it used to work in 1.0.0 and below) you must ensure that the following are set:\n\n- ETH_CHAIN_ID (mandatory)\n- ETH_URL (mandatory)\n- ETH_HTTP_URL (optional)\n- ETH_SECONDARY_URLS (optional)\n\nIf, instead, you wish to use the API/CLI/GUI to configure your chains and eth nodes (recommended) you must REMOVE the following environment variables:\n\n- ETH_URL\n- ETH_HTTP_URL\n- ETH_SECONDARY_URLS\n\nThis will cause Chainlink to use the database for its node configuration.\n\nNOTE: ETH_CHAIN_ID does not need to be removed, since it now performs the additional duty of specifying the default chain in a multichain environment (if you leave ETH_CHAIN_ID unset, the default chain is simply the \"first\").\n\nFor more information on configuring your node, check the [configuration variables in the docs](https://docs.chain.link/chainlink-nodes/configuration-variables/).\n\nBefore you upgrade your nodes to v1.1.0, be aware of the following requirements:\n\n- If you are upgrading from a previous version, you **MUST** first upgrade the node to at least [v0.10.15](https://github.com/smartcontractkit/chainlink/releases/tag/v0.10.15).\n- Always take a Database snapshot before you upgrade your Chainlink nodes. You must be able to roll the node back to a previous version in the event of an upgrade failure.\n\nSee the [v1.1.0 release notes](https://github.com/smartcontractkit/chainlink/releases/tag/v1.1.0) for a complete list of changes and fixes.\n\n## Changes in v1.0.0 and v1.0.1 nodes\n\n**[v1.0.0 release notes](https://github.com/smartcontractkit/chainlink/releases/tag/v1.0.0)**\n**[v1.0.1 release notes](https://github.com/smartcontractkit/chainlink/releases/tag/v1.0.1)**\n\nBefore you upgrade your nodes to v1.0.0 or v1.0.1, be aware of the following requirements:\n\n- If you are upgrading from a previous version, you **MUST** first upgrade the node to at least [v0.10.15](https://github.com/smartcontractkit/chainlink/releases/tag/v0.10.15).\n- Always take a Database snapshot before you upgrade your Chainlink nodes. You must be able to roll the node back to a previous version in the event of an upgrade failure.\n"
    },
    {
      "title": "Solidity Cron Jobs",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/job-types/cron",
      "section": "nodeOperator",
      "content": "\n:::note[Chainlink Job Scheduler]\nIf you need to schedule a contract function call, use the [Chainlink Job Scheduler](https://automation.chain.link/new-time-based). The Job Scheduler uses the [Chainlink Automation](/chainlink-automation/introduction) network to execute deployed contract calls on a cron schedule that you define, such as an Ethereum cron job for your dApp.\n:::\n\nExecutes a job on a schedule. Does not rely on any kind of external trigger.\n\n**Spec format**\n\n```toml\ntype            = \"cron\"\nschemaVersion   = 1\nevmChainID      = 1\nschedule        = \"CRON_TZ=UTC * */20 * * * *\"\nexternalJobID       = \"0EEC7E1D-D0D2-476C-A1A8-72DFB6633F01\"\nobservationSource   = \"\"\"\n    fetch    [type=\"http\" method=GET url=\"https://chain.link/ETH-USD\"]\n    parse    [type=\"jsonparse\" path=\"data,price\"]\n    multiply [type=\"multiply\" times=100]\n\n    fetch -> parse -> multiply\n\"\"\"\n```\n\n**Shared fields**\nSee [shared fields](/chainlink-nodes/oracle-jobs/jobs/#shared-fields).\n\n**Unique fields**\n\n- `schedule`: the frequency with which the job is to be run. There are two ways to specify this:\n  - Traditional UNIX cron format, but with 6 fields, not 5. The extra field allows for \"seconds\" granularity. **Note:** you _must_ specify the `CRON_TZ=...` parameter if you use this format.\n  - `@` shorthand, e.g. `@every 1h`. This shorthand does not take account of the node's timezone, rather, it simply begins counting down the moment that the job is added to the node (or the node is rebooted). As such, no `CRON_TZ` parameter is needed.\n\nFor all supported schedules, please refer to the [cron library documentation](https://pkg.go.dev/github.com/robfig/cron?utm_source=godoc).\n\n**Job type specific pipeline variables**\n\n- `$(jobSpec.databaseID)`: the ID of the job spec in the local database. You shouldn't need this in 99% of cases.\n- `$(jobSpec.externalJobID)`: the globally-unique job ID for this job. Used to coordinate between node operators in certain cases.\n- `$(jobSpec.name)`: the local name of the job.\n- `$(jobRun.meta)`: a map of metadata that can be sent to a bridge, etc.\n"
    },
    {
      "title": "Direct Request Jobs",
      "headings": [
        {
          "depth": 2,
          "slug": "spec-format",
          "text": "Spec format"
        },
        {
          "depth": 3,
          "slug": "shared-fields",
          "text": "Shared fields"
        },
        {
          "depth": 3,
          "slug": "unique-fields",
          "text": "Unique fields"
        },
        {
          "depth": 3,
          "slug": "job-type-specific-pipeline-variables",
          "text": "Job type specific pipeline variables"
        },
        {
          "depth": 2,
          "slug": "examples",
          "text": "Examples"
        },
        {
          "depth": 3,
          "slug": "get--uint256-job",
          "text": "Get > Uint256 Job"
        },
        {
          "depth": 3,
          "slug": "get--int256-job",
          "text": "Get > Int256 Job"
        },
        {
          "depth": 3,
          "slug": "get--bool-job",
          "text": "Get > Bool Job"
        },
        {
          "depth": 3,
          "slug": "get--string-job",
          "text": "Get > String Job"
        },
        {
          "depth": 3,
          "slug": "get--bytes-job",
          "text": "Get > Bytes Job"
        },
        {
          "depth": 3,
          "slug": "multi-word-job",
          "text": "Multi-Word Job"
        },
        {
          "depth": 3,
          "slug": "existing-job",
          "text": "Existing Job"
        }
      ],
      "url": "/chainlink-nodes/oracle-jobs/job-types/direct_request",
      "section": "nodeOperator",
      "content": "\nExecutes a job upon receipt of an explicit request made by a user. The request is detected via a log emitted by an Oracle or Operator contract. This is similar to the legacy ethlog/runlog style of jobs.\n\n**Topics**\n\n- [Spec format](#spec-format)\n  - [Shared fields](#shared-fields)\n  - [Unique fields](#unique-fields)\n  - [Job type specific pipeline variables](#job-type-specific-pipeline-variables)\n- [Examples](#examples)\n  - [Get > Uint256 Job](#get--uint256-job)\n  - [Get > String Job](#get--string-job)\n  - [Get > Bytes Job](#get--bytes-job)\n  - [Multi-Word Job](#multi-word-job)\n  - [Existing Job](#existing-job)\n\n## Spec format\n\n```toml\ntype                = \"directrequest\"\nschemaVersion       = 1\nevmChainID          = 1\nname                = \"example eth request event spec\"\ncontractAddress     = \"0x613a38AC1659769640aaE063C651F48E0250454C\"\n\n# Optional fields:\n# requesters        = [\n#   \"0xaaaa1F8ee20f5565510B84f9353F1E333E753B7a\",\n#   \"0xbbbb70F0e81C6F3430dfdC9fa02fB22BdD818C4e\"\n# ]\n# minContractPaymentLinkJuels = \"100000000000000\"\n# externalJobID = \"0EEC7E1D-D0D2-476C-A1A8-72DFB6633F02\"\n# minIncomingConfirmations = 10\n\nobservationSource   = \"\"\"\n    ds          [type=\"http\" method=GET url=\"http://example.com\"]\n    ds_parse    [type=\"jsonparse\" path=\"USD\"]\n    ds_multiply [type=\"multiply\" times=100]\n\n    ds -> ds_parse -> ds_multiply\n\"\"\"\n```\n\n### Shared fields\n\nSee [shared fields](/chainlink-nodes/oracle-jobs/jobs/#shared-fields).\n\n### Unique fields\n\n- `contractAddress`: The Oracle or Operator contract to monitor for requests\n- `requesters`: Optional - Allows whitelisting requesters\n- `minContractPaymentLinkJuels` Optional - Allows you to specify a job-specific minimum contract payment\n- `minIncomingConfirmations` Optional - Allows you to specify a job-specific `MIN_INCOMING_CONFIRMATIONS` value, must be greater than or equal to 1\n\n### Job type specific pipeline variables\n\n- `$(jobSpec.databaseID)`: the ID of the job spec in the local database. You shouldn't need this in 99% of cases.\n- `$(jobSpec.externalJobID)`: the globally-unique job ID for this job. Used to coordinate between node operators in certain cases.\n- `$(jobSpec.name)`: the local name of the job.\n- `$(jobRun.meta)`: a map of metadata that can be sent to a bridge, etc.\n- `$(jobRun.logBlockHash)`: the block hash in which the initiating log was received.\n- `$(jobRun.logBlockNumber)`: the block number in which the initiating log was received.\n- `$(jobRun.logTxHash)`: the transaction hash that generated the initiating log.\n- `$(jobRun.logAddress)`: the address of the contract to which the initiating transaction was sent.\n- `$(jobRun.logTopics)`: the log's topics (`indexed` fields).\n- `$(jobRun.logData)`: the log's data (non-`indexed` fields).\n- `$(jobRun.blockReceiptsRoot)` : the root of the receipts trie of the block (hash).\n- `$(jobRun.blockTransactionsRoot)` : the root of the transaction trie of the block (hash).\n- `$(jobRun.blockStateRoot)` : the root of the final state trie of the block (hash).\n\n## Examples\n\n### Get > Uint256 Job\n\nLet's assume that a user makes a request to an oracle to call a public API, retrieve a number from the response, remove any decimals and return _uint256_.\n\n- The smart contract example can be found [here](/any-api/get-request/examples/single-word-response/).\n- The job spec example can be found [here](/chainlink-nodes/job-specs/direct-request-get-uint256/).\n\n### Get > Int256 Job\n\nLet's assume that a user makes a request to an oracle to call a public API, retrieve a number from the response, remove any decimals and return _int256_.\n\n- The job spec example can be found [here](/chainlink-nodes/job-specs/direct-request-get-int256/).\n\n### Get > Bool Job\n\nLet's assume that a user makes a request to an oracle to call a public API, retrieve a boolean from the response and return _bool_.\n\n- The job spec example can be found [here](/chainlink-nodes/job-specs/direct-request-get-bool/).\n\n### Get > String Job\n\nLet's assume that a user makes a request to an oracle and would like to fetch a _string_ from the response.\n\n- The smart contract example can be found [here](/any-api/get-request/examples/array-response/).\n- The job spec example can be found [here](/chainlink-nodes/job-specs/direct-request-get-string/).\n\n### Get > Bytes Job\n\nLet's assume that a user makes a request to an oracle and would like to fetch _bytes_ from the response (meaning a response that contains an arbitrary-length raw byte data).\n\n- The smart contract example can be found [here](/any-api/get-request/examples/large-responses/).\n- The job spec example can be found [here](/chainlink-nodes/job-specs/direct-request-get-bytes/).\n\n### Multi-Word Job\n\nLet's assume that a user makes a request to an oracle and would like to fetch multiple words in one single request.\n\n- The smart contract example can be found [here](/any-api/get-request/examples/multi-variable-responses/).\n- The job spec example can be found [here](/chainlink-nodes/job-specs/multi-word-job/).\n\n### Existing Job\n\nUsing an _existing_ Oracle Job makes your smart contract code more succinct. Let's assume that a user makes a request to an oracle that leverages [Etherscan External Adapter](https://github.com/smartcontractkit/external-adapters-js/tree/develop/packages/sources/etherscan) to retrieve the gas price.\n\n- The smart contract example can be found [here](/any-api/get-request/examples/existing-job-request/).\n- The job spec example can be found [here](/chainlink-nodes/job-specs/direct-request-existing-job/).\n"
    },
    {
      "title": "Flux Monitor Jobs",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/job-types/flux_monitor",
      "section": "nodeOperator",
      "content": "\nThe Flux Monitor job type is for continually-updating data feeds that aggregate responses from multiple oracles. The oracles servicing the feed submit rounds based on several triggers:\n\n- An occasional poll, which must show that there has been sufficient deviation from an off-chain data source before a new result is submitted\n- New rounds initiated by other oracles on the feeds. If another oracle notices sufficient deviation, all other oracles will submit their current observations as well.\n- A heartbeat, which ensures that even if no deviation occurs, we submit a new result to prove liveness. This can take one of two forms:\n    - The \"idle timer\", which begins counting down each time a round is started\n    - The \"drumbeat\", which simply ticks at a steady interval, much like a `cron` job\n\n**Spec format**\n\n```toml\ntype              = \"fluxmonitor\"\nschemaVersion     = 1\nname              = \"example flux monitor spec\"\ncontractAddress   = \"0x3cCad4715152693fE3BC4460591e3D3Fbd071b42\"\nexternalJobID     = \"0EEC7E1D-D0D2-476C-A1A8-72DFB6633F03\"\n\nthreshold = 0.5\nabsoluteThreshold = 0.0 # optional\n\nidleTimerPeriod   = \"1s\"\nidleTimerDisabled = false\n\npollTimerPeriod   = \"1m\"\npollTimerDisabled = false\n\ndrumbeatEnabled  = true\ndrumbeatSchedule = \"CRON_TZ=UTC * */20 * * * *\"\n\nobservationSource = \"\"\"\n    // data source 1\n    ds1 [type=\"http\" method=GET url=\"https://pricesource1.com\"\n         requestData=\"{\\\\\"coin\\\\\": \\\\\"ETH\\\\\", \\\\\"market\\\\\": \\\\\"USD\\\\\"}\"]\n    ds1_parse [type=\"jsonparse\" path=\"data,result\"]\n\n    // data source 2\n    ds2 [type=\"http\" method=GET url=\"https://pricesource2.com\"\n         requestData=\"{\\\\\"coin\\\\\": \\\\\"ETH\\\\\", \\\\\"market\\\\\": \\\\\"USD\\\\\"}\"]\n    ds2_parse [type=\"jsonparse\" path=\"data,result\"]\n\n    ds1 -> ds1_parse -> medianized_answer\n    ds2 -> ds2_parse -> medianized_answer\n\n    medianized_answer [type=median]\n\"\"\"\n```\n\n**Shared fields**\nSee [shared fields](/chainlink-nodes/oracle-jobs/jobs/#shared-fields).\n\n**Unique Fields**\n\n- `contractAddress`: the address of the FluxAggregator contract that manages the feed.\n- `threshold`: the percentage threshold of deviation from the previous on-chain answer that must be observed before a new set of observations are submitted to the contract.\n- `absoluteThreshold`: the absolute numerical deviation that must be observed from the previous on-chain answer before a new set of observations are submitted to the contract. This is primarily useful with data that can legitimately sometimes hit 0, as it's impossible to calculate a percentage deviation from 0.\n- `idleTimerPeriod`: the amount of time (after the start of the last round) after which a new round will be automatically initiated, regardless of any observed off-chain deviation.\n- `idleTimerDisabled`: whether the idle timer is used to trigger new rounds.\n- `drumbeatEnabled`: whether the drumbeat is used to trigger new rounds.\n- `drumbeatSchedule`: the cron schedule of the drumbeat. This field supports the same syntax as the cron job type (see the [cron library documentation](https://pkg.go.dev/github.com/robfig/cron?utm_source=godoc) for details). CRON_TZ is required.\n- `pollTimerPeriod`: the frequency with which the off-chain data source is checked for deviation against the previously submitted on-chain answer.\n- `pollTimerDisabled`: whether the occasional deviation check is used to trigger new rounds.\n- **Notes:**\n    - For duration parameters, the maximum unit of time is `h` (hour). Durations of a day or longer must be expressed in hours.\n    - If no time unit is provided, the default unit is nanoseconds, which is almost never what you want.\n\n**Job type specific pipeline variables**\n\n- `$(jobSpec.databaseID)`: the ID of the job spec in the local database. You shouldn't need this in 99% of cases.\n- `$(jobSpec.externalJobID)`: the globally-unique job ID for this job. Used to coordinate between node operators in certain cases.\n- `$(jobSpec.name)`: the local name of the job.\n- `$(jobRun.meta)`: a map of metadata that can be sent to a bridge, etc.\n"
    },
    {
      "title": "Keeper Jobs",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/job-types/keeper",
      "section": "nodeOperator",
      "content": "\nKeeper jobs occasionally poll a smart contract method that expresses whether something in the contract is ready for some on-chain action to be performed. When it's ready, the job executes that on-chain action.\n\nExamples:\n\n- Liquidations\n- Rebalancing portfolios\n- Rebase token supply adjustments\n- Auto-compounding\n- Limit orders\n\n**Spec format**\n\n```toml\ntype            = \"keeper\"\nschemaVersion   = 1\nevmChainID      = 1\nname            = \"example keeper spec\"\ncontractAddress = \"0x7b3EC232b08BD7b4b3305BE0C044D907B2DF960B\"\nfromAddress     = \"0xa8037A20989AFcBC51798de9762b351D63ff462e\"\n```\n\n**Shared fields**\n\nSee [shared fields](/chainlink-nodes/oracle-jobs/jobs/#shared-fields).\n\n**Unique fields**\n\n- `evmChainID`: The numeric chain ID of the chain on which Chainlink Automation Registry is deployed\n- `contractAddress`: The address of the Chainlink Automation Registry contract to poll and update\n- `fromAddress`: The Oracle node address from which to send updates\n- `externalJobID`: This is an optional field. When omitted it will be generated\n"
    },
    {
      "title": "Off-chain Reporting Jobs",
      "headings": [
        {
          "depth": 4,
          "slug": "bootstrap-node",
          "text": "Bootstrap node"
        },
        {
          "depth": 4,
          "slug": "oracle-node",
          "text": "Oracle node"
        }
      ],
      "url": "/chainlink-nodes/oracle-jobs/job-types/offchain_reporting",
      "section": "nodeOperator",
      "content": "\nOCR jobs (off-chain reporting jobs) are used very similarly to Flux Monitor jobs. They update data feeds with aggregated data from many Chainlink oracle nodes. However, they do this aggregation using a cryptographically-secure off-chain protocol that makes it possible for only a single node to submit all answers from all participating nodes during each round (with proofs that the other nodes' answers were legitimately provided by those nodes), which saves a significant amount of gas.\n\nOff-chain reporting jobs require the `FEATURE_OFFCHAIN_REPORTING=true` environment variable.\n\n#### Bootstrap node\n\nEvery OCR cluster requires at least one bootstrap node as a kind of \"rallying point\" that enables the other nodes to find one another. Bootstrap nodes do not participate in the aggregation protocol and do not submit answers to the feed.\n\n**Spec format**\n\n```toml\ntype               = \"offchainreporting\"\nschemaVersion      = 1\nevmChainID         = 1\ncontractAddress    = \"0x27548a32b9aD5D64c5945EaE9Da5337bc3169D15\"\np2pBootstrapPeers  = [\n    \"/dns4/chain.link/tcp/1234/p2p/16Uiu2HAm58SP7UL8zsnpeuwHfytLocaqgnyaYKP8wu7qRdrixLju\",\n]\nisBootstrapPeer = true\nexternalJobID   = \"0EEC7E1D-D0D2-476C-A1A8-72DFB6633F05\"\n```\n\n**Shared fields**\nSee [shared fields](/chainlink-nodes/oracle-jobs/jobs/#shared-fields).\n\n**Unique fields**\n\n- `contractAddress`: The address of the `OffchainReportingAggregator` contract.\n- `evmChainID`: The chain ID of the EVM chain in which the job will operate.\n- `p2pBootstrapPeers`: A list of libp2p dial addresses of the other bootstrap nodes helping oracle nodes find one another on the network.\n- `isBootstrapPeer`: This must be set to `true`.\n\n**Job type specific pipeline variables**\n\n- `$(jobSpec.databaseID)`: The ID of the job spec in the local database. You shouldn't need this in 99% of cases.\n- `$(jobSpec.externalJobID)`: The globally-unique job ID for this job. Used to coordinate between node operators in certain cases.\n- `$(jobSpec.name)`: The local name of the job.\n- `$(jobRun.meta)`: A map of metadata that can be sent to a bridge, etc.\n\n#### Oracle node\n\nOracle nodes, on the other hand, are responsible for submitting answers.\n\n**Spec format**\n\n```toml\ntype               = \"offchainreporting\"\nschemaVersion      = 1\nevmChainID         = 1\nname               = \"OCR: ETH/USD\"\ncontractAddress    = \"0x613a38AC1659769640aaE063C651F48E0250454C\"\nexternalJobID      = \"0EEC7E1D-D0D2-476C-A1A8-72DFB6633F06\"\np2pPeerID          = \"12D3KooWApUJaQB2saFjyEUfq6BmysnsSnhLnY5CF9tURYVKgoXK\"\np2pBootstrapPeers  = [\n    \"/dns4/chain.link/tcp/1234/p2p/16Uiu2HAm58SP7UL8zsnpeuwHfytLocaqgnyaYKP8wu7qRdrixLju\",\n]\nisBootstrapPeer    = false\nkeyBundleID        = \"7f993fb701b3410b1f6e8d4d93a7462754d24609b9b31a4fe64a0cb475a4d934\"\nmonitoringEndpoint = \"chain.link:4321\"\ntransmitterAddress = \"0xF67D0290337bca0847005C7ffD1BC75BA9AAE6e4\"\nobservationTimeout = \"10s\"\nblockchainTimeout  = \"20s\"\ncontractConfigTrackerSubscribeInterval = \"2m\"\ncontractConfigTrackerPollInterval = \"1m\"\ncontractConfigConfirmations = 3\nobservationSource = \"\"\"\n    // data source 1\n    ds1          [type=\"bridge\" name=eth_usd]\n    ds1_parse    [type=\"jsonparse\" path=\"one,two\"]\n    ds1_multiply [type=\"multiply\" times=100]\n\n    // data source 2\n    ds2          [type=\"http\" method=GET url=\"https://chain.link/eth_usd\"\n                  requestData=\"{\\\\\"hi\\\\\": \\\\\"hello\\\\\"}\"]\n    ds2_parse    [type=\"jsonparse\" path=\"three,four\"]\n    ds2_multiply [type=\"multiply\" times=100]\n\n    ds1 -> ds1_parse -> ds1_multiply -> answer\n    ds2 -> ds2_parse -> ds2_multiply -> answer\n\n    answer [type=median]\n\"\"\"\n```\n\n**Shared fields**\nSee [shared fields](/chainlink-nodes/oracle-jobs/jobs/#shared-fields).\n\n**Unique fields**\n\n- `contractAddress`: The address of the `OffchainReportingAggregator` contract.\n- `evmChainID`: The chain ID of the EVM chain in which the job will operate.\n- `p2pPeerID`: The base58-encoded libp2p public key of this node.\n- `p2pBootstrapPeers`: A list of libp2p dial addresses of the other bootstrap nodes helping oracle nodes find one another on the network.\n- `keyBundleID`: The hash of the OCR key bundle to be used by this node. The Chainlink node keystore manages these key bundles. Use the node **Key Management** UI or the `chainlink keys ocr` sub-commands in the CLI to create and manage key bundles.\n- `monitoringEndpoint`: The URL of the telemetry endpoint to send OCR metrics to.\n- `transmitterAddress`: The Ethereum address from which to send aggregated submissions to the OCR contract.\n- `observationTimeout`: The maximum duration to wait before an off-chain request for data is considered to be failed/unfulfillable.\n- `blockchainTimeout`: The maximum duration to wait before an on-chain request for data is considered to be failed/unfulfillable.\n- `contractConfigTrackerSubscribeInterval`: The interval at which to retry subscribing to on-chain config changes if a subscription has not yet successfully been made.\n- `contractConfigTrackerPollInterval`: The interval at which to proactively poll the on-chain config for changes.\n- `contractConfigConfirmations`: The number of blocks to wait after an on-chain config change before considering it worthy of acting upon.\n\n**Job type specific pipeline variables**\n\n- `$(jobSpec.databaseID)`: The ID of the job spec in the local database. You shouldn't need this in 99% of cases.\n- `$(jobSpec.externalJobID)`: The globally-unique job ID for this job. Used to coordinate between node operators in certain cases.\n- `$(jobSpec.name)`: The local name of the job.\n- `$(jobRun.meta)`: A map of metadata that can be sent to a bridge, etc.\n"
    },
    {
      "title": "Webhook Jobs",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/job-types/webhook",
      "section": "nodeOperator",
      "content": "\nWebhook jobs can be initiated by HTTP request, either by a user or external initiator.\n\n:::note\nYou'll need `FEATURE_WEBHOOK_V2=true` in your `.env` file.\n:::\n\nThis is an example webhook job:\n\n```toml\ntype            = \"webhook\"\nschemaVersion   = 1\nexternalInitiators = [\n  { name = \"my-external-initiator-1\", spec = \"{\\\"foo\\\": 42}\" },\n  { name = \"my-external-initiator-2\", spec = \"{}\" }\n]\nobservationSource   = \"\"\"\n    parse_request  [type=\"jsonparse\" path=\"data,result\" data=\"$(jobRun.requestBody)\"]\n    multiply       [type=\"multiply\" input=\"$(parse_request)\" times=\"100\"]\n    send_to_bridge [type=\"bridge\" name=\"my_bridge\" requestData=\"{ \\\\\"result\\\\\": $(multiply) }\"]\n\n    parse_request -> multiply -> send_to_bridge\n\"\"\"\n```\n\nAll webhook jobs can have runs triggered by a logged in user.\n\nWebhook jobs may additionally specify zero or more external initiators, which can also trigger runs for this job. The name must exactly match the name of the referred external initiator. The external initiator definition here must contain a `spec` which defines the JSON payload that will be sent to the External Initiator on job creation if the external initiator has a URL. If you don't care about the spec, you can simply use the empty JSON object.\n\n**Unique fields**\n\n- `externalInitiators`: an array of `{name, spec}` objects, where `name` is the name registered with the node, and `spec` is the job spec to be forwarded to the external initiator when it is created.\n\n**Shared fields**\nSee [shared fields](/chainlink-nodes/oracle-jobs/jobs/#shared-fields).\n\n**Job type specific pipeline variables**\n\n- `$(jobSpec.databaseID)`: the ID of the job spec in the local database. You shouldn't need this in 99% of cases.\n- `$(jobSpec.externalJobID)`: the globally-unique job ID for this job. Used to coordinate between node operators in certain cases.\n- `$(jobSpec.name)`: the local name of the job.\n- `$(jobRun.meta)`: a map of metadata that can be sent to a bridge, etc.\n- `$(jobRun.requestBody)`: the body of the request that initiated the job run.\n"
    },
    {
      "title": "v2 Jobs",
      "headings": [
        {
          "depth": 2,
          "slug": "what-is-a-job",
          "text": "What is a Job?"
        },
        {
          "depth": 2,
          "slug": "example-v2-job-spec",
          "text": "Example v2 job spec"
        },
        {
          "depth": 2,
          "slug": "shared-fields",
          "text": "Shared fields"
        }
      ],
      "url": "/chainlink-nodes/oracle-jobs/jobs",
      "section": "nodeOperator",
      "content": "\n:::note[Chainlink v2 jobs ]\nThis page describes Chainlink v2 jobs. In the Operator UI interface, these are called TOML jobs. The v1 jobs are removed in Chainlink nodes versioned 1.0.0 and later. To learn how to migrate your v1 jobs to v2 jobs, see [Migrating to v2 Jobs](/chainlink-nodes/oracle-jobs/migration-v1-v2/). If you still need to use v1 jobs on older versions of Chainlink nodes, see the [v1 Jobs](/chainlink-nodes/oracle-jobs/v1/job-specifications/) documentation.\n:::\n\n## What is a Job?\n\nChainlink nodes require jobs to do anything useful. For example, posting asset price data on-chain requires jobs. Chainlink nodes support the following job types:\n\n- [`cron`](/chainlink-nodes/oracle-jobs/job-types/cron/)\n- [`directrequest`](/chainlink-nodes/oracle-jobs/job-types/direct_request/)\n- [`fluxmonitor`](/chainlink-nodes/oracle-jobs/job-types/flux_monitor/)\n- [`keeper`](/chainlink-nodes/oracle-jobs/job-types/keeper/)\n- [`offchainreporting`](/chainlink-nodes/oracle-jobs/job-types/offchain_reporting/)\n- [`webhook`](/chainlink-nodes/oracle-jobs/job-types/webhook/)\n\nJobs are represented by TOML specifications.\n\n## Example v2 job spec\n\nThe following is an example `cron` job spec. This is a simple spec that you can add to a node:\n\n```toml\ntype            = \"cron\"\nschemaVersion   = 1\nschedule        = \"CRON_TZ=UTC 0 0 1 1 *\"\n# Optional externalJobID: Automatically generated if unspecified\n# externalJobID   = \"0EEC7E1D-D0D2-476C-A1A8-72DFB6633F46\"\nobservationSource   = \"\"\"\nds          [type=\"http\" method=GET url=\"https://chain.link/ETH-USD\"];\nds_parse    [type=\"jsonparse\" path=\"data,price\"];\nds_multiply [type=\"multiply\" times=100];\nds -> ds_parse -> ds_multiply;\n\"\"\"\n```\n\n## Shared fields\n\nEvery job type supported by a node shares the following TOML fields:\n\n- `name`: The name of the job in the Operator UI\n- `type`: Specifies the v2 job type, which can be one of the following:\n  - `cron`\n  - `directrequest`\n  - `fluxmonitor`\n  - `keeper`\n  - `offchainreporting`\n  - `webhook`\n- `schemaVersion`: Must be present and set to a value of `1`. This field will handle progressive iterations of the job spec format gracefully with backwards-compatibility.\n- `observationSource`: The v2 pipeline task DAG, which is specified in DOT syntax. See below for information on writing pipeline DAGs.\n- `maxTaskDuration`: The default maximum duration that any task is allowed to run. If the duration is exceeded, the task is errored. This value can be overridden on a per-task basis using the `timeout` attribute. See the [Shared attributes](/chainlink-nodes/oracle-jobs/task-types/tasks#shared-attributes) section for details.\n- `externalJobID`: An optional way for a user to deterministically provide the ID of a job. The ID must be unique. For example, you can specify an `externalJobID` if you want to run the same `directrequest` job on two different Chainlink nodes with different bridge names. The spec contents differ slightly, but you can use the same `externalJobID` on both jobs, specify that in your on-chain requests, and both nodes will pick it up. If you do not provide an `externalJobID`, the node generates the ID for you.\n- `gasLimit`: Optional gas limit for any outgoing transactions spawned by this job. When specified, it overrides `ETH_GAS_LIMIT_DEFAULT` env variable.\n"
    },
    {
      "title": "Migrating to v2 Jobs",
      "headings": [
        {
          "depth": 2,
          "slug": "comparison-between-v1-and-v2-jobs",
          "text": "Comparison between v1 and v2 jobs"
        },
        {
          "depth": 3,
          "slug": "dag-dependencies-and-variables",
          "text": "DAG dependencies and variables"
        },
        {
          "depth": 3,
          "slug": "quotes",
          "text": "Quotes"
        },
        {
          "depth": 3,
          "slug": "misc-notes",
          "text": "Misc. notes"
        },
        {
          "depth": 2,
          "slug": "example-migrations",
          "text": "Example Migrations"
        },
        {
          "depth": 3,
          "slug": "runlog-with-eth-abi-encoding",
          "text": "Runlog with ETH ABI encoding"
        },
        {
          "depth": 3,
          "slug": "simple-fetch-runlog",
          "text": "Simple fetch (runlog)"
        },
        {
          "depth": 3,
          "slug": "cron",
          "text": "Cron"
        },
        {
          "depth": 3,
          "slug": "web---webhook",
          "text": "Web (-> Webhook)"
        }
      ],
      "url": "/chainlink-nodes/oracle-jobs/migration-v1-v2",
      "section": "nodeOperator",
      "content": "\nChainlink nodes with version 1.0.0 and later support v2 jobs in TOML format. Support for v1 jobs in JSON format is removed.\n\n## Comparison between v1 and v2 jobs\n\nv1 jobs were intended for extremely targeted use cases, so they opted for simplicity in the job spec over explicitness.\n\nThe v2 Job Specs support expanding functionality in Chainlink nodes and prefer explicitness, so they are are much more powerful and support advanced capabilities like running tasks in parallel. This change provides the following benefits to node operators:\n\n- Support increased job complexity\n- Better performance\n- Easier scaling\n- Ability to run more off-chain computing\n- Reliability\n- Easier support\n- Improved security\n\n### DAG dependencies and variables\n\nv2 jobs require the author to specify dependencies using [DOT syntax](https://en.wikipedia.org/wiki/DOT_(graph_description_language)). If a task needs data produced by another task, this must be specified using DOT.\n\nTo facilitate explicitness, v2 jobs require the author to specify inputs to tasks using `$(variable)` syntax. For example, if an `http` task feeds data into a `jsonparse` task, it must be specified like the following example:\n\n```toml\nfetch [type=\"http\" method=GET url=\"http://chain.link/price_feeds/ethusd\"]\n\n// This task consumes the output of the 'fetch' task in its 'data' parameter\nparse [type=\"jsonparse\" path=\"data,result\" data=\"$(fetch)\"]\n\n// This is the specification of the dependency\nfetch -> parse\n```\n\nTask names must be defined before their opening `[` bracket. In this example, the name of the task is `fetch`. The output of each task is stored in the variable corresponding to the name of the task. In some cases, tasks return complex values like maps or arrays. By using dot access syntax, you can access the elements of these values. For example:\n\n```toml\n// Assume that this task returns the following object:\n//  { \"ethusd\": 123.45, \"btcusd\": 678.90 }\nparse [type=\"jsonparse\" path=\"data\" data=\"$(fetch)\"]\n\n// Now, we want to send the ETH/USD price to one bridge and the BTC/USD price to another:\nsubmit_ethusd [type=\"bridge\" name=\"ethusd\" requestData=\"{ \\\\\"data\\\\\": { \\\\\"value\\\\\": $(parse.ethusd) }}\"]\nsubmit_btcusd [type=\"bridge\" name=\"btcusd\" requestData=\"{ \\\\\"data\\\\\": { \\\\\"value\\\\\": $(parse.btcusd) }}\"]\n\nparse -> submit_ethusd\nparse -> submit_btcusd\n```\n\n### Quotes\n\nSome tasks, like the `bridge` tasks above, require you to specify a JSON object. Because the keys of JSON objects must be enclosed in double quotes, you must use the alternative `<` angle bracket `>` quotes. Angle brackets also enable multi-line strings, which can be useful when a JSON object parameter is large:\n\n```toml\nsubmit_btcusd [type=\"bridge\"\n               name=\"btcusd\"\n               requestData=\"{\\\\\"data\\\\\":{\\\\\"value\\\\\": $(foo), \\\\\"price\\\\\": $(bar), \\\\\"timestamp\\\\\": $(baz)}}\"\n               ]\n```\n\n\n### Misc. notes\n\n- Each job type provides a particular set of variables to its pipeline. See the documentation for each job type to understand which variables are provided.\n- Each task type provides a certain kind of output variable to other tasks that consume it. See the documentation for each task type to understand their output types.\n\n---\n\n## Example Migrations\n\n### Runlog with ETH ABI encoding\n\n**v1 spec**\n\nThis spec relies on CBOR-encoded on-chain values for the `httpget` URL and `jsonparse` path.\n\n```json\n{\n  \"name\": \"Get > Bytes32\",\n  \"initiators\": [\n    {\n      \"type\": \"runlog\",\n      \"params\": {\n        \"address\": \"YOUR_ORACLE_CONTRACT_ADDRESS\"\n      }\n    }\n  ],\n  \"tasks\": [\n    {\n      \"type\": \"httpget\"\n    },\n    {\n      \"type\": \"jsonparse\"\n    },\n    {\n      \"type\": \"ethbytes32\"\n    },\n    {\n      \"type\": \"ethtx\"\n    }\n  ]\n}\n```\n\nNotes:\n- In v1, the job ID is randomly generated at creation time. In v2 jobs, the job ID can be manually specified or the Chainlink node will automatically generate it.\n- In v2, the `ethbytes32` task and all of the other ABI encoding tasks are now encapsulated in the `ethabiencode` task with much more flexibility. See the [ETH ABI Encode task](/chainlink-nodes/oracle-jobs/task-types/task_eth_abi_encode/) page to learn more.\n\n**Equivalent v2 spec:**\n\n```toml\ntype                = \"directrequest\"\nschemaVersion       = 1\nname                = \"Get > Bytes32\"\ncontractAddress     = \"0x613a38AC1659769640aaE063C651F48E0250454C\"\n# Optional externalJobID: Automatically generated if unspecified\n# externalJobID       = \"0EEC7E1D-D0D2-476C-A1A8-72DFB6633F47\"\nobservationSource   = \"\"\"\n    decode_log   [type=\"ethabidecodelog\"\n                  abi=\"OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)\"\n                  data=\"$(jobRun.logData)\"\n                  topics=\"$(jobRun.logTopics)\"]\n\n    decode_cbor  [type=\"cborparse\" data=\"$(decode_log.data)\"]\n    fetch        [type=\"http\" method=GET url=\"$(decode_cbor.url)\"]\n    parse        [type=\"jsonparse\" path=\"$(decode_cbor.path)\" data=\"$(fetch)\"]\n    encode_data  [type=\"ethabiencode\" abi=\"(uint256 value)\" data=\"{ \\\\\"value\\\\\": $(parse) }\"]\n    encode_tx    [type=\"ethabiencode\"\n                  abi=\"fulfillOracleRequest(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes32 data)\"\n                  data=\"{\\\\\"requestId\\\\\": $(decode_log.requestId), \\\\\"payment\\\\\": $(decode_log.payment), \\\\\"callbackAddress\\\\\": $(decode_log.callbackAddr), \\\\\"callbackFunctionId\\\\\": $(decode_log.callbackFunctionId), \\\\\"expiration\\\\\": $(decode_log.cancelExpiration), \\\\\"data\\\\\": $(encode_data)}\"\n                  ]\n    submit_tx    [type=\"ethtx\" to=\"0x613a38AC1659769640aaE063C651F48E0250454C\" data=\"$(encode_tx)\"]\n\n    decode_log -> decode_cbor -> fetch -> parse -> encode_data -> encode_tx -> submit_tx\n\"\"\"\n```\n\n### Simple fetch (runlog)\n\n**v1 spec:**\n\n```json\n{\n  \"initiators\": [\n    {\n      \"type\": \"RunLog\",\n      \"params\": {\n        \"address\": \"0x51DE85B0cD5B3684865ECfEedfBAF12777cd0Ff8\"\n      }\n    }\n  ],\n  \"tasks\": [\n    {\n      \"type\": \"HTTPGet\",\n      \"params\": {\n        \"get\": \"https://bitstamp.net/api/ticker/\"\n      }\n    },\n    {\n      \"type\": \"JSONParse\",\n      \"params\": {\n        \"path\": [\n          \"last\"\n        ]\n      }\n    },\n    {\n      \"type\": \"Multiply\",\n      \"params\": {\n        \"times\": 100\n      }\n    },\n    {\n      \"type\": \"EthUint256\"\n    },\n    {\n      \"type\": \"EthTx\"\n    }\n  ],\n  \"startAt\": \"2020-02-09T15:13:03Z\",\n  \"endAt\": null,\n  \"minPayment\": \"1000000000000000000\"\n}\n```\n\n**Equivalent v2 spec:**\n\n```toml\ntype                = \"directrequest\"\nschemaVersion       = 1\nname                = \"Get > Bytes32\"\ncontractAddress     = \"0x613a38AC1659769640aaE063C651F48E0250454C\"\n# Optional externalJobID: Automatically generated if unspecified\n# externalJobID       = \"0EEC7E1D-D0D2-476C-A1A8-72DFB6633F47\"\nobservationSource   = \"\"\"\n    decode_log   [type=\"ethabidecodelog\"\n                  abi=\"OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)\"\n                  data=\"$(jobRun.logData)\"\n                  topics=\"$(jobRun.logTopics)\"]\n\n    fetch       [type=\"http\" method=get url=\"https://bitstamp.net/api/ticker/\"]\n    parse       [type=\"jsonparse\" data=\"$(fetch)\" path=\"last\"]\n    multiply    [type=\"multiply\" input=\"$(parse)\" times=100]\n    encode_data [type=\"ethabiencode\" abi=\"(uint256 value)\" data=\"{ \\\\\"value\\\\\": $(multiply) }\"]\n    encode_tx   [type=\"ethabiencode\"\n                 abi=\"fulfillOracleRequest(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes32 data)\"\n                 data=\"{\\\\\"requestId\\\\\": $(decode_log.requestId), \\\\\"payment\\\\\": $(decode_log.payment), \\\\\"callbackAddress\\\\\": $(decode_log.callbackAddr), \\\\\"callbackFunctionId\\\\\": $(decode_log.callbackFunctionId), \\\\\"expiration\\\\\": $(decode_log.cancelExpiration), \\\\\"data\\\\\": $(encode_data)}\"\n                 ]\n    submit_tx [type=\"ethtx\" to=\"0x613a38AC1659769640aaE063C651F48E0250454C\" data=\"$(encode_tx)\"]\n\n    decode_log -> fetch -> parse -> multiply -> encode_data -> encode_tx -> submit_tx\n\"\"\"\n```\n\n### Cron\n\n**v1 spec:**\n\n```json\n{\n  \"initiators\": [\n    {\n      \"type\": \"cron\",\n      \"params\": {\n        \"schedule\": \"CRON_TZ=UTC * */20 * * * *\"\n      }\n    }\n  ],\n  \"tasks\": [\n    {\n      \"type\": \"HttpGet\",\n      \"params\": {\n        \"get\": \"https://example.com/api\"\n      }\n    },\n    {\n      \"type\": \"JsonParse\",\n      \"params\": {\n        \"path\": [\n          \"data\",\n          \"price\"\n        ]\n      }\n    },\n    {\n      \"type\": \"Multiply\",\n      \"params\": {\n        \"times\": 100\n      }\n    },\n    {\n      \"type\": \"EthUint256\"\n    },\n    {\n      \"type\": \"EthTx\"\n    }\n  ]\n}\n```\n\n**Equivalent v2 spec:**\n\n```toml\ntype            = \"cron\"\nschemaVersion   = 1\nschedule        = \"CRON_TZ=UTC * */20 * * * *\"\n# Optional externalJobID: Automatically generated if unspecified\n# externalJobID   = \"0EEC7E1D-D0D2-476C-A1A8-72DFB6633F46\"\nobservationSource   = \"\"\"\n    fetch       [type=\"http\" method=GET url=\"https://example.com/api\"]\n    parse       [type=\"jsonparse\" data=\"$(fetch)\" path=\"data,price\"]\n    multiply    [type=\"multiply\" input=\"$(parse)\" times=100]\n    encode_tx   [type=\"ethabiencode\"\n                 abi=\"submit(uint256 value)\"\n                 data=\"{ \\\\\"value\\\\\": $(multiply) }\"]\n    submit_tx   [type=\"ethtx\" to=\"0x859AAa51961284C94d970B47E82b8771942F1980\" data=\"$(encode_tx)\"]\n\n    fetch -> parse -> multiply -> encode_tx -> submit_tx\n\"\"\"\n```\n\n### Web (-> Webhook)\n\n**v1 spec:**\n\n```json\n{\n  \"initiators\": [\n    {\n      \"type\": \"web\"\n    }\n  ],\n  \"tasks\": [\n    {\n      \"type\": \"multiply\",\n      \"params\": {\n        \"times\": 100\n      }\n    },\n    {\n      \"type\": \"custombridge\"\n    }\n  ]\n}\n```\n\n**Equivalent v2 spec:**\n\n```toml\ntype            = \"webhook\"\nschemaVersion   = 1\n# Optional externalJobID: Automatically generated if unspecified\n# externalJobID   = \"0EEC7E1D-D0D2-476C-A1A8-72DFB6633F46\"\nobservationSource   = \"\"\"\n    multiply       [type=\"multiply\" input=\"$(jobRun.requestBody)\" times=100]\n    send_to_bridge [type=\"bridge\" name=\"custombridge\" requestData=\"{ \\\\\"data\\\\\": { \\\\\"value\\\\\": $(multiply) }}\"]\n\n    multiply -> send_to_bridge\n\"\"\"\n```\n"
    },
    {
      "title": "Job Pipelines",
      "headings": [
        {
          "depth": 2,
          "slug": "writing-pipelines",
          "text": "Writing pipelines"
        }
      ],
      "url": "/chainlink-nodes/oracle-jobs/task-types/pipelines",
      "section": "nodeOperator",
      "content": "\n## Writing pipelines\n\nPipelines are composed of tasks arranged in a DAG (directed acyclic graph). Pipelines are expressed in [DOT syntax](https://en.wikipedia.org/wiki/DOT_%28graph_description_language%29#Directed_graphs).\n\nEach node in the graph is a task with a user-specified ID and a set of configuration parameters and attributes:\n\n```toml\nmy_fetch_task [type=\"http\" method=GET url=\"https://chain.link/eth_usd\"]\n```\n\nThe edges between tasks define how data flows from one task to the next. Some tasks can have multiple inputs, such as `median`. Other tasks are limited to 0 (`http`) or 1 (`jsonparse`).\n\n```toml\ndata_source_1  [type=\"http\" method=GET url=\"https://chain.link/eth_usd\"]\ndata_source_2  [type=\"http\" method=GET url=\"https://coingecko.com/eth_usd\"]\nmedianize_data [type=\"median\"]\nsubmit_to_ea   [type=\"bridge\" name=\"my_bridge\"]\n\ndata_source_1 -> medianize_data\ndata_source_2 -> medianize_data\nmedianize_data -> submit_to_ea\n```\n\n![DAG Example](/images/dag_example.png)\n"
    },
    {
      "title": "'Any' Task",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/task-types/task_any",
      "section": "nodeOperator",
      "content": "\nReturns a random value from the set of inputs passed in.\n\n**Parameters**\n\nNone.\n\n**Inputs**\n\nCan be anything.\n\n**Outputs**\n\nA randomly-selected value from the set of inputs.\n\n**Example**\n\n```toml\nfetch1   [type=\"http\" ...]\nfetch2   [type=\"http\" ...]\nfetch3   [type=\"http\" ...]\npick_any [type=\"any\"]\n\nfetch1 -> pick_any\nfetch2 -> pick_any\nfetch3 -> pick_any\n```\n\n`pick_any` will return either the result of `fetch1`, `fetch2`, or `fetch3`.\n\n"
    },
    {
      "title": "Base64 Decode Task",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/task-types/task_base64decode",
      "section": "nodeOperator",
      "content": "\nAccepts a base64 encoded string and returns decoded bytes.\n\n**Parameters**\n\n- `input`: a base64 encoded string.\n\n**Outputs**\n\nDecoded bytes.\n\n**Example**\n\n```toml\nmy_base64decode_task [type=\"base64decode\" input=\"SGVsbG8sIHBsYXlncm91bmQ=\"]\n```\n\nGiven the input `SGVsbG8sIHBsYXlncm91bmQ=`, the task will return `Hello, playground` (as ASCII bytes).\n"
    },
    {
      "title": "Base64 Encode Task",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/task-types/task_base64encode",
      "section": "nodeOperator",
      "content": "\nEncodes bytes/string into a Base64 string.\n\n**Parameters**\n\n- `input`: Byte array or string to be encoded.\n\n**Outputs**\n\nString with Base64 encoding of input.\n\n**Example**\n\n```toml\nmy_base64encode_task [type=\"base64encode\" input=\"Hello, playground\"]\n```\n\nGiven the input string \"Hello, playground\", the task will return \"SGVsbG8sIHBsYXlncm91bmQ=\".\n"
    },
    {
      "title": "Bridge Task",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/task-types/task_bridge",
      "section": "nodeOperator",
      "content": "\nBridge tasks make HTTP POST requests to pre-configured URLs. Bridges can be configured via the UI or the CLI, and are referred to by a simple user-specified name. This is the way that most jobs interact with [External Adapters](/chainlink-nodes/external-adapters/external-adapters/).\n\n**Parameters**\n\n- `name`: an arbitrary name given to the bridge by the node operator.\n- `requestData` (optional): a statically-defined payload to be sent to the external adapter.\n- `async` (optional): a boolean indicating whether the task should hibernate and wait for the Bridge to make an HTTP request back to the node at a later time with the result.\n\n**Outputs**\n\nA string containing the response body.\n\n**Example**\n\n```toml\nmy_bridge_task [type=\"bridge\"\n                name=\"some_bridge\"\n                requestData=\"{\\\\\"data\\\\\":{\\\\\"foo\\\\\": $(foo), \\\\\"bar\\\\\": $(bar)}}\"\n                ]\n```\n"
    },
    {
      "title": "CBOR Parse Task",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/task-types/task_cborparse",
      "section": "nodeOperator",
      "content": "\nCBOR Parse tasks parse a CBOR payload, typically as part of a Direct Request workflow. In Direct Request, a user makes an on-chain request using a `ChainlinkClient` contract, which encodes the request parameters as CBOR. See below for an example.\n\n**Parameters**\n\n- `data`: A byte array containing the CBOR payload.\n- `mode`: An optional parameter that specifies how to parse the incoming CBOR. The default mode is `diet`, which expects the input to be a map. Set the mode to `standard` to pass literal values through \"as-is\". Empty inputs return nil.\n\n**Outputs**\n\nA map containing the request parameters. Parameters can be individually accessed using `$(dot.accessors)`.\n\n**Example**\n\n```toml\n// First, we parse the request log and the CBOR payload inside of it\ndecode_log  [type=\"ethabidecodelog\"\n             data=\"$(jobRun.logData)\"\n             topics=\"$(jobRun.logTopics)\"\n             abi=\"SomeContractEvent(bytes32 requestID, bytes cborPayload)\"]\n\ndecode_cbor [type=\"cborparse\"\n             data=\"$(decode_log.cborPayload)\"]\n\n// Then, we use the decoded request parameters to make an HTTP fetch\nfetch [type=\"http\" url=\"$(decode_cbor.fetchURL)\" method=GET]\nparse [type=\"jsonparse\" path=\"$(decode_cbor.jsonPath)\" data=\"$(fetch)\"]\n\n// ... etc ...\n```\n\nSee the [Direct Request page](/chainlink-nodes/oracle-jobs/job-types/direct_request) for a more comprehensive example.\n"
    },
    {
      "title": "Divide Task",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/task-types/task_divide",
      "section": "nodeOperator",
      "content": "\nDivides the provided `input` by the `divisor` and returns the result with a number of decimal places defined in the `precision` value.\n\n**Parameters**\n\n- `input`: The value to be divided\n    - number\n    - stringified number\n    - bytes-ified number\n    - `$(variable)`\n- `divisor`: The value by which to divide the `input`\n    - number\n    - stringified number\n    - bytes-ified number\n    - `$(variable)`\n- `precision`: The number of decimal places to retain in the result\n    - number\n    - stringified number\n    - bytes-ified number\n    - `$(variable)`\n\n**Outputs**\n\nThe result of the division.\n\n**Example**\n\n```toml\nmy_divide_task [type=\"divide\"\n                input=\"$(json_parse_result)\"\n                divisor=\"3\"\n                precision=\"2\"]\n```\n\nGiven the input `10`, this example returns `3.33`.\n"
    },
    {
      "title": "ETH ABI Decode Task",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/task-types/task_eth_abi_decode",
      "section": "nodeOperator",
      "content": "\nDecodes a ETH ABI-encoded payload, typically the result of an [ETH Call task](/chainlink-nodes/oracle-jobs/task-types/task_eth_call/).\n\n**Parameters**\n\n- `abi`: a canonical ETH ABI argument string. Should be formatted exactly as in Solidity. Each argument must be named. Examples:\n    - `uint256 foo, bytes32 bar, address[] baz`\n    - `address a, uint80[3][] u, bytes b, bytes32 b32`\n- `data`: the ABI-encoded payload to decode. Can be:\n    - a byte array\n    - a hex-encoded string beginning with `0x`\n\n**Outputs**\n\nA map containing the decoded values.\n\n**Example**\n\n```toml\ndecode [type=\"ethabidecode\"\n        abi=\"bytes32 requestID, uint256 price, address[] oracles\"\n        data=\"$(eth_call_result)\"]\n```\n\nThis task will return a map with the following schema:\n\n```json\n{\n    \"requestID\": ..., // [32]byte value\n    \"price\": ...,     // a number\n    \"oracles\": [\n        \"0x859AAa51961284C94d970B47E82b8771942F1980\",\n        \"0x51DE85B0cD5B3684865ECfEedfBAF12777cd0Ff8\",\n        ...\n    ]\n}\n```\n"
    },
    {
      "title": "ETH ABI Decode Log Task",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/task-types/task_eth_abi_decode_log",
      "section": "nodeOperator",
      "content": "\nDecodes a log emitted by an ETH contract.\n\n**Parameters**\n\n- `abi`: a canonical ETH log event definition. Should be formatted exactly as in Solidity. Each argument must be named. Examples:\n  - `NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt)`\n  - `AuthorizedSendersChanged(address[] senders)`\n- `data`: the ABI-encoded log data. Can be:\n  - a byte array\n  - a hex-encoded string beginning with `0x`\n  - ... but generally should just be set to `$(jobRun.logData)` (see the [Direct Request page](/chainlink-nodes/oracle-jobs/job-types/direct_request))\n- `topics`: the ABI-encoded log topics (i.e., the `indexed` parameters)\n  - an array of bytes32 values\n  - an array of hex-encoded bytes32 values beginning with `0x`\n  - ... but generally should just be set to `$(jobRun.logTopics)` (see the [Direct Request page](/chainlink-nodes/oracle-jobs/job-types/direct_request))\n\n**Outputs**\n\nA map containing the decoded values.\n\n**Example**\n\n```toml\ndecode [type=\"ethabidecodelog\"\n        abi=\"NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt)\"\n        data=\"$(jobRun.logData)\"\n        topics=\"$(jobRun.logTopics)\"]\n```\n\nThis task will return a map with the following schema:\n\n```json\n{\n    \"roundId\": ...,   // a number\n    \"startedBy\": ..., // an address\n    \"startedAt\": ..., // a number\n}\n```\n"
    },
    {
      "title": "ETH ABI Encode Task",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/task-types/task_eth_abi_encode",
      "section": "nodeOperator",
      "content": "\nEncodes a bytes payload according to ETH ABI encoding, typically in order to perform an [ETH Call](/chainlink-nodes/oracle-jobs/task-types/task_eth_call/) or an [ETH Tx](/chainlink-nodes/oracle-jobs/task-types/task_eth_tx/).\n\n**Parameters**\n\n- `abi`: a canonical ETH ABI argument string. Should be formatted exactly as in Solidity. Each argument must be named. If a method name is provided, the 4-byte method signature is prepended to the result. Examples:\n    - `uint256 foo, bytes32 bar, address[] baz`\n    - `fulfillRequest(bytes32 requestID, uint256 answer)`\n- `data`: a map of the values to be encoded. The task will make a best effort at converting values to the appropriate types.\n\n**Outputs**\n\nA byte array.\n\n**Example**\n\n```toml\nencode [type=\"ethabiencode\"\n        abi=\"fulfillRequest(bytes32 requestID, uint256 answer)\"\n        data=\"{\\\\\"requestID\\\\\": $(foo), \\\\\"answer\\\\\": $(bar)}\"\n        ]\n```\n"
    },
    {
      "title": "ETH Call Task",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/task-types/task_eth_call",
      "section": "nodeOperator",
      "content": "\nMakes a non-mutating contract call to the specified contract with the specified data payload.\n\n**Parameters**\n\n- `contract`: the address of the contract to call.\n- `data`: the data to attach to the call (including the function selector).\n- `gas`: the amount of gas to attach to the transaction.\n- `from`: The from address with which the call should be made. Defaults to zero address.\n- `gasPrice`: The gasPrice for the call. Defaults to zero.\n- `gasTipCap`: The gasTipCap (EIP-1559) for the call. Defaults to zero.\n- `gasFeeCap`: The gasFeeCap (EIP-1559) for the call. Defaults to zero.\n- `gasUnlimited`: A boolean indicating if unlimited gas should be provided for the call. If set to true, do not pass the `gas` parameter.\n\n**Outputs**\n\nAn ABI-encoded byte array containing the return value of the contract function.\n\n**Example**\n\n```toml\nencode_call  [type=\"ethabiencode\"\n              abi=\"checkUpkeep(bytes data)\"\n              data=\"{ \\\\\"data\\\\\": $(upkeep_data) }\"]\n\ncall          [type=\"ethcall\"\n               contract=\"0xa36085F69e2889c224210F603D836748e7dC0088\"\n               data=\"$(encode_call)\"\n               gas=\"1000\"]\n\ndecode_result [type=\"ethabidecode\"\n               abi=\"bool upkeepNeeded, bytes performData\"\n               data=\"$(call)\"]\n\nencode_call -> call -> decode_result\n```\n"
    },
    {
      "title": "ETH Tx Task",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/task-types/task_eth_tx",
      "section": "nodeOperator",
      "content": "\nMakes a mutating transaction to the specified contract with the specified data payload. The transaction is guaranteed to succeed eventually.\n\n**Parameters**\n\n- `from`: one or more addresses of the externally-owned account from which to send the transaction. If left blank, it will select a random address on every send for the given chain ID.\n- `to`: the address of the contract to make a transaction to.\n- `data`: the data to attach to the call (including the function selector). Most likely, this will be the output of an `ethabiencode` task.\n- `gasLimit`: the amount of gas to attach to the transaction.\n- `txMeta`: a map of metadata that is saved into the database for debugging.\n- `minConfirmations`: minimum number of confirmations required before this task will continue. Set to zero to continue immediately. Note that this does not affect transaction inclusion. All transactions will always be included in the chain up to the configured finality depth.\n- `evmChainID`: set this optional parameter to transmit on the given chain. You must have the chain configured with RPC nodes for this to work. If left blank, it will use the default chain.\n\n**Outputs**\n\nThe hash of the transaction attempt that eventually succeeds (after potentially going through a gas bumping process to ensure confirmation).\n\n**Example**\n\n```toml\nencode_tx    [type=\"ethabiencode\"\n              abi=\"performUpkeep(bytes performData)\"\n              data=\"{ \\\\\"data\\\\\": $(upkeep_data) }\"]\n\nsubmit_tx    [type=\"ethtx\"\n               to=\"0xa36085F69e2889c224210F603D836748e7dC0088\"\n               data=\"$(encode_tx)\"]\n\nencode_tx -> submit_tx\n```\n"
    },
    {
      "title": "Hex Decode Task",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/task-types/task_hexdecode",
      "section": "nodeOperator",
      "content": "\nAccepts a hexadecimal encoded string and returns decoded bytes.\n\n**Parameters**\n\n- `input`: a hexadecimal encoded string, must have prefix `0x`.\n\n**Outputs**\n\nDecoded bytes.\n\n**Example**\n\n```toml\nmy_hexdecode_task [type=\"hexdecode\" input=\"0x12345678\"]\n```\n\nGiven the input `0x12345678`, the task will return `[0x12, 0x34, 0x56, 0x78]`.\n"
    },
    {
      "title": "Hex Encode Task",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/task-types/task_hexencode",
      "section": "nodeOperator",
      "content": "\nEncodes bytes/string/integer into a hexadecimal string.\n\n**Parameters**\n\n- `input`: Byte array, string or integer to be encoded.\n\n**Outputs**\n\nHexadecimal string prefixed with \"0x\" (or empty string if input was empty).\n\n**Example**\n\n```toml\nmy_hexencode_task [type=\"hexencode\" input=\"xyz\"]\n```\n\nGiven the input string \"xyz\", the task will return \"0x78797a\", which are the ascii values of characters in the string.\n"
    },
    {
      "title": "HTTP Task",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/task-types/task_http",
      "section": "nodeOperator",
      "content": "\nHTTP tasks make HTTP requests to arbitrary URLs.\n\n**Parameters**\n\n- `method`: the HTTP method that the request should use.\n- `url`: the URL to make the HTTP request to.\n- `requestData` (optional): a statically-defined payload to be sent to the external adapter.\n- `allowUnrestrictedNetworkAccess` (optional): permits the task to access a URL at `localhost`, which could present a security risk. Note that Bridge tasks allow this by default.\n- `headers` (optional): an array of strings. The number of strings must be even. Example: `foo [type=http headers=\"[\\\\\"X-Header-1\\\\\", \\\\\"value1\\\\\", \\\\\"X-Header-2\\\\\", \\\\\"value2\\\\\"]\"]`\n\n**Outputs**\n\nA string containing the response body.\n\n**Example**\n\n```toml\nmy_http_task [type=\"http\"\n              method=PUT\n              url=\"http://chain.link\"\n              requestData=\"{\\\\\"foo\\\\\": $(foo), \\\\\"bar\\\\\": $(bar), \\\\\"jobID\\\\\": 123}\"\n              allowUnrestrictedNetworkAccess=true\n              ]\n```\n"
    },
    {
      "title": "JSON Parse Task",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/task-types/task_jsonparse",
      "section": "nodeOperator",
      "content": "\nJSON Parse tasks parse a JSON payload and extract a value at a given keypath.\n\n**Parameters**\n\n- `data`: the JSON string. Can be:\n    - string\n    - byte array\n- `path`: the keypath to extract. Must be a comma-delimited list of keys, or specify a custom `separator` alternative.\n- `separator`: (optional) custom `path` key separator. Defaults to comma (`,`).\n- `lax` (optional): if false (or omitted), and the keypath doesn't exist, the task will error. If true, the task will return `nil` to the next task.\n\n**Outputs**\n\nThe value at the provided keypath.\n\n**Example**\n\n```toml\nmy_json_task [type=\"jsonparse\"\n              data=\"$(http_fetch_result)\"\n              path=\"data,0,price\"]\n```\n\nThis task returns `123.45` (float64) when given the following example `data` value:\n\n```json\n{\n    \"data\": [\n        {\"price\": 123.45},\n        {\"price\": 678.90},\n    ]\n}\n```\n"
    },
    {
      "title": "Length Task",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/task-types/task_length",
      "section": "nodeOperator",
      "content": "\nReturns the length of a byte array or string.\n\n**Parameters**\n\n- `input`: Byte array, or string to get the length for.\n\n**Outputs**\n\nThe length of the byte array or string.\n\n**Note**: For strings containing multi-byte unicode characters, the output is the length in bytes and not number of characters.\n\n**Example**\n\n```toml\nmy_length_task [type=\"length\" input=\"xyz\"]\n```\n\nGiven the input string \"xyz\", the task will return 3, length of the string.\n"
    },
    {
      "title": "Less Than Task",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/task-types/task_lessthan",
      "section": "nodeOperator",
      "content": "\nReturns a boolean, result of computing `left` < `right`.\n\n**Parameters**\n\n- `left`: the left hand side of comparison. Possible values:\n    - number\n    - stringified number\n    - bytes-ified number\n    - `$(variable)`\n- `right`: the right hand side of comparison. Possible values:\n    - number\n    - stringified number\n    - bytes-ified number\n    - `$(variable)`\n\n**Outputs**\n\nThe result of less than comparison.\n\n**Example**\n\n```toml\nmy_lessthan_task [type=\"lessthan\" left=\"3\" right=\"10\"]\n```\n\nthe task will return true which is the result of `3 < 10`\n"
    },
    {
      "title": "Lowercase Task",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/task-types/task_lowercase",
      "section": "nodeOperator",
      "content": "\nAccepts a string and returns a lowercase string.\n\n**Parameters**\n\n- `input`: a string.\n\n**Outputs**\n\nLowercase string.\n\n**Example**\n\n```toml\nmy_lowercase_task [type=\"lowercase\" input=\"Hello World!\"]\n```\n\nGiven the input `Hello World!`, the task will return `hello world!`.\n"
    },
    {
      "title": "Mean Task",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/task-types/task_mean",
      "section": "nodeOperator",
      "content": "\nAccepts multiple numerical inputs and returns the mean (average) of them.\n\n**Parameters**\n\n- `values`: an array of values to be averaged.\n- `allowedFaults` (optional): the maximum number of input tasks that can error without the Mean task erroring. If not specified, this value defaults to `N - 1`, where `N` is the number of inputs.\n- `precision`: the number of decimal places in the result.\n\n**Outputs**\n\nThe average of the values in the `values` array.\n\n**Example**\n\n```toml\nmy_mean_task [type=\"mean\"\n              values=<[ $(fetch1), $(fetch2), $(fetch3) ]>\n              precision=2\n              allowedFaults=1]\n```\n\nGiven the inputs `2`, `5`, and `20`, the task will return `9`.\n"
    },
    {
      "title": "Median Task",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/task-types/task_median",
      "section": "nodeOperator",
      "content": "\nAccepts multiple numerical inputs and returns the median of them.\n\n**Parameters**\n\n- `values`: an array of values from which to select a median.\n- `allowedFaults` (optional): the maximum number of input tasks that can error without the Median task erroring. If not specified, this value defaults to `N - 1`, where `N` is the number of inputs.\n\n**Outputs**\n\nThe median of the values in the `values` array.\n\n**Example**\n\n```toml\nmy_median_task [type=\"median\"\n                values=<[ $(fetch1), $(fetch2), $(fetch3) ]>\n                allowedFaults=1]\n```\n\nGiven the inputs `2`, `5`, and `20`, the task will return `5`.\n"
    },
    {
      "title": "Mode Task",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/task-types/task_mode",
      "section": "nodeOperator",
      "content": "\nAccepts multiple numerical inputs and returns the mode (most common) of them. If more than one value occur the maximum number of times, it returns all of them.\n\n**Parameters**\n\n- `values`: an array of values from which to select a mode.\n- `allowedFaults` (optional): the maximum number of input tasks that can error without the Mode task erroring. If not specified, this value defaults to `N - 1`, where `N` is the number of inputs.\n\n**Outputs**\n\nA map containing two keys:\n\n```json\n{\n    \"results\": [ ... ], // An array containing all of the values that occurred the maximum number of times\n    \"occurrences\": ..., // The number of times those values occurred\n}\n```\n\n**Example**\n\n```toml\nmy_mode_task [type=\"mode\"\n                values=<[ $(fetch1), $(fetch2), $(fetch3), $(fetch4), $(fetch5), $(fetch6), $(fetch7), $(fetch8) ]>\n                allowedFaults=3]\n```\n\nGiven a `values` array containing `[ 2, 5, 2, \"foo\", \"foo\" \"bar\", \"foo\", 2 ]`, the task will return:\n\n```json\n{\n  \"results\": [2, \"foo\"],\n  \"occurrences\": 3\n}\n```\n"
    },
    {
      "title": "Multiply Task",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/task-types/task_multiply",
      "section": "nodeOperator",
      "content": "\nMultiplies the provided `input` and `times` values.\n\n**Parameters**\n\n- `input`: the value to be multipled. Possible values:\n    - number\n    - stringified number\n    - bytes-ified number\n    - `$(variable)`\n- `times`: the value to multiply the input with.\n    - number\n    - stringified number\n    - bytes-ified number\n    - `$(variable)`\n\n**Outputs**\n\nThe result of the multiplication.\n\n**Example**\n\n```toml\nmy_multiply_task [type=\"multiply\" input=\"$(json_parse_result)\" times=3]\n```\n\nGiven the input `10`, the task will return `30`.\n\n"
    },
    {
      "title": "Sum Task",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/task-types/task_sum",
      "section": "nodeOperator",
      "content": "\nAccepts multiple numerical inputs and returns the sum of them.\n\n**Parameters**\n\n- `values`: an array of values to sum.\n- `allowedFaults` (optional): the maximum number of input tasks that can error without the Sum task erroring. If not specified, this value defaults to `N - 1`, where `N` is the number of inputs.\n\n**Outputs**\n\nThe sum of the values in the `values` array.\n\n**Example**\n\n```toml\nmy_sum_task [type=\"sum\"\n             values=<[ $(fetch1), $(fetch2), $(fetch3) ]>\n             allowedFaults=1]\n```\n\nGiven the inputs `2`, `5`, and `20`, the task will return `27`.\n"
    },
    {
      "title": "Uppercase Task",
      "headings": [],
      "url": "/chainlink-nodes/oracle-jobs/task-types/task_uppercase",
      "section": "nodeOperator",
      "content": "\nAccepts a string and returns an uppercase string.\n\n**Parameters**\n\n- `input`: a string.\n\n**Outputs**\n\nUppercase string.\n\n**Example**\n\n```toml\nmy_uppercase_task [type=\"uppercase\" input=\"Hello World!\"]\n```\n\nGiven the input `Hello World!`, the task will return `HELLO WORLD!`.\n"
    },
    {
      "title": "Tasks",
      "headings": [
        {
          "depth": 2,
          "slug": "what-is-a-task",
          "text": "What is a Task?"
        },
        {
          "depth": 2,
          "slug": "shared-attributes",
          "text": "Shared attributes"
        }
      ],
      "url": "/chainlink-nodes/oracle-jobs/task-types/tasks",
      "section": "nodeOperator",
      "content": "\n## What is a Task?\n\n:::note[Tasks]\nTasks replace the [core adapters](/chainlink-nodes/oracle-jobs/v1/adapters/) from v1 jobs.\n:::\n\nTasks are a replacement for core adapters that is more flexible. Tasks can be composed in arbitrary order into [pipelines](/chainlink-nodes/oracle-jobs/task-types/pipelines/). Pipelines consist of one or more threads of execution where tasks are executed in a well-defined order.\n\nChainlink has a number of built-in tasks which are listed below. You can also create your own [external adapters](/chainlink-nodes/external-adapters/external-adapters/) for tasks which are accessed through a `bridge`.\n\n## Shared attributes\n\nAll tasks share a few common attributes:\n\n`index`: when a task has more than one input (or the pipeline overall needs to support more than one final output), and the ordering of the values matters, the index parameter can be used to specify that ordering.\n\n```toml\ndata_1 [type=\"http\" method=GET url=\"https://chain.link/eth_usd\"       index=0]\ndata_2 [type=\"http\" method=GET url=\"https://chain.link/eth_dominance\" index=1]\nmultiword_abi_encode [type=\"eth_abi_encode\" method=\"fulfill(uint256,uint256)\"]\n\ndata_1 -> multiword_abi_encode\ndata_2 -> multiword_abi_encode\n```\n\n`timeout`: The maximum duration that the task is allowed to run before it is considered to be errored. Overrides the `maxTaskDuration` value in the job spec.\n"
    },
    {
      "title": "Core Adapters [v1]",
      "headings": [
        {
          "depth": 1,
          "slug": "removed",
          "text": "REMOVED"
        },
        {
          "depth": 2,
          "slug": "adapters",
          "text": "Adapters"
        },
        {
          "depth": 2,
          "slug": "compare",
          "text": "Compare"
        },
        {
          "depth": 4,
          "slug": "parameters",
          "text": "Parameters"
        },
        {
          "depth": 4,
          "slug": "solidity-example",
          "text": "Solidity Example"
        },
        {
          "depth": 2,
          "slug": "copy",
          "text": "Copy"
        },
        {
          "depth": 4,
          "slug": "parameters-1",
          "text": "Parameters"
        },
        {
          "depth": 4,
          "slug": "solidity-example-1",
          "text": "Solidity Example"
        },
        {
          "depth": 4,
          "slug": "job-specification-example",
          "text": "Job Specification Example"
        },
        {
          "depth": 2,
          "slug": "ethbool",
          "text": "EthBool"
        },
        {
          "depth": 4,
          "slug": "parameters-2",
          "text": "Parameters"
        },
        {
          "depth": 2,
          "slug": "ethbytes32",
          "text": "EthBytes32"
        },
        {
          "depth": 4,
          "slug": "parameters-3",
          "text": "Parameters"
        },
        {
          "depth": 2,
          "slug": "ethint256",
          "text": "EthInt256"
        },
        {
          "depth": 4,
          "slug": "parameters-4",
          "text": "Parameters"
        },
        {
          "depth": 2,
          "slug": "ethtx",
          "text": "EthTx"
        },
        {
          "depth": 4,
          "slug": "parameters-5",
          "text": "Parameters"
        },
        {
          "depth": 2,
          "slug": "ethuint256",
          "text": "EthUint256"
        },
        {
          "depth": 4,
          "slug": "parameters-6",
          "text": "Parameters"
        },
        {
          "depth": 2,
          "slug": "httpget",
          "text": "HttpGet"
        },
        {
          "depth": 4,
          "slug": "parameters-7",
          "text": "Parameters"
        },
        {
          "depth": 4,
          "slug": "solidity-example-2",
          "text": "Solidity Example"
        },
        {
          "depth": 4,
          "slug": "job-specification-example-1",
          "text": "Job Specification Example"
        },
        {
          "depth": 2,
          "slug": "httppost",
          "text": "HttpPost"
        },
        {
          "depth": 4,
          "slug": "parameters-8",
          "text": "Parameters"
        },
        {
          "depth": 4,
          "slug": "solidity-example-3",
          "text": "Solidity Example"
        },
        {
          "depth": 4,
          "slug": "job-specification-example-2",
          "text": "Job Specification Example"
        },
        {
          "depth": 2,
          "slug": "jsonparse",
          "text": "JsonParse"
        },
        {
          "depth": 4,
          "slug": "parameters-9",
          "text": "Parameters"
        },
        {
          "depth": 4,
          "slug": "solidity-example-4",
          "text": "Solidity Example"
        },
        {
          "depth": 4,
          "slug": "job-specification-example-3",
          "text": "Job Specification Example"
        },
        {
          "depth": 4,
          "slug": "parsing-arrays",
          "text": "Parsing Arrays"
        },
        {
          "depth": 2,
          "slug": "multiply",
          "text": "Multiply"
        },
        {
          "depth": 4,
          "slug": "parameters-10",
          "text": "Parameters"
        },
        {
          "depth": 4,
          "slug": "solidity-example-5",
          "text": "Solidity Example"
        },
        {
          "depth": 2,
          "slug": "noop",
          "text": "NoOp"
        },
        {
          "depth": 4,
          "slug": "parameters-11",
          "text": "Parameters"
        },
        {
          "depth": 2,
          "slug": "nooppend",
          "text": "NoOpPend"
        },
        {
          "depth": 4,
          "slug": "parameters-12",
          "text": "Parameters"
        },
        {
          "depth": 2,
          "slug": "quotient",
          "text": "Quotient"
        },
        {
          "depth": 4,
          "slug": "parameters-13",
          "text": "Parameters"
        },
        {
          "depth": 2,
          "slug": "sleep",
          "text": "Sleep"
        },
        {
          "depth": 4,
          "slug": "parameters-14",
          "text": "Parameters"
        },
        {
          "depth": 4,
          "slug": "solidity-example-6",
          "text": "Solidity Example"
        },
        {
          "depth": 4,
          "slug": "job-specification-example-4",
          "text": "Job Specification example"
        }
      ],
      "url": "/chainlink-nodes/oracle-jobs/v1/adapters",
      "section": "legacy",
      "content": "\n# REMOVED\n\n:::caution[v1 Jobs are removed]\nThe initiators for v1 Jobs are removed for Chainlink nodes running version 1.0.0 and later. Use [v2 job types](/chainlink-nodes/oracle-jobs/jobs) instead.<br/>\nSee the [v2 jobs migration page](/chainlink-nodes/oracle-jobs/migration-v1-v2) to learn how to migrate to v2 jobs.\n:::\n\n## Adapters\n\nCore adapters are the built-in functionality that every Chainlink node supports. Strung together, they act as tasks that need to be performed to complete a Job.\n\nAdapters that are prefixed with \"Eth\" refer to tasks that post data onto the chain. Here are some examples of the data types that adapters convert data to.\n\n| Name              | Core Adapter              | Ethereum Data Type |\n| ----------------- | ------------------------- | ------------------ |\n| Signed Integers   | [EthInt256](#ethint256)   | int256             |\n| Unsigned Integers | [EthUint256](#ethuint256) | uint256            |\n| Bytes             | [EthBytes32](#ethbytes32) | bytes32            |\n| Boolean           | [EthBool](#ethbool)       | bool               |\n\nYou can learn more about Solidity data types [here](https://docs.soliditylang.org/en/latest/types.html).\n\n## Compare\n\nThis core adapter compares a user-specified value with the value from the previous adapter's result.\n\n#### Parameters\n\n- `operator`: the operator used to compare values. You may use one of the following:\n  - `eq`: Equals\n  - `neq`: Not equals\n  - `gt`: Greater than\n  - `gte`: Greater than or equals to\n  - `lt`: Less than\n  - `lte`: Less than or equals to\n- `value`: the value to check against the previous adapter's result. May be a string or a number, but if the value is a string, only `eq` and `neq` may be used.\n\n#### Solidity Example\n\n```solidity\nreq.addInt(\"value\", 10000);\nreq.add(\"operator\", \"gte\");\n```\n\n## Copy\n\nThe core adapter walks the `copyPath` specified and returns the value found at that result. If returning JSON data from an [external adapter](/chainlink-nodes/external-adapters/external-adapters/), you will need to use this adapter to parse the response.\n\n#### Parameters\n\n- `copyPath`: takes an array of strings, each string being the next key to parse out in the JSON object or a single dot-delimited string.\n\n#### Solidity Example\n\nFor the JSON object:\n\n```json\n{ \"RAW\": { \"ETH\": { \"USD\": { \"LASTMARKET\": \"_someValue\" } } } }\n```\n\nYou would use the following for an array of strings:\n\n```solidity\nstring[] memory path = new string(4);\npath[0] = \"RAW\";\npath[1] = \"ETH\";\npath[2] = \"USD\";\npath[3] = \"LASTMARKET\";\nreq.addStringArray(\"copyPath\", path);\n```\n\nOr the following for a single comma-delimited string:\n\n```solidity\nreq.add(\"copyPath\", \"RAW,ETH,USD,LASTMARKET\");\n```\n\n:::note\nChainlink nodes prior to `1.0.0` supported dot delimited strings instead of commas.\n:::\n\n#### Job Specification Example\n\n```json\n{\n  \"type\": \"Copy\",\n  \"params\": {\n    \"copyPath\": [\"RAW\", \"ETH\", \"USD\", \"LASTMARKET\"]\n  }\n}\n```\n\nFor arrays, you can access the path of an array by using the index. If this is your JSON:\n\n```json\n{ \"endpoint\": [{ \"path\": \"value\" }] }\n```\n\nYou could get the `\"value\"` by:\n\n```solidity\nreq.add(\"copyPath\", \"endpoint.0.path\");\n```\n\n## EthBool\n\nThe core adapter reads the given Boolean value and then converts it into Solidity's `bool` format.\n\n#### Parameters\n\n_None taken._\n\n## EthBytes32\n\nThe core adapter formats its input into a string and then converts it into Solidity's `bytes32` format.\n\n#### Parameters\n\n_None taken._\n\n## EthInt256\n\nThe core adapter formats its input into an integer and then converts it into Solidity's `int256` format.\n\n#### Parameters\n\n_None taken._\n\n## EthTx\n\nThe core adapter takes the input given and places it into the data field of the transaction. It then signs an Ethereum transaction and broadcasts it to the network. The task is only completed once the transaction's confirmations equal the [`MIN_OUTGOING_CONFIRMATIONS`](https://github.com/smartcontractkit/chainlink/wiki/Configuration-Variables#min_outgoing_confirmations) amount.\n\nIf the transaction does not confirm by the time [`ETH_GAS_BUMP_THRESHOLD`](https://github.com/smartcontractkit/chainlink/wiki/Configuration-Variables#eth_gas_bump_threshold) number of blocks have passed since initially broadcasting, then it bumps the gas price of the transaction by [`ETH_GAS_BUMP_WEI`](https://github.com/smartcontractkit/chainlink/wiki/Configuration-Variables#eth_gas_bump_wei).\n\n#### Parameters\n\n- `address`: the address of the Ethereum account which the transaction will be sent to.\n- `functionSelector`: **(optional)** the [function selector](https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#function-selector) of the contract which the transaction will invoke. `functionSelector` is placed before `dataPrefix` and the adapter's input in the data field of the transaction.\n- `dataPrefix`: **(optional)** data which will be prepended before the adapter's input, but after the `functionSelector` in the transaction's data field.\n- `value`: **(optional)** data to send to the function, will append after the `dataPrefix` payload if it's included. Will automatically come from the previous task.\n\n## EthUint256\n\nThe core adapter formats its input into an integer and then converts it into Solidity's `uint256` format.\n\n#### Parameters\n\n_None taken._\n\n## HttpGet\n\nThe core adapter will report the body of a successful `GET` request to the specified `get`, or return an error if the response status code is greater than or equal to 400.\n\n#### Parameters\n\n- `get`: takes a string containing the URL to make a `GET` request to.\n- `queryParams`: takes a string or array of strings for the URL's query parameters.\n- `extPath`: takes a slash-delimited string or array of strings to be appended to the job's URL.\n- `headers`: takes a object containing keys as strings and values as arrays of strings.\n\n:::note[Headers]\nCurrently not available on-chain. Available for job specs only.\n:::\n\n#### Solidity Example\n\n```solidity\nreq.add(\"get\", \"http://example.com\");\nreq.add(\"queryParams\", \"firstKey=firstVal&secondKey=secondVal\");\nreq.add(\"extPath\", \"price/BTC/USD\");\n```\n\n#### Job Specification Example\n\n```json\n{\n  \"type\": \"HttpGet\",\n  \"params\": {\n    \"get\": \"https://example.com/some-endpoint\",\n    \"headers\": {\n      \"X-API-Key\": [\"abc123abc123abc123abc123\"]\n    }\n  }\n}\n```\n\n:::note[Local network and multicast IPs are disallowed by default]\nFor security, because the URL can come from an untrusted source, HTTPGet imposes some restrictions on which IPs may be fetched. Local network and multicast IPs are disallowed by default and attempting to connect will result in an error.\n:::\n\nIf you really must access one of these IPs, you can use the `HTTPGetWithUnrestrictedNetworkAccess` adapter instead.\n\n## HttpPost\n\nThe core adapter will report the body of a successful `POST` request to the specified `post`, or return an error if the response status code is greater than or equal to 400.\n\n#### Parameters\n\n- `post`: takes a string containing the URL to make a `POST` request to.\n- `headers`: takes a object containing keys as strings and values as arrays of strings.\n- `queryParams`: takes a string or array of strings for the URL's query parameters.\n- `extPath`: takes a slash-delimited string or array of strings to be appended to the job's URL.\n- `body`: the JSON body (as a string) that will be used as the data in the request.\n\n:::note[Headers & Body]\nCurrently not available on-chain. Available for job specs only.\n:::\n\n#### Solidity Example\n\n```solidity\nreq.add(\"post\", \"http://post.example.com\");\nreq.add(\"queryParams\", \"firstKey=firstVal&secondKey=secondVal\");\nreq.add(\"extPath\", \"price/BTC/USD\");\n```\n\n#### Job Specification Example\n\n```\n{\n    \"type\": \"HttpPost\",\n    \"params\": {\n        \"post\": \"https://example.com/some-endpoint\",\n        \"headers\": {\n            \"X-API-Key\": [\n                \"abc123abc123abc123abc123\"\n            ]\n        }\n    }\n}\n```\n\n:::note[Local network and multicast IPs are disallowed by default]\nFor security, because the URL can come from an untrusted source, HTTPGet imposes some restrictions on which IPs may be fetched. Local network and multicast IPs are disallowed by default and attempting to connect will result in an error.\n:::\n\nIf you really must access one of these IPs, you can use the `HTTPPostWithUnrestrictedNetworkAccess` adapter instead.\n\n## JsonParse\n\nThe core adapter walks the `path` specified and returns the value found at that result. If returning JSON data from the [HttpGet](/chainlink-nodes/oracle-jobs/v1/adapters/#httpget) or [HttpPost](/chainlink-nodes/oracle-jobs/v1/adapters/#httppost) adapters, you must use this adapter to parse the response.\n\n#### Parameters\n\n- `path`: takes an array of strings, each string being the next key to parse out in the stringified JSON result or a single dot-delimited string.\n\n#### Solidity Example\n\nFor the stringified JSON:\n\n```json\n{ \"RAW\": { \"ETH\": { \"USD\": { \"LASTMARKET\": \"_someValue\" } } } }\n```\n\nYou would use the following for an array of strings:\n\n```solidity\nstring[] memory path = new string[](4);\npath[0] = \"RAW\";\npath[1] = \"ETH\";\npath[2] = \"USD\";\npath[3] = \"LASTMARKET\";\nreq.addStringArray(\"path\", path);\n```\n\nOr the following for a single comma-delimited string:\n\n```solidity\nreq.add(\"path\", \"RAW,ETH,USD,LASTMARKET\");\n```\n\n:::note\nChainlink nodes prior to 1.0.0 support dot-delimited strings instead of comma-delimited strings.\n:::\n\n#### Job Specification Example\n\n```json\n{\n  \"type\": \"JsonParse\",\n  \"params\": {\n    \"path\": [\"RAW\", \"ETH\", \"USD\", \"LASTMARKET\"]\n  }\n}\n```\n\n#### Parsing Arrays\n\n```solidity\nreq.add(\"path\", \"3,standardId\");\n```\n\nThe above example parses the 4th object of the following JSON response and returns 677 as a result:\n\n```javascript\n;[\n  {\n    standardId: 20,\n    name: \"ERC-20\",\n  },\n  {\n    standardId: 721,\n    name: \"ERC-721\",\n  },\n  {\n    standardId: 1155,\n    name: \"ERC-1155\",\n  },\n  {\n    standardId: 677,\n    name: \"ERC-677\",\n  },\n]\n```\n\n## Multiply\n\nThe core adapter parses the input into a float and then multiplies it by the `times` field.\n\n#### Parameters\n\n- `times`: the number to multiply the input by.\n\n#### Solidity Example\n\n```solidity\nrun.addInt(\"times\", 100);\n```\n\n## NoOp\n\nThe core adapter performs no operations, simply passing the input on as output. Commonly used for testing.\n\n#### Parameters\n\n_None taken._\n\n## NoOpPend\n\nThe core adapter performs no operations, and marks its task run pending. Commonly used for testing.\n\n#### Parameters\n\n_None taken._\n\n## Quotient\n\nQuotient\n\nThe core adapter gives the result of x / y where x is a specified value (dividend) and y is the input value (result).\n\nThis can be useful for inverting outputs, e.g. if your API only offers a USD/ETH conversion rate and you want ETH/USD instead you can use this adapter with a dividend of 1 to get the inverse (i.e. 1 / result).\n\n#### Parameters\n\n- `dividend`: the number which is divided by the result\n\n## Sleep\n\nThe core adapter will pause the current task pipeline for the given duration.\n\n:::note[ENABLE_EXPERIMENTAL_ADAPTERS]\nYou must set `ENABLE_EXPERIMENTAL_ADAPTERS=true` in order to use the sleep adapter.\n:::\n\n#### Parameters\n\n- `until`: the UNIX timestamp of when the job should stop sleeping and resume at the next task in the pipeline.\n\n#### Solidity Example\n\n```solidity\nreq.addUint(\"until\", now + 1 hours);\n```\n\n#### Job Specification example\n\n```\n{\n  \"initiators\": [\n    {\n      \"type\": \"web\",\n      \"params\": {\n      }\n    }\n  ],\n  \"tasks\": [\n    {\n      \"type\": \"sleep\",\n      \"params\": {\n        \"until\": \"1605651000\"\n      }\n    }\n  ]\n}\n```\n"
    },
    {
      "title": "Initiators [v1]",
      "headings": [
        {
          "depth": 1,
          "slug": "removed",
          "text": "REMOVED"
        },
        {
          "depth": 2,
          "slug": "initiators",
          "text": "Initiators"
        },
        {
          "depth": 2,
          "slug": "cron",
          "text": "Cron"
        },
        {
          "depth": 3,
          "slug": "cron-parameters",
          "text": "Cron Parameters"
        },
        {
          "depth": 3,
          "slug": "example",
          "text": "Example"
        },
        {
          "depth": 2,
          "slug": "ethlog",
          "text": "EthLog"
        },
        {
          "depth": 3,
          "slug": "ethlog-parameters",
          "text": "EthLog Parameters"
        },
        {
          "depth": 3,
          "slug": "example-1",
          "text": "Example"
        },
        {
          "depth": 2,
          "slug": "external",
          "text": "External"
        },
        {
          "depth": 3,
          "slug": "external-parameters",
          "text": "External Parameters"
        },
        {
          "depth": 3,
          "slug": "example-2",
          "text": "Example"
        },
        {
          "depth": 2,
          "slug": "fluxmonitor",
          "text": "FluxMonitor"
        },
        {
          "depth": 3,
          "slug": "fluxmonitor-parameters",
          "text": "FluxMonitor Parameters"
        },
        {
          "depth": 3,
          "slug": "example-3",
          "text": "Example"
        },
        {
          "depth": 2,
          "slug": "runat",
          "text": "RunAt"
        },
        {
          "depth": 3,
          "slug": "runat-parameters",
          "text": "RunAt Parameters"
        },
        {
          "depth": 3,
          "slug": "example-4",
          "text": "Example"
        },
        {
          "depth": 2,
          "slug": "runlog",
          "text": "RunLog"
        },
        {
          "depth": 3,
          "slug": "runlog-parameters",
          "text": "RunLog Parameters"
        },
        {
          "depth": 3,
          "slug": "example-5",
          "text": "Example"
        },
        {
          "depth": 2,
          "slug": "web",
          "text": "Web"
        },
        {
          "depth": 3,
          "slug": "web-parameters",
          "text": "Web Parameters"
        },
        {
          "depth": 3,
          "slug": "example-6",
          "text": "Example"
        }
      ],
      "url": "/chainlink-nodes/oracle-jobs/v1/initiators",
      "section": "legacy",
      "content": "\n# REMOVED\n\n:::caution[v1 Jobs are removed]\nThe initiators for v1 Jobs are removed for Chainlink nodes running version 1.0.0 and later. Use [v2 job types](/chainlink-nodes/oracle-jobs/jobs) instead.<br/>\nSee the [v2 jobs migration page](/chainlink-nodes/oracle-jobs/migration-v1-v2) to learn how to migrate to v2 jobs.\n:::\n\n## Initiators\n\n## Cron\n\nThe `Cron` initiator is a simple way to schedule recurring job runs, using [standard cron syntax](https://en.wikipedia.org/wiki/Cron#Overview).\n\n### Cron Parameters\n\n`Cron` takes one parameter, `schedule` which is a cron like schedule string. The `Cron`‘s `schedule` is follows [standard cron syntax](https://en.wikipedia.org/wiki/Cron#Overview) but prepends an timezone to be specified with `CRON_TZ`, with an optional field for seconds. For example: `CRON_TZ=UTC */10 * * * *` would run every 10 minutes with the timezone set to UTC. `CRON_TZ=UTC */30 * * * * *` would run every 30 seconds.\n\n### Example\n\n```json cron\n\"initiators\": [\n    {\n        \"type\": \"cron\",\n        \"params\": {\n            \"schedule\": \"CRON_TZ=UTC */10 * * *\"\n        }\n    }\n]\n```\n\n## EthLog\n\nThe `EthLog` initiator creates an Ethereum log filter, and when any log comes in it is passed on as the input to the a new job run.\n\n### EthLog Parameters\n\n`EthLog` takes the same parameters as an [Ethereum log filter](https://github.com/ethereum/go-ethereum/wiki/RPC-PUB-SUB).\n\n### Example\n\n```json ethlog\n\"initiators\": [\n    {\n        \"type\": \"ethlog\",\n        \"address\": \"0xCAFE000000000000000000000000000000000001\"\n    }\n]\n```\n\n## External\n\nThe external initiator works like the [web](/chainlink-nodes/oracle-jobs/v1/initiators/#web) initiator, but is given its own credentials along with a name and URL.\n\nYou can create an external initiator by running the `chainlink initiators create NAME URL` command. This will give you an access key and secret pair, which will be used for incoming requests to invoke a job with this external initiator, and an outgoing token and secret pair which optionally can be used to help the Chainlink node authenticate with external services. Any incoming requests must provide the access key and secret in order to invoke the job run.\n\n### External Parameters\n\n`external` requires a `name` to be set to handle authentication in order to invoke the job run.\n\n### Example\n\n```json external\n\"initiators\": [\n    {\n        \"type\": \"external\",\n        \"params\": {\n            \"name\": \"myexternalservice\"\n        }\n    }\n]\n```\n\n## FluxMonitor\n\nThe `fluxmonitor` initiator performs 3 functions:\n\n1. Aggregating off-chain sources into one median\n2. Using that aggregated result to determine if an on-chain update needs to be made (as defined by a threshold)\n3. Updates on-chain values based on a heartbeat\n\nThe `fluxmonitor` is the current initiator used by the [Chainlink Data Feeds](https://data.chain.link/)\n\n### FluxMonitor Parameters\n\n- `address`: The smart contract address to push updates to.\n- `feeds`: A list of `bridges`, also known as external adapters.\n- `requestData`: The data to send in the call to the bridge/external adapter.\n- `threshold`: Threshold percentage to trigger an update on.\n- `absoluteThreshold`: To trigger a new on-chain report, the absolute difference in the feed value must change by at least this value. If 0, make no change.\n- `precision`: Number of decimals\n- `pollTimer`: Takes a `period` object with how often to poll the off-chain resources.\n- `idleTimer`: The main heartbeat. If no change to the off-chain resource, trigger an update every `idleTimer` interval.\n\n### Example\n\n```json\n{\n  \"type\": \"fluxmonitor\",\n  \"params\": {\n    \"address\": \"0x7777a77dea5ee3c093e21d77660b5579c21f770b\",\n    \"requestData\": {\n      \"data\": {\n        \"from\": \"DAI\",\n        \"to\": \"ETH\"\n      }\n    },\n    \"feeds\": [\n      {\n        \"bridge\": \"cryptocompare_cl_ea\"\n      },\n      {\n        \"bridge\": \"amberdata_cl_ea\"\n      },\n      {\n        \"bridge\": \"coinapi_cl_ea\"\n      }\n    ],\n    \"threshold\": 1,\n    \"absoluteThreshold\": 0,\n    \"precision\": 18,\n    \"pollTimer\": {\n      \"period\": \"1m0s\"\n    },\n    \"idleTimer\": {\n      \"duration\": \"24h0m0s\"\n    }\n  }\n}\n```\n\n## RunAt\n\nThe `RunAt` initiator triggers a one off job run at the time specified.\n\n### RunAt Parameters\n\n`RunAt` takes one parameter, `time`. `time` accepts a ISO8601 string or a Unix timestamp.\n\n### Example\n\n```json runat\n\"initiators\": [\n    {\n        \"type\": \"runat\",\n        \"params\": {\n            \"time\": \"2019-09-20T12:20:00.000Z\"\n        }\n    }\n]\n```\n\n## RunLog\n\nThe `RunLog` initiator is the easiest initiator to use when integrating Chainlink with on-chain contracts. It works similarly to EthLog, but adds some helpful glue in to stitch together the off-chain job with the on-chain contracts.\n\nWhen a `RunLog` job is created, Chainlink begins watching the blockchain for any log events that include that job’s ID. If any of the events that come back match the log event signature of the Chainlink oracle contract, then the Chainlink node parses the data out of that log and passes it into a new log run.\n\nA new run created by a `RunLog` is automatically given the parameters needed for an `EthTx` task to report the run back to the contract that originally created the event log.\n\n### RunLog Parameters\n\n`RunLog` initiators take an optional `address` parameter and `requesters` parameter. The `address` parameter is a single Ethereum address and the `requesters` parameter is an array of Ethereum addresses. By adding the `address` parameter, you make the event filter of the RunLog initiator more restrictive, only listening for events from that address, instead of any address. By adding the `requesters` parameter, you only allow requests to come from an address within the array.\n\n### Example\n\n```json runlog\n\"initiators\": [\n    {\n        \"type\": \"runlog\",\n        \"params\": {\n            \"address\": \"0xCAFE000000000000000000000000000000000001\",\n            \"requesters\": [\n                \"0xCAFE000000000000000000000000000000000002\",\n                \"0xCAFE000000000000000000000000000000000003\"\n            ]\n        }\n    }\n]\n```\n\n## Web\n\nThe `Web` initiator enables jobs to be triggered via web requests, specifically `POST`s to `/v2/specs/:jobID/runs`. Requests coming in to create new job runs must be authenticated by cookie.\n\n:::note\nFor convenience, there is a \"Run\" button in the operator web UI for the job which will trigger a job run.\n:::\n\n### Web Parameters\n\n`Web` currently takes no parameters.\n\n### Example\n\n```json web\n\"initiators\": [\n    {\n        \"type\": \"web\"\n    }\n]\n```\n"
    },
    {
      "title": "Job Specifications [v1]",
      "headings": [
        {
          "depth": 1,
          "slug": "removed",
          "text": "REMOVED"
        },
        {
          "depth": 2,
          "slug": "what-is-a-job",
          "text": "What is a job?"
        }
      ],
      "url": "/chainlink-nodes/oracle-jobs/v1/job-specifications",
      "section": "legacy",
      "content": "\n# REMOVED\n\n:::caution[v1 Jobs are removed]\nThe v1 job spec or JSON spec removed for Chainlink nodes running version 1.0.0 and later. If you are still running this type of job, migrate them to v2 specs.<br/>\nSee the [v2 jobs migration page](/chainlink-nodes/oracle-jobs/migration-v1-v2) to learn how to migrate to v2 jobs.\n:::\n\n## What is a job?\n\nJob specifications, or specs, contain the sequential tasks that the node must perform to produce a final result. Chainlink jobs are divided into 2 segments.\n\n- [Initiators](/chainlink-nodes/oracle-jobs/v1/initiators/)\n- [Adapters](/chainlink-nodes/oracle-jobs/v1/adapters/) (also known as tasks)\n\nA job must contain at least one of each.\n\n**Initiators** define _when_ a job will run.\n**Adapters** define _how_ a job will run.\n\nSpecs are defined using standard JSON so that they are human-readable and can be easily parsed by the Chainlink node.\n\nHere is an example of a spec:\n\n```json\n{\n  \"initiators\": [\n    {\n      \"type\": \"RunLog\",\n      \"params\": { \"address\": \"0x51DE85B0cD5B3684865ECfEedfBAF12777cd0Ff8\" }\n    }\n  ],\n  \"tasks\": [\n    {\n      \"type\": \"HTTPGet\",\n      \"confirmations\": 0,\n      \"params\": { \"get\": \"https://bitstamp.net/api/ticker/\" }\n    },\n    {\n      \"type\": \"JSONParse\",\n      \"params\": { \"path\": [\"last\"] }\n    },\n    {\n      \"type\": \"Multiply\",\n      \"params\": { \"times\": 100 }\n    },\n    { \"type\": \"EthUint256\" },\n    { \"type\": \"EthTx\" }\n  ],\n  \"startAt\": \"2020-02-09T15:13:03Z\",\n  \"endAt\": null,\n  \"minPayment\": \"1000000000000000000\"\n}\n```\n\nThis example shows the two main components of a spec: initiators and tasks. [Initiators](/resources/glossary/#initiator) determine how the spec will start. [Tasks](/resources/glossary/#task-spec) are the individual steps that the Chainlink node follows to process data in order to produce a result.\n\nIn the example above, we see that the only initiator is a RunLog. This means that the spec can only be started when a specific event log is emitted from a specified address. The specified address will be the address of the oracle contract on Ropsten, which manages requests from contracts and responses from Chainlink nodes.\n\nThe five tasks (referred to as [core adapters](/chainlink-nodes/oracle-jobs/v1/adapters/)) in the example above follow a common pattern for requesting data from the Chainlink network, and returning a single result. Each task takes three fields: `type`, `confirmations`, and `params`. The `type` is the adapter or [bridge](/resources/glossary/#bridge) name and is required. `confirmations` is optional, and will default to 0. `params` is also optional, and will default to an empty object if not specified. See the [core adapters](/chainlink-nodes/oracle-jobs/v1/adapters/) page for a complete list of `params` for each adapter.\n\n1. The **HTTPGet** adapter uses the value in the `get` field to perform a standard HTTP GET request at the value specified. The body of that result is passed on to the next task, JSONParse.\n2. The **JSONParse** adapter takes a dot-delimited string or an array of strings, and will walk the given path to store the value at the end. In this case, there is only one field to save, \"last\". JSONParse will then pass the value stored in the \"last\" field to the Multiply adapter.\n3. The **Multiply** adapter will, as its name describes, multiply the given value by the value of the `times` field, in this case, 100.\n4. The multiplied value will be passed to the **EthUint256** adapter, which will format it specifically for the `uint256` data type on Ethereum. Notice there are no parameters supplied to the EthUint256 adapter, as it does not accept any.\n5. Finally, that formatted value is written to the blockchain with the **EthTx** adapter. The parameters for the EthTx adapter are given by the oracle contract when the run is initiated through the RunLog initiator.\n\nNote: If specifying multiple adapters of the same type, the parameters can be specified in the job spec itself if the key values need to be different. The requester can also use run parameters for these requests, but shared keys will be the same for any adapter that uses them.\n\nAdditional parameters may be specified on the job as well. These include:\n\n- **startAt**: The beginning date at which the job can be executed, specified in ISO 8601 standard. Jobs can not be ran before this date. Defaults to null if unspecified.\n- **endAt**: The ending date at which the job can be executed, specified in ISO 8601 standard. Jobs can not be ran after this date. Defaults to null if unspecified.\n- **minPayment**: The payment amount for this job, specified in LINK to the 18th decimal. If supplied, this will override the global `MIN_CONTRACT_PAYMENT` configuration set on the node, regardless if the value is lower or higher.\n"
    },
    {
      "title": "Performing System Maintenance",
      "headings": [
        {
          "depth": 2,
          "slug": "maintenance-and-image-update-example",
          "text": "Maintenance and Image Update Example"
        },
        {
          "depth": 2,
          "slug": "failover-node-example",
          "text": "Failover Node Example"
        }
      ],
      "url": "/chainlink-nodes/performing-system-maintenance",
      "section": "nodeOperator",
      "content": "\nYou might occasionally need to restart the system that the Chainlink node runs on. To restart without any downtime for completing requests, perform the upgrade as a series of steps that passes database access to a new instance while the first instance is down.\n\n## Maintenance and Image Update Example\n\n:::note[Docker]\nThis example uses Docker to run the Chainlink node, see the [Running a Chainlink Node](/chainlink-nodes/running-a-chainlink-node/) page for instructions on how to set it up.\n:::\n\nFirst, find the most recent Chainlink image on [Docker Hub](https://hub.docker.com/r/smartcontract/chainlink/) and pull that Docker image. For version 1.1.0:\n\n```shell\ndocker pull smartcontract/chainlink:1.1.0\n```\n\nThen, check what port the existing container is running on:\n\n```shell\ndocker ps\n```\n\nOutput:\n\n```\nCONTAINER ID        IMAGE                            COMMAND                  CREATED             STATUS              PORTS                    NAMES\n2d203191c1d6        smartcontract/chainlink:latest   \"./chainlink-launche…\"   26 seconds ago      Up 25 seconds       0.0.0.0:6688->6688/tcp   jovial_shirley\n```\n\nLook under the PORTS label to see the ports in use by the running container, in this case, the local port 6688 has been mapped to the application's port 6688, as identified by the `->` arrow. Since we can't use the same local port number twice, we'll need to run the second instance with a different one.\n\nNow start the second instance of the node. The local port option has been modified so that both containers run simultaneously.\n\n```shell Goerli\ncd ~/.chainlink-goerli && docker run -p 6687:6688 -v ~/.chainlink-goerli:/chainlink -it --env-file=.env smartcontract/chainlink local n\n```\n\n```shell Mainnet\ncd ~/.chainlink && docker run -p 6687:6688 -v ~/.chainlink:/chainlink -it --env-file=.env smartcontract/chainlink local n\n```\n\nThe log messages on the second node instance inform you that it is waiting for the database lock.\n\nNow you can shut down the first node instance. We'll use the name given earlier and kill the container. Note that your container name will likely be different.\n\n```shell\ndocker kill jovial_shirley\n```\n\nThe output returns the name \"jovial_shirley\" (or what your container's name was) and if you look at the log of your second container, you'll notice that it has taken over.\n\nAt this point, you're now running the latest image on your secondary container. If you have any system maintenance to perform on your primary machine, you can do so now.\n\nNext, you will simply need to run the container again with the local port 6688 in order to go back to normal operations.\n\n```shell Goerli\ncd ~/.chainlink-goerli && docker run -p 6688:6688 -v ~/.chainlink-goerli:/chainlink -it --env-file=.env smartcontract/chainlink local n\n```\n\n```shell Mainnet\ncd ~/.chainlink && docker run -p 6688:6688 -v ~/.chainlink:/chainlink -it --env-file=.env smartcontract/chainlink local n\n```\n\nWhen the log messages on the first node indicate that it is waiting for the database lock, shut down the second instance of the node. The original instance automatically obtains a lock and resumes normal operation.\n\n## Failover Node Example\n\n:::note[Docker]\nThis example uses Docker to run the Chainlink node, see the [Running a Chainlink Node](/chainlink-nodes/running-a-chainlink-node/) page for instructions on how to set it up.\n:::\n\nYou might want to run multiple instances of the Chainlink node on the same machine. If one instance goes down, the second instance can automatically pick up requests. Building off the concepts in the previous example, use Docker to have primary and a secondary containers referencing the same database URL.\n\nUse the default `DATABASE_LOCKING_MODE=advisorylock` setting unless you want to test the `lease` or `dual` settings. See [the docs](/chainlink-nodes/configuration-variables/#database_locking_mode) for more information about this configuration variable.\n\nRun the Chainlink node with a name option specified:\n\n```shell Goerli\ncd ~/.chainlink-goerli && docker run --name chainlink -p 6688:6688 -v ~/.chainlink-goerli:/chainlink -it --env-file=.env smartcontract/chainlink local n\n```\n\n```shell Mainnet\ncd ~/.chainlink && docker run --name chainlink -p 6688:6688 -v ~/.chainlink:/chainlink -it --env-file=.env smartcontract/chainlink local n\n```\n\nYou will now notice that you no longer receive a randomly generated name from Docker:\n\n```shell\ndocker ps\n```\n\nOutput (truncated):\n\n```\n... NAMES\n... chainlink\n```\n\nThis will remain your primary Chainlink container, and should always use port 6688 (unless configured otherwise). For the secondary instance, you will run the container in the same way, but with a different name and a different local port:\n\n```shell Goerli\ncd ~/.chainlink-goerli && docker run --name secondary -p 6687:6688 -v ~/.chainlink-goerli:/chainlink -it --env-file=.env smartcontract/chainlink local n\n```\n\n```shell Mainnet\ncd ~/.chainlink && docker run --name secondary -p 6687:6688 -v ~/.chainlink:/chainlink -it --env-file=.env smartcontract/chainlink local n\n```\n\nNotice the `--name secondary` was used for this container and the local port is 6687. Be sure to add this port to your SSH tunnel as well so that you can access the secondary node's GUI if it has become active (it will not function until the primary container goes down).\n\nRunning `docker ps` now reveals two named containers running (output truncated):\n\n```\n... NAMES\n... secondary\n... chainlink\n```\n\nIf your primary container goes down, the secondary one will automatically take over. To start the primary container again, simply run:\n\n```shell\ndocker start -i chainlink\n```\n\nThis will start the container, but the secondary node still has a lock on the database. To give the primary container access, you can restart the secondary container:\n\n```shell\ndocker restart secondary -t 0\n```\n\nThe primary container takes control of the database and resumes operation. You can attach to the secondary container using `docker attach`:\n\n```shell\ndocker attach secondary\n```\n\nHowever, it will not produce any output while waiting for a lock on the database.\n\nCongratulations! You now have a redundant setup of Chainlink nodes in case the primary container goes down. Get comfortable with the process by passing control of the database back and forth between the `chainlink` and `secondary` containers.\n"
    },
    {
      "title": "Proof of Reserves (BTC)",
      "headings": [],
      "url": "/chainlink-nodes/proof-of-reserves-btc",
      "section": "nodeOperator",
      "content": "\nIn order to contribute to the price aggregator contract, you will need to run external adapters for the provider you have been assigned. The Chainlink team will let you know which API to provide, and you can use this page as a guide for adding jobs to your node.\n\nExternal adapters can be found [here](https://github.com/smartcontractkit/external-adapters-js).\n\nFollow the instructions in the README to run the adapter in your infrastructure. You may need to obtain an API key for the data provider assigned to you. Follow [these instructions](/chainlink-nodes/external-adapters/node-operators/) for adding the external adapter as a bridge to your node.\n\nFirst, add a test job to your node which uses the Web initiator so that you can validate that the job will run successfully. Rename bridge names if required.\n\n```json Test RenVM & Blockcypher\n{\n  \"initiators\": [\n    {\n      \"type\": \"web\"\n    }\n  ],\n  \"tasks\": [\n    {\n      \"type\": \"renvm-address-set\",\n      \"params\": {\n        \"network\": \"mainnet\",\n        \"tokenOrContract\": \"btc\"\n      }\n    },\n    {\n      \"type\": \"copy\",\n      \"params\": {\n        \"copyPath\": [\"result\"]\n      }\n    },\n    {\n      \"type\": \"blockcypher\",\n      \"params\": {\n        \"dataPath\": \"result\",\n        \"endpoint\": \"balance\",\n        \"confirmations\": 6\n      }\n    },\n    {\n      \"type\": \"copy\",\n      \"params\": {\n        \"copyPath\": [\"result\"]\n      }\n    },\n    {\n      \"type\": \"reduce\",\n      \"params\": {\n        \"reducer\": \"sum\",\n        \"dataPath\": \"result\",\n        \"valuePath\": \"balance\",\n        \"initialValue\": 0\n      }\n    },\n    {\n      \"type\": \"copy\",\n      \"params\": {\n        \"copyPath\": [\"result\"]\n      }\n    },\n    {\n      \"type\": \"ethint256\"\n    }\n  ]\n}\n```\n\n```json Test wBTC & Blockcypher\n{\n  \"initiators\": [\n    {\n      \"type\": \"web\"\n    }\n  ],\n  \"tasks\": [\n    {\n      \"type\": \"wbtc-address-set\",\n      \"params\": {\n        \"network\": \"mainnet\",\n        \"tokenOrContract\": \"btc\"\n      }\n    },\n    {\n      \"type\": \"copy\",\n      \"params\": {\n        \"copyPath\": [\"result\"]\n      }\n    },\n    {\n      \"type\": \"blockcypher\",\n      \"params\": {\n        \"dataPath\": \"result\",\n        \"endpoint\": \"balance\",\n        \"confirmations\": 6\n      }\n    },\n    {\n      \"type\": \"copy\",\n      \"params\": {\n        \"copyPath\": [\"result\"]\n      }\n    },\n    {\n      \"type\": \"reduce\",\n      \"params\": {\n        \"reducer\": \"sum\",\n        \"dataPath\": \"result\",\n        \"valuePath\": \"balance\",\n        \"initialValue\": 0\n      }\n    },\n    {\n      \"type\": \"copy\",\n      \"params\": {\n        \"copyPath\": [\"result\"]\n      }\n    },\n    {\n      \"type\": \"ethint256\"\n    }\n  ]\n}\n```\n\n```json Test RenVM & Blockchain.com\n{\n  \"initiators\": [\n    {\n      \"type\": \"web\"\n    }\n  ],\n  \"tasks\": [\n    {\n      \"type\": \"renvm-address-set\",\n      \"params\": {\n        \"network\": \"mainnet\",\n        \"tokenOrContract\": \"btc\"\n      }\n    },\n    {\n      \"type\": \"copy\",\n      \"params\": {\n        \"copyPath\": [\"result\"]\n      }\n    },\n    {\n      \"type\": \"blockchain-com\",\n      \"params\": {\n        \"dataPath\": \"result\",\n        \"endpoint\": \"balance\",\n        \"confirmations\": 0\n      }\n    },\n    {\n      \"type\": \"copy\",\n      \"params\": {\n        \"copyPath\": [\"result\"]\n      }\n    },\n    {\n      \"type\": \"reduce\",\n      \"params\": {\n        \"reducer\": \"sum\",\n        \"dataPath\": \"result\",\n        \"valuePath\": \"balance\",\n        \"initialValue\": 0\n      }\n    },\n    {\n      \"type\": \"copy\",\n      \"params\": {\n        \"copyPath\": [\"result\"]\n      }\n    },\n    {\n      \"type\": \"ethint256\"\n    }\n  ]\n}\n```\n\n```json Test wBTC & Blockchain.com\n{\n  \"initiators\": [\n    {\n      \"type\": \"web\"\n    }\n  ],\n  \"tasks\": [\n    {\n      \"type\": \"wbtc-address-set\",\n      \"params\": {\n        \"network\": \"mainnet\",\n        \"tokenOrContract\": \"btc\"\n      }\n    },\n    {\n      \"type\": \"copy\",\n      \"params\": {\n        \"copyPath\": [\"result\"]\n      }\n    },\n    {\n      \"type\": \"blockchain-com\",\n      \"params\": {\n        \"dataPath\": \"result\",\n        \"endpoint\": \"balance\",\n        \"confirmations\": 0\n      }\n    },\n    {\n      \"type\": \"copy\",\n      \"params\": {\n        \"copyPath\": [\"result\"]\n      }\n    },\n    {\n      \"type\": \"reduce\",\n      \"params\": {\n        \"reducer\": \"sum\",\n        \"dataPath\": \"result\",\n        \"valuePath\": \"balance\",\n        \"initialValue\": 0\n      }\n    },\n    {\n      \"type\": \"copy\",\n      \"params\": {\n        \"copyPath\": [\"result\"]\n      }\n    },\n    {\n      \"type\": \"ethint256\"\n    }\n  ]\n}\n```\n\nOn the Job Spec Detail page for the job, click the Run button. You should see a green bar at the top that the node Successfully created job run `JobRunID`. Click on that Job Run ID and verify that all tasks have been Completed with green check marks.\n\n```json\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"/files/8cfc185-Screenshot_from_2019-06-21_08-29-07.png\",\n        \"Screenshot from 2019-06-21 08-29-07.png\",\n        1894,\n        806,\n        \"#fafafb\"\n      ]\n    }\n  ]\n}\n```\n\nIf the test job has ran successfully, add the following job to your node. Rename bridge names if required. Replace the following values:\n\n- `YOUR_ORACLE_CONTRACT_ADDRESS` with your oracle contract address\n\n```json RenVM & Blockcypher\n{\n  \"initiators\": [\n    {\n      \"type\": \"runlog\",\n      \"params\": {\n        \"address\": \"YOUR_ORACLE_CONTRACT_ADDRESS\"\n      }\n    }\n  ],\n  \"tasks\": [\n    {\n      \"type\": \"renvm-address-set\",\n      \"params\": {\n        \"network\": \"mainnet\",\n        \"tokenOrContract\": \"btc\"\n      }\n    },\n    {\n      \"type\": \"copy\",\n      \"params\": {\n        \"copyPath\": [\"result\"]\n      }\n    },\n    {\n      \"type\": \"blockcypher\",\n      \"params\": {\n        \"dataPath\": \"result\",\n        \"endpoint\": \"balance\",\n        \"confirmations\": 6\n      }\n    },\n    {\n      \"type\": \"copy\",\n      \"params\": {\n        \"copyPath\": [\"result\"]\n      }\n    },\n    {\n      \"type\": \"reduce\",\n      \"params\": {\n        \"reducer\": \"sum\",\n        \"dataPath\": \"result\",\n        \"valuePath\": \"balance\",\n        \"initialValue\": 0\n      }\n    },\n    {\n      \"type\": \"copy\",\n      \"params\": {\n        \"copyPath\": [\"result\"]\n      }\n    },\n    {\n      \"type\": \"ethint256\"\n    },\n    {\n      \"type\": \"ethtx\"\n    }\n  ]\n}\n```\n\n```json wBTC & Blockcypher\n{\n  \"initiators\": [\n    {\n      \"type\": \"runlog\",\n      \"params\": {\n        \"address\": \"YOUR_ORACLE_CONTRACT_ADDRESS\"\n      }\n    }\n  ],\n  \"tasks\": [\n    {\n      \"type\": \"wbtc-address-set\",\n      \"params\": {\n        \"network\": \"mainnet\",\n        \"tokenOrContract\": \"btc\"\n      }\n    },\n    {\n      \"type\": \"copy\",\n      \"params\": {\n        \"copyPath\": [\"result\"]\n      }\n    },\n    {\n      \"type\": \"blockcypher\",\n      \"params\": {\n        \"dataPath\": \"result\",\n        \"endpoint\": \"balance\",\n        \"confirmations\": 6\n      }\n    },\n    {\n      \"type\": \"copy\",\n      \"params\": {\n        \"copyPath\": [\"result\"]\n      }\n    },\n    {\n      \"type\": \"reduce\",\n      \"params\": {\n        \"reducer\": \"sum\",\n        \"dataPath\": \"result\",\n        \"valuePath\": \"balance\",\n        \"initialValue\": 0\n      }\n    },\n    {\n      \"type\": \"copy\",\n      \"params\": {\n        \"copyPath\": [\"result\"]\n      }\n    },\n    {\n      \"type\": \"ethint256\"\n    },\n    {\n      \"type\": \"ethtx\"\n    }\n  ]\n}\n```\n\n```json RenVM & Blockchain.com\n{\n  \"initiators\": [\n    {\n      \"type\": \"runlog\",\n      \"params\": {\n        \"address\": \"YOUR_ORACLE_CONTRACT_ADDRESS\"\n      }\n    }\n  ],\n  \"tasks\": [\n    {\n      \"type\": \"renvm-address-set\",\n      \"params\": {\n        \"network\": \"mainnet\",\n        \"tokenOrContract\": \"btc\"\n      }\n    },\n    {\n      \"type\": \"copy\",\n      \"params\": {\n        \"copyPath\": [\"result\"]\n      }\n    },\n    {\n      \"type\": \"blockchain-com\",\n      \"params\": {\n        \"dataPath\": \"result\",\n        \"endpoint\": \"balance\",\n        \"confirmations\": 0\n      }\n    },\n    {\n      \"type\": \"copy\",\n      \"params\": {\n        \"copyPath\": [\"result\"]\n      }\n    },\n    {\n      \"type\": \"reduce\",\n      \"params\": {\n        \"reducer\": \"sum\",\n        \"dataPath\": \"result\",\n        \"valuePath\": \"balance\",\n        \"initialValue\": 0\n      }\n    },\n    {\n      \"type\": \"copy\",\n      \"params\": {\n        \"copyPath\": [\"result\"]\n      }\n    },\n    {\n      \"type\": \"ethint256\"\n    },\n    {\n      \"type\": \"ethtx\"\n    }\n  ]\n}\n```\n\n```json wBTC & Blockchain.com\n{\n  \"initiators\": [\n    {\n      \"type\": \"runlog\",\n      \"params\": {\n        \"address\": \"YOUR_ORACLE_CONTRACT_ADDRESS\"\n      }\n    }\n  ],\n  \"tasks\": [\n    {\n      \"type\": \"wbtc-address-set\",\n      \"params\": {\n        \"network\": \"mainnet\",\n        \"tokenOrContract\": \"btc\"\n      }\n    },\n    {\n      \"type\": \"copy\",\n      \"params\": {\n        \"copyPath\": [\"result\"]\n      }\n    },\n    {\n      \"type\": \"blockchain-com\",\n      \"params\": {\n        \"dataPath\": \"result\",\n        \"endpoint\": \"balance\",\n        \"confirmations\": 0\n      }\n    },\n    {\n      \"type\": \"copy\",\n      \"params\": {\n        \"copyPath\": [\"result\"]\n      }\n    },\n    {\n      \"type\": \"reduce\",\n      \"params\": {\n        \"reducer\": \"sum\",\n        \"dataPath\": \"result\",\n        \"valuePath\": \"balance\",\n        \"initialValue\": 0\n      }\n    },\n    {\n      \"type\": \"copy\",\n      \"params\": {\n        \"copyPath\": [\"result\"]\n      }\n    },\n    {\n      \"type\": \"ethint256\"\n    },\n    {\n      \"type\": \"ethtx\"\n    }\n  ]\n}\n```\n\nOnce added, open a PR with the Job ID associated with the job above. Base this PR off the branch of the PR sent to you by the Chainlink team.\n\nMake sure that your `MINIMUM_CONTRACT_PAYMENT_LINK_JUELS` environment variable is low enough to accept the payment amount from the aggregator contract on mainnet.\n"
    },
    {
      "title": "Run an Ethereum Client",
      "headings": [
        {
          "depth": 2,
          "slug": "geth",
          "text": "Geth"
        },
        {
          "depth": 2,
          "slug": "nethermind",
          "text": "Nethermind"
        },
        {
          "depth": 2,
          "slug": "external-services",
          "text": "External Services"
        },
        {
          "depth": 2,
          "slug": "alchemy",
          "text": "Alchemy"
        },
        {
          "depth": 2,
          "slug": "chainstack",
          "text": "Chainstack"
        },
        {
          "depth": 2,
          "slug": "fiews",
          "text": "Fiews"
        },
        {
          "depth": 2,
          "slug": "getblock",
          "text": "GetBlock"
        },
        {
          "depth": 2,
          "slug": "infura",
          "text": "Infura"
        },
        {
          "depth": 2,
          "slug": "linkpool",
          "text": "LinkPool"
        },
        {
          "depth": 2,
          "slug": "quiknode",
          "text": "QuikNode"
        },
        {
          "depth": 2,
          "slug": "configuring-your-eth-node",
          "text": "Configuring your ETH node"
        },
        {
          "depth": 2,
          "slug": "additional-tools",
          "text": "Additional Tools"
        }
      ],
      "url": "/chainlink-nodes/run-an-ethereum-client",
      "section": "nodeOperator",
      "content": "\nChainlink nodes must be able to connect to an Ethereum client with an active websocket connection. This is accomplished by running both an execution client and a consensus client. You can run these clients yourself, but running Ethereum clients requires significant storage and network resources. Optionally, you can use [External Services](#external-services) that manage these clients for you.\n\n:::note[Enable the Websockets API]\nIf you run these clients yourself, you must enable the websockets API. The websockets API is required for the Chainlink node to communicate with the Ethereum blockchain.\n:::\n\n## Geth\n\nYou can use the [Geth client](https://geth.ethereum.org/docs/) for the Goerli testnet and the Ethereum Mainnet. See the [Geth Documentation](https://geth.ethereum.org/docs/interface/peer-to-peer/) for a list of supported networks.\n\nDownload the latest version:\n\n```shell\ndocker pull ethereum/client-go:latest\n```\n\nCreate a local directory to persist the data:\n\n```shell Goerli\nmkdir ~/.geth-goerli\n```\n\n```shell Mainnet\nmkdir ~/.geth\n```\n\nRun the container:\n\n```shell Goerli\ndocker run --name eth -p 8546:8546 -v ~/.geth-goerli:/geth -it \\\n           ethereum/client-go --goerli --ws --ipcdisable \\\n           --ws.addr 0.0.0.0 --ws.origins=\"*\" --datadir /geth\n```\n\n```shell Mainnet\ndocker run --name eth -p 8546:8546 -v ~/.geth:/geth -it \\\n           ethereum/client-go --ws --ipcdisable \\\n           --ws.addr 0.0.0.0 --ws.origins=\"*\" --datadir /geth\n```\n\nOnce the Ethereum client is running, you can use `Ctrl + P, Ctrl + Q` to detach from the container without stopping it. You will need to leave the container running for the Chainlink node to connect to it.\n\nIf the container was stopped and you need to run it again, you can simply use the following command:\n\n```shell\ndocker start -i eth\n```\n\nFollow Geth's instructions for [Connecting to Consensus Clients](https://geth.ethereum.org/docs/interface/consensus-clients). This will require some additional configuration settings for the Docker command that runs Geth.\n\nReturn to [Running a Chainlink Node](/chainlink-nodes/running-a-chainlink-node/).\n\n## Nethermind\n\nYou can use the [Nethermind client](https://docs.nethermind.io/nethermind/) for the Goerli testnet and the Ethereum Mainnet. See the [Nethermind supported network configurations](https://docs.nethermind.io/nethermind/ethereum-client/docker#available-configurations) page for a list of supported networks.\n\nDownload the latest version:\n\n```shell\ndocker pull nethermind/nethermind:latest\n```\n\nCreate a local directory to persist the data:\n\n```shell Goerli\nmkdir ~/.nethermind-goerli\n```\n\n```shell Mainnet\nmkdir ~/.nethermind\n```\n\nRun the container:\n\n```shell Goerli\ndocker run --name eth -p 8545:8545 \\\n           -v ~/.nethermind-goerli/:/nethermind/data \\\n           -it nethermind/nethermind:latest --config goerli \\\n           --Init.WebSocketsEnabled true --JsonRpc.Enabled true --JsonRpc.Host 0.0.0.0 --NoCategory.CorsOrigins * \\\n           --datadir data\n```\n\n```shell Mainnet\ndocker run --name eth -p 8545:8545 \\\n           -v ~/.nethermind/:/nethermind/data \\\n           -it nethermind/nethermind:latest --Sync.FastSync true \\\n           --Init.WebSocketsEnabled true --JsonRpc.Enabled true --JsonRpc.Host 0.0.0.0 --NoCategory.CorsOrigins * \\\n           --datadir data\n```\n\nAfter the Ethereum client is running, you can use `Ctrl + P, Ctrl + Q` to detach from the container without stopping it. You will need to leave the container running for the Chainlink node to connect to it.\n\nIf the container was stopped and you need to run it again, use the following command to start it:\n\n```shell\ndocker start -i eth\n```\n\nFollow Nethermind's instructions for [Installing and configuring the Consensus Client](https://docs.nethermind.io/nethermind/guides-and-helpers/validator-setup/eth2-validator#setup). This will require some additional configuration settings for the Docker command that runs Nethermind.\n\nReturn to [Running a Chainlink Node](/chainlink-nodes/running-a-chainlink-node/).\n\n## External Services\n\nThe following services offer Ethereum clients with websockets connectivity known to work with the Chainlink node.\n\n## [Alchemy](https://www.alchemyapi.io)\n\nExample connection setting:\n\n```text Goerli\nETH_URL=wss://eth-goerli.alchemyapi.io/v2/YOUR_PROJECT_ID\n```\n\n```text Mainnet\nETH_URL=wss://eth-mainnet.alchemyapi.io/v2/YOUR_PROJECT_ID\n```\n\n## [Chainstack](https://support.chainstack.com/hc/en-us/articles/900001664463-Setting-up-a-Chainlink-node-with-an-Ethereum-node-provided-by-Chainstack)\n\nExample connection setting:\n\n```text Mainnet\nETH_URL=wss://user-name:pass-word-pass-word-pass-word@ws-nd-123-456-789.p2pify.com\n```\n\n## [Fiews](https://docs.fiews.io/docs/getting-started)\n\nExample connection setting:\n\n```text Mainnet\nETH_URL=wss://cl-main.fiews.io/v2/YOUR_API_KEY\n```\n\n## [GetBlock](https://getblock.io/)\n\nExample connection setting:\n\n```text Goerli\nETH_URL=wss://eth.getblock.io/goerli/?api_key=YOUR_API_KEY\n```\n\n```text Sepolia\nETH_URL=wss://eth.getblock.io/sepolia/?api_key=YOUR_API_KEY\n```\n\n```text Mainnet\nETH_URL=wss://eth.getblock.io/mainnet/?api_key=YOUR_API_KEY\n```\n\n## [Infura](https://infura.io/docs/ethereum/wss/introduction.md)\n\nExample connection setting. Replace YOUR_PROJECT_ID with the ID Infura provides you on your project settings page.\n\n```text Goerli\nETH_URL=wss://goerli.infura.io/ws/v3/YOUR_PROJECT_ID\n```\n\n```text Mainnet\nETH_URL=wss://mainnet.infura.io/ws/v3/YOUR_PROJECT_ID\n```\n\n## [LinkPool](https://docs.linkpool.io/docs/websocket_main)\n\nExample connection setting:\n\n```text Mainnet\nETH_URL=wss://main-rpc.linkpool.io/ws\n```\n\n## [QuikNode](https://www.quiknode.io)\n\nExample connection setting:\n\n```text Goerli\nETH_URL=wss://your-node-name.goerli.quiknode.pro/security-hash/\n```\n\n```text Mainnet\nETH_URL=wss://your-node-name.quiknode.pro/security-hash/\n```\n\n## Configuring your ETH node\n\n:::caution[RPC gas/txfee caps]\nBy default, go-ethereum rejects transactions that exceed the built-in RPC gas/txfee caps. The node will fatally error transactions if this happens. If you ever exceed the caps, the node will miss transactions.\n:::\n\nAt a minimum, disable the default RPC gas and txfee caps on your ETH node. This can be done in the TOML file as seen below, or by running go-ethereum with the command line arguments: `--rpc.gascap=0 --rpc.txfeecap=0`.\n\nTo learn more about configuring ETH nodes, see the [configuration page](/chainlink-nodes/configuration-variables/#configuring-your-eth-node).\n\n## Additional Tools\n\n- [Chainlink ETH Failover Proxy](https://github.com/Fiews/ChainlinkEthFailover)\n"
    },
    {
      "title": "Running a Chainlink Node",
      "headings": [
        {
          "depth": 2,
          "slug": "requirements",
          "text": "Requirements"
        },
        {
          "depth": 3,
          "slug": "link-requirements",
          "text": "LINK requirements"
        },
        {
          "depth": 3,
          "slug": "chainlink-node-requirements",
          "text": "Chainlink Node Requirements"
        },
        {
          "depth": 3,
          "slug": "postgresql-database-requirements",
          "text": "PostgreSQL Database Requirements"
        },
        {
          "depth": 3,
          "slug": "ethereum-client",
          "text": "Ethereum Client"
        },
        {
          "depth": 2,
          "slug": "running-from-source",
          "text": "Running From Source"
        },
        {
          "depth": 2,
          "slug": "using-docker",
          "text": "Using Docker"
        },
        {
          "depth": 3,
          "slug": "requirements-1",
          "text": "Requirements"
        },
        {
          "depth": 4,
          "slug": "create-a-directory",
          "text": "Create a directory"
        },
        {
          "depth": 4,
          "slug": "create-an-environment-file",
          "text": "Create an Environment File"
        },
        {
          "depth": 4,
          "slug": "set-your-ethereum-client-url",
          "text": "Set your Ethereum Client URL"
        },
        {
          "depth": 4,
          "slug": "ethereum-client-on-the-same-machine",
          "text": "Ethereum Client on the Same Machine"
        },
        {
          "depth": 4,
          "slug": "ethereum-client-as-an-external-provider",
          "text": "Ethereum Client as an External Provider"
        },
        {
          "depth": 4,
          "slug": "set-the-remote-database_url-config",
          "text": "Set the Remote DATABASE_URL Config"
        },
        {
          "depth": 4,
          "slug": "start-the-chainlink-node",
          "text": "Start the Chainlink Node"
        }
      ],
      "url": "/chainlink-nodes/running-a-chainlink-node",
      "section": "nodeOperator",
      "description": "Run your own Chainlink node using this guide which explains the requirements and basics for getting started.",
      "content": "\nThis page explains the requirements and basic instructions for running your own Chainlink node.\n\nNote that nodes can fulfill requests for open APIs out-of-the-box using [Tasks](/chainlink-nodes/oracle-jobs/task-types/tasks/) without needing any additional configuration.\n\nTo provide data from an authenticated API, add an [external adapter](/chainlink-nodes/external-adapters/external-adapters/) to enable connectivity through the Chainlink node.\n\n![Chainlink Node Diagram](/files/ab5762f-end-to-end-diagram.png)\n\n## Requirements\n\n### LINK requirements\n\nYou can run a Chainlink node with 0 LINK, but the node will not be able to participate in requests that require a deposit until it has earned some LINK first.\n\nRequesters can specify an amount of LINK that all nodes must deposit as a penalty fee in the event that the node doesn’t fulfill the request. However, since penalty fees are optional, not all requests will require it.\n\n### Chainlink Node Requirements\n\nYour Chainlink node should be run on a server that has a public IP address, and meets the following CPU and memory requirements:\n\n- Minimum: To get started running a Chainlink node, you will need a machine with at least **2 cores** and **4 GB of RAM**.\n- Recommended: The requirements for running a Chainlink node scale as the number of jobs your node services also scales. For nodes with over 100 jobs, you will need at least **4 cores** and **8GB of RAM**.\n\n### PostgreSQL Database Requirements\n\nIn addition to running a Chainlink node, must also run a PostgreSQL database version 11 or newer on a system that meets the following CPU, memory, and storage requirements:\n\n- Minimum: At least **2 cores**, **4GB of RAM**, and **100 GB of storage**.\n- Recommended: To support more than 100 jobs, your database server will need at least **4 cores**, **16 GB of RAM**, and **100 GB of storage**.\n\nMake sure that your DB host provides access to logs.\n\nIf you run your node on AWS, use an instance type with dedicated core time. [Burstable Performance Instances](https://aws.amazon.com/ec2/instance-types/#Burstable_Performance_Instances) have a limited number of [CPU credits](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-credits-baseline-concepts.html), so you should not use them to run Chainlink nodes that require consistent performance.\n\n### Ethereum Client\n\nConnectivity to an Ethereum client is also required for communication with the blockchain. If you decide to run your own Ethereum client, you will want to run that on a separate machine. Hardware requirements of Ethereum clients can change over time. You can also use a [third-party service](/chainlink-nodes/run-an-ethereum-client/#external-services) as your Ethereum client.\n\n## Running From Source\n\nTo run a Chainlink node from source, use the [following instructions](https://github.com/smartcontractkit/chainlink#install).\n\n## Using Docker\n\nIt's recommended to run the Chainlink node with [Docker](https://www.docker.com/). This is because we continuously build and deploy the code from our [repository on Github](https://github.com/smartcontractkit/chainlink), which means you don't need a complete development environment to run a node.\n\n### Requirements\n\n- [Docker-CE](https://docs.docker.com/install/). Quick instructions for setting up Docker are below:\n\n  ```shell Amazon Linux 2\n  sudo amazon-linux-extras install -y docker\n  sudo systemctl start docker\n  sudo gpasswd -a $USER docker\n  exit\n  # log in again\n  ```\n\n  ```shell CentOS\n  curl -sSL https://get.docker.com/ | sh\n  sudo systemctl start docker\n  sudo usermod -aG docker $USER\n  exit\n  # log in again\n  ```\n\n  ```shell Debian\n  curl -sSL https://get.docker.com/ | sh\n  sudo usermod -aG docker $USER\n  exit\n  # log in again\n  ```\n\n  ```shell Fedora\n  curl -sSL https://get.docker.com/ | sh\n  sudo systemctl start docker\n  sudo usermod -aG docker $USER\n  exit\n  # log in again\n  ```\n\n  ```shell Ubuntu\n  curl -sSL https://get.docker.com/ | sh\n  sudo usermod -aG docker $USER\n  exit\n  # log in again\n  ```\n\n- A fully synced Ethereum execution client with websockets enabled and a connected consensus client. See [Running an Ethereum Client](/chainlink-nodes/run-an-ethereum-client/) for details. Optionally, you can [use an external service](/chainlink-nodes/run-an-ethereum-client/#external-services) as your client.\n\n#### Create a directory\n\nOnce you have your Ethereum client running and fully synced, you're ready to run the Chainlink node.\n\nCreate a local directory to hold the Chainlink data:\n\n```shell Goerli\nmkdir ~/.chainlink-goerli\n```\n\n```shell Mainnet\nmkdir ~/.chainlink\n```\n\n:::note[Other Supported Networks]\nChainlink is blockchain agnostic technology. The [LINK Token Contracts](/resources/link-token-contracts/) page details networks which support the LINK token. You can setup your node to provide data to any of these blockchains.\n:::\n\n#### Create an Environment File\n\nRun the following as a command to create an environment file and populate with variables specific to the network you're running on. For a full list of available configuration variables, click [here](/chainlink-nodes/configuration-variables/).\n\n```shell Goerli\necho \"ROOT=/chainlink\nLOG_LEVEL=debug\nETH_CHAIN_ID=5\nCHAINLINK_TLS_PORT=0\nSECURE_COOKIES=false\nALLOW_ORIGINS=*\" > ~/.chainlink-goerli/.env\n```\n\n```shell Mainnet\necho \"ROOT=/chainlink\nLOG_LEVEL=debug\nETH_CHAIN_ID=1\nCHAINLINK_TLS_PORT=0\nSECURE_COOKIES=false\nALLOW_ORIGINS=*\" > ~/.chainlink/.env\n```\n\n#### Set your Ethereum Client URL\n\n:::note[Using an external Ethereum client?]\nIf you're using a 3rd party service to connect to the blockchain, skip to the [External Provider](#ethereum-client-as-an-external-provider) section to set the `ETH_URL` environment variable. We provide general guidance, but you will need to obtain the websocket connection string to add to your environment file.\n:::\n\n#### Ethereum Client on the Same Machine\n\nNext you need to get the URL for the Ethereum client. The command below will help you obtain the IP address of the container that your Ethereum client is running on. **This will only work if you have started an Ethereum client on the same machine as your Chainlink node.**\n\n```shell Local\nETH_CONTAINER_IP=$(docker inspect --format '{{ \"{{ .NetworkSettings.IPAddress \" }}}}' $(docker ps -f name=eth -q))\n```\n\nThen run the following command to add the Ethereum client's URL to your environment file. If you are using an external Ethereum client, use the External tab below, and update `$ETH_CONTAINER_IP` to the websocket address used for connectivity.\n\n```shell Goerli\necho \"ETH_URL=ws://$ETH_CONTAINER_IP:8546\" >> ~/.chainlink-goerli/.env\n```\n\n```shell Mainnet\necho \"ETH_URL=ws://$ETH_CONTAINER_IP:8546\" >> ~/.chainlink/.env\n```\n\n#### Ethereum Client as an External Provider\n\nIf you are using an external provider for connectivity to the Ethereum blockchain or you are running an Ethereum client on a separate instance, you may use the command below for your network. Be sure to update the value for `CHANGEME` to the value given by your provider or the address and port of your separate instance.\n\n```shell Goerli\necho \"ETH_URL=CHANGEME\" >> ~/.chainlink-goerli/.env\n```\n\n```shell Mainnet\necho \"ETH_URL=CHANGEME\" >> ~/.chainlink/.env\n```\n\n:::note[Running Chainlink Node on Ganache]\nGanache is a mock testnet. Although you can run nodes on Ganache, it is not officially supported. Most node operators should use one of the supported [testnets](/resources/link-token-contracts/) for development and testing.\n:::\n\n#### Set the Remote DATABASE_URL Config\n\nYou will need to connect your Chainlink node with a remote PostgreSQL database. See the [Connecting to a Remote Database](/chainlink-nodes/connecting-to-a-remote-database/) page for more information. Use the example below to configure your `DATABASE_URL` setting in your environment file, replacing `$VARIABLES` with their actual values.\n\n- `$USERNAME`: The database username (must be owner)\n- `$PASSWORD`: The user's password\n- `$SERVER`: The server name or IP address of the database server\n- `$PORT`: The port that the database is listening on\n- `$DATABASE`: The database to use for the Chainlink node (i.e. \"postgres\")\n\n:::tip[Important]\nIf you're testing you can add `?sslmode=disable` to the end of your `DATABASE_URL`. However you should _never_ do this on a production node.\n:::\n\n```shell Goerli\necho \"DATABASE_URL=postgresql://$USERNAME:$PASSWORD@$SERVER:$PORT/$DATABASE\" >> ~/.chainlink-goerli/.env\n```\n\n```shell Mainnet\necho \"DATABASE_URL=postgresql://$USERNAME:$PASSWORD@$SERVER:$PORT/$DATABASE\" >> ~/.chainlink/.env\n```\n\n#### Start the Chainlink Node\n\nNow you can run the Docker image. Replace `<version>` with your desired version. Tag versions are available in the [Chainlink docker hub](https://hub.docker.com/r/smartcontract/chainlink/tags). _The `latest` version does not work._\n\n```shell Goerli\ncd ~/.chainlink-goerli && docker run -p 6688:6688 -v ~/.chainlink-goerli:/chainlink -it --env-file=.env smartcontract/chainlink:<version> local n\n```\n\n```shell Mainnet\ncd ~/.chainlink && docker run -p 6688:6688 -v ~/.chainlink:/chainlink -it --env-file=.env smartcontract/chainlink:<version> local n\n```\n\n:::note[Local Database]\nIf you're running a local database you may need to add the `--network host` flag to the command above.\n:::\n\nThe first time running the image, it will ask you for a password and confirmation. This will be your wallet password that you can use to unlock the keystore file generated for you. Then, you'll be prompted to enter an API Email and Password. This will be used to expose the API for the GUI interface, and will be used every time you log into your node. When running the node again, you can supply the `-p` option with a path to a text file containing the wallet key password, and a `-a` option, pointing to a text file containing the API email and password. Instructions on how to do that are [here](/chainlink-nodes/miscellaneous/#use-password-and-api-files-on-startup).\n\n:::tip[Important]\nYou will need to send some ETH to your node's address in order for it to fulfill requests. You can view your node's ETH address when the node starts up or on the Configuration page of the GUI.\n:::\n\nYou can now connect to your Chainlink node's UI interface by navigating to [http://localhost:6688](http://localhost:6688). If using a VPS, you can create a [SSH tunnel](https://www.howtogeek.com/168145/how-to-use-ssh-tunneling/) to your node for `6688:localhost:6688` to enable connectivity to the GUI. Typically this is done with `ssh -i $KEY $USER@$REMOTE-IP -L 6688:localhost:6688 -N`. A SSH tunnel is recommended over opening up ports specific to the Chainlink node to be public facing. See the [Security and Operation Best Practices](/chainlink-nodes/best-security-practices/) page for more details on how to secure your node.\n"
    },
    {
      "title": "Deprecation of Chainlink Data Feeds",
      "headings": [],
      "url": "/data-feeds/deprecating-feeds",
      "section": "ethereum",
      "description": "Deprecation of Chainlink Data Feeds",
      "content": "\n<FeedPage ecosystem=\"deprecating\" />"
    },
    {
      "title": "Feed Registry API Reference",
      "headings": [
        {
          "depth": 2,
          "slug": "functions",
          "text": "Functions"
        },
        {
          "depth": 3,
          "slug": "decimals",
          "text": "decimals"
        },
        {
          "depth": 4,
          "slug": "parameters",
          "text": "Parameters"
        },
        {
          "depth": 3,
          "slug": "return-values",
          "text": "Return Values"
        },
        {
          "depth": 2,
          "slug": "description",
          "text": "description"
        },
        {
          "depth": 4,
          "slug": "parameters-1",
          "text": "Parameters"
        },
        {
          "depth": 4,
          "slug": "return-values-1",
          "text": "Return Values"
        },
        {
          "depth": 3,
          "slug": "getrounddata",
          "text": "getRoundData"
        },
        {
          "depth": 4,
          "slug": "parameters-2",
          "text": "Parameters"
        },
        {
          "depth": 4,
          "slug": "return-values-2",
          "text": "Return Values"
        },
        {
          "depth": 3,
          "slug": "latestrounddata",
          "text": "latestRoundData"
        },
        {
          "depth": 4,
          "slug": "return-values-3",
          "text": "Return Values"
        },
        {
          "depth": 3,
          "slug": "version",
          "text": "version"
        },
        {
          "depth": 4,
          "slug": "parameters-3",
          "text": "Parameters"
        },
        {
          "depth": 4,
          "slug": "return-values-4",
          "text": "Return Values"
        },
        {
          "depth": 3,
          "slug": "getfeed",
          "text": "getFeed"
        },
        {
          "depth": 4,
          "slug": "parameters-4",
          "text": "Parameters"
        },
        {
          "depth": 4,
          "slug": "return-values-5",
          "text": "Return Values"
        },
        {
          "depth": 3,
          "slug": "getphasefeed",
          "text": "getPhaseFeed"
        },
        {
          "depth": 4,
          "slug": "parameters-5",
          "text": "Parameters"
        },
        {
          "depth": 4,
          "slug": "return-values-6",
          "text": "Return Values"
        },
        {
          "depth": 3,
          "slug": "isfeedenabled",
          "text": "isFeedEnabled"
        },
        {
          "depth": 4,
          "slug": "parameters-6",
          "text": "Parameters"
        },
        {
          "depth": 4,
          "slug": "return-values-7",
          "text": "Return Values"
        },
        {
          "depth": 3,
          "slug": "getphase",
          "text": "getPhase"
        },
        {
          "depth": 4,
          "slug": "parameters-7",
          "text": "Parameters"
        },
        {
          "depth": 4,
          "slug": "return-values-8",
          "text": "Return Values"
        },
        {
          "depth": 3,
          "slug": "getroundfeed",
          "text": "getRoundFeed"
        },
        {
          "depth": 4,
          "slug": "parameters-8",
          "text": "Parameters"
        },
        {
          "depth": 4,
          "slug": "return-values-9",
          "text": "Return Values"
        },
        {
          "depth": 3,
          "slug": "getphaserange",
          "text": "getPhaseRange"
        },
        {
          "depth": 4,
          "slug": "parameters-9",
          "text": "Parameters"
        },
        {
          "depth": 4,
          "slug": "return-values-10",
          "text": "Return Values"
        },
        {
          "depth": 3,
          "slug": "getpreviousroundid",
          "text": "getPreviousRoundId"
        },
        {
          "depth": 4,
          "slug": "parameters-10",
          "text": "Parameters"
        },
        {
          "depth": 4,
          "slug": "return-values-11",
          "text": "Return Values"
        },
        {
          "depth": 3,
          "slug": "getnextroundid",
          "text": "getNextRoundId"
        },
        {
          "depth": 4,
          "slug": "parameters-11",
          "text": "Parameters"
        },
        {
          "depth": 4,
          "slug": "return-values-12",
          "text": "Return Values"
        },
        {
          "depth": 3,
          "slug": "getcurrentphaseid",
          "text": "getCurrentPhaseId"
        },
        {
          "depth": 4,
          "slug": "parameters-12",
          "text": "Parameters"
        },
        {
          "depth": 4,
          "slug": "return-values-13",
          "text": "Return Values"
        }
      ],
      "url": "/data-feeds/feed-registry/feed-registry-functions",
      "section": "ethereum",
      "description": "Chainlink Feed Registry Functions",
      "content": "\r\nThis guide outlines the functions which can be used with Chainlink's Feed Registry. You can learn more about the feed registry [here](/data-feeds/feed-registry/).\r\n\r\n## Functions\r\n\r\n|Name|Description|\r\n|---|---|\r\n|[decimals](#decimals)|The number of decimals in the response.|\r\n|[description](#description)|The description of the aggregator that the proxy points to.|\r\n|[getRoundData](#getrounddata)|Get data from a specific round.|\r\n|[latestRoundData](#latestrounddata)|Get data from the latest round.|\r\n|[version](#version)|The version representing the type of aggregator the proxy points to.|\r\n|[getFeed](#getfeed)| Returns the primary aggregator address of a base / quote pair.|\r\n|[getPhaseFeed](#getphasefeed)| Returns the aggregator address of a base / quote pair at a specified phase.|\r\n|[isFeedEnabled](#isfeedenabled)| Returns true if an aggregator is enabled as primary on the registry.|\r\n|[getPhase](#getphase)| Returns the raw starting and ending aggregator round ids of a base / quote pair.|\r\n|[getRoundFeed](#getroundfeed)| Returns the underlying aggregator address of a base / quote pair at a specified round.|\r\n|[getPhaseRange](#getphaserange)| Returns the starting and ending round ids of a base / quote pair at a specified phase.|\r\n|[getPreviousRoundId](#getpreviousroundid)| Returns the previous round id of a base / quote pair given a specified round.|\r\n|[getNextRoundId](#getnextroundid)| Returns the next round id of a base / quote pair given a specified round.|\r\n|[getCurrentPhaseId](#getcurrentphaseid)| Returns the current phase id of a base / quote pair.|\r\n___\r\n\r\n### decimals\r\n\r\nGet the number of decimals present in the response value.\r\n\r\n```solidity\r\nfunction decimals(address base, address quote) external view returns (uint8)\r\n```\r\n\r\n#### Parameters\r\n\r\n* `base`: The base asset address.\r\n* `quote`: The quote asset address.\r\n\r\n### Return Values\r\n\r\n* `RETURN`: The number of decimals.\r\n\r\n## description\r\n\r\nGet the description of the underlying aggregator that the proxy points to.\r\n\r\n```solidity\r\nfunction description(address base, address quote) external view returns (string memory)\r\n```\r\n\r\n#### Parameters\r\n\r\n* `base`: The base asset address.\r\n* `quote`: The quote asset address.\r\n\r\n#### Return Values\r\n\r\n* `RETURN`: The description of the underlying aggregator.\r\n\r\n### getRoundData\r\n\r\nGet data about a specific round, using the `roundId`.\r\n\r\n```solidity\r\nfunction getRoundData(address base, address quote, uint80 _roundId) external view\r\n    returns (\r\n        uint80 roundId,\r\n        int256 answer,\r\n        uint256 startedAt,\r\n        uint256 updatedAt,\r\n        uint80 answeredInRound\r\n    )\r\n```\r\n\r\n#### Parameters\r\n\r\n* `base`: The base asset address.\r\n* `quote`: The quote asset address.\r\n* `roundId`: The round ID.\r\n\r\n#### Return Values\r\n\r\n* `roundId`: The round ID.\r\n* `answer`: The price.\r\n* `startedAt`: Timestamp of when the round started.\r\n* `updatedAt`: Timestamp of when the round was updated.\r\n* `answeredInRound`: The round ID of the round in which the answer was computed.\r\n\r\n### latestRoundData\r\n\r\nGet the price from the latest round.\r\n\r\n```solidity\r\nfunction latestRoundData(address base, address quote) external view\r\n    returns (\r\n        uint80 roundId,\r\n        int256 answer,\r\n        uint256 startedAt,\r\n        uint256 updatedAt,\r\n        uint80 answeredInRound\r\n    )\r\n```\r\n\r\n#### Return Values\r\n\r\n* `roundId`: The round ID.\r\n* `answer`: The price.\r\n* `startedAt`: Timestamp of when the round started.\r\n* `updatedAt`: Timestamp of when the round was updated.\r\n* `answeredInRound`: The round ID of the round in which the answer was computed.\r\n\r\n### version\r\n\r\nThe version representing the type of aggregator the proxy points to.\r\n\r\n```solidity\r\nfunction version(address base, address quote) external view returns (uint256)\r\n```\r\n\r\n#### Parameters\r\n\r\n* `base`: The base asset address.\r\n* `quote`: The quote asset address.\r\n\r\n#### Return Values\r\n\r\n* `RETURN`: The version number.\r\n\r\n### getFeed\r\n\r\nReturns the primary aggregator address of a base / quote pair. Note that on-chain contracts cannot read from aggregators directly, only through Feed Registry or Proxy contracts.\r\n\r\n```solidity\r\nfunction getFeed(\r\n    address base,\r\n    address quote\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      AggregatorV2V3Interface aggregator\r\n    );\r\n```\r\n\r\n#### Parameters\r\n\r\n* `base`: The base asset address.\r\n* `quote`: The quote asset address.\r\n\r\n#### Return Values\r\n\r\n* `aggregator`: The primary aggregator address.\r\n\r\n### getPhaseFeed\r\n\r\nReturns the underlying aggregator address of a base / quote pair at a specified phase. Note that on-chain contracts cannot read from aggregators directly, only through Feed Registry or Proxy contracts.\r\nPhase ids start at `1`. You can get the current Phase by calling `getCurrentPhaseId()`.\r\n\r\n```solidity\r\nfunction getPhaseFeed(\r\n    address base,\r\n    address quote,\r\n    uint16 phaseId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      AggregatorV2V3Interface aggregator\r\n    );\r\n```\r\n\r\n#### Parameters\r\n\r\n* `base`: The base asset address.\r\n* `quote`: The quote asset address.\r\n* `phaseId`: The phase id.\r\n\r\n#### Return Values\r\n\r\n* `aggregator`: The primary aggregator address at the specified phase.\r\n\r\n### isFeedEnabled\r\n\r\nReturns true if an aggregator is enabled as primary on the feed registry. This is useful to check if you should index events from an aggregator contract, because you want to only index events of primary aggregators.\r\n\r\n```solidity\r\nfunction isFeedEnabled(\r\n    address aggregator\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      bool\r\n    );\r\n```\r\n\r\n#### Parameters\r\n\r\n* `aggregator`: The aggregator address\r\n\r\n#### Return Values\r\n\r\n* `RETURN`: `true` if the supplied aggregator is a primary aggregator for any base / quote pair.\r\n\r\n### getPhase\r\n\r\nReturns the starting and ending aggregator round ids of a base / quote pair.\r\n\r\n```solidity\r\nfunction getPhase(\r\n    address base,\r\n    address quote,\r\n    uint16 phaseId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      Phase memory phase\r\n    );\r\n```\r\n\r\nPhases hold the following information:\r\n\r\n```solidity\r\nstruct Phase {\r\n    uint16 phaseId;\r\n    uint80 startingAggregatorRoundId;\r\n    uint80 endingAggregatorRoundId;\r\n}\r\n```\r\n\r\n#### Parameters\r\n\r\n* `base`: The base asset address.\r\n* `quote`: The quote asset address.\r\n* `phaseId`: The phase id.\r\n\r\n#### Return Values\r\n\r\n* `RETURN`: `Phase` details of a base / quote pair.\r\n\r\n### getRoundFeed\r\n\r\nReturns the underlying aggregator address of a base / quote pair at a specified round. Note that on-chain contracts cannot read from aggregators directly, only through Feed Registry or Proxy contracts.\r\n\r\n```solidity\r\n  function getRoundFeed(\r\n    address base,\r\n    address quote,\r\n    uint80 roundId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      AggregatorV2V3Interface aggregator\r\n    );\r\n```\r\n\r\n#### Parameters\r\n\r\n* `base`: The base asset address.\r\n* `quote`: The quote asset address.\r\n* `roundId`: The round id.\r\n\r\n#### Return Values\r\n\r\n* `aggregator`: The underlying aggregator address of a base / quote pair at the specified round.\r\n\r\n### getPhaseRange\r\n\r\nReturns the starting and ending round ids of a base / quote pair at a specified phase.\r\n\r\nPlease note that this `roundId` is calculated from the phase id and the underlying aggregator's round id. To get the raw aggregator round ids of a phase for indexing purposes, please use `getPhase()`.\r\n\r\n```solidity\r\n  function getPhaseRange(\r\n    address base,\r\n    address quote,\r\n    uint16 phaseId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint80 startingRoundId,\r\n      uint80 endingRoundId\r\n    );\r\n```\r\n\r\n#### Parameters\r\n\r\n* `base`: The base asset address.\r\n* `quote`: The quote asset address.\r\n* `phaseId`: The phase id.\r\n\r\n#### Return Values\r\n\r\n* `startingRoundId`: The starting round id\r\n* `endingRoundId`: The ending round id\r\n\r\n### getPreviousRoundId\r\n\r\nReturns the previous round id of a base / quote pair given a specified round. Note that rounds are non-monotonic across phases.\r\n\r\n```solidity\r\n  function getPreviousRoundId(\r\n    address base,\r\n    address quote,\r\n    uint80 roundId\r\n  ) external\r\n    view\r\n    returns (\r\n      uint80 previousRoundId\r\n    );\r\n```\r\n\r\n#### Parameters\r\n\r\n* `base`: The base asset address.\r\n* `quote`: The quote asset address.\r\n* `roundId`: The round id.\r\n\r\n#### Return Values\r\n\r\n* `previousRoundId`: The previous round id of a base / quote pair.\r\n\r\n### getNextRoundId\r\n\r\nReturns the next round id of a base / quote pair given a specified round. Note that rounds are non-monotonic across phases.\r\n\r\n```solidity\r\n  function getNextRoundId(\r\n    address base,\r\n    address quote,\r\n    uint80 roundId\r\n  ) external\r\n    view\r\n    returns (\r\n      uint80 nextRoundId\r\n    );\r\n```\r\n\r\n#### Parameters\r\n\r\n* `base`: The base asset address.\r\n* `quote`: The quote asset address.\r\n* `roundId`: The round id.\r\n\r\n#### Return Values\r\n\r\n* `nextRoundId`: The next round id of a base / quote pair.\r\n\r\n### getCurrentPhaseId\r\n\r\nReturns the current phase id of a base / quote pair.\r\n\r\n```solidity\r\nfunction getCurrentPhaseId(\r\n  address base,\r\n  address quote\r\n)\r\n  external\r\n  view\r\n  returns (\r\n    uint16 currentPhaseId\r\n  );\r\n```\r\n\r\n#### Parameters\r\n\r\n* `base`: The base asset address.\r\n* `quote`: The quote asset address.\r\n\r\n#### Return Values\r\n\r\n* `phaseId`: The current phase id of a base / quote pair.\r\n"
    },
    {
      "title": "L2 Sequencer Uptime Feeds",
      "headings": [
        {
          "depth": 2,
          "slug": "available-networks",
          "text": "Available networks"
        },
        {
          "depth": 3,
          "slug": "arbitrum",
          "text": "Arbitrum"
        },
        {
          "depth": 3,
          "slug": "handling-arbitrum-outages",
          "text": "Handling Arbitrum outages"
        },
        {
          "depth": 2,
          "slug": "optimism-and-metis",
          "text": "Optimism and Metis"
        },
        {
          "depth": 3,
          "slug": "handling-outages-on-optimism-and-metis",
          "text": "Handling outages on Optimism and Metis"
        },
        {
          "depth": 2,
          "slug": "example-code",
          "text": "Example code"
        }
      ],
      "url": "/data-feeds/l2-sequencer-feeds",
      "section": "ethereum",
      "content": "\nOptimistic rollup protocols move all execution off the layer 1 (L1) Ethereum chain, complete execution on a layer 2 (L2) chain, and return the results of the L2 execution back to the L1. These protocols have a [sequencer](https://community.optimism.io/docs/how-optimism-works/#block-production) that executes and rolls up the L2 transactions by batching multiple transactions into a single transaction.\n\nIf a sequencer becomes unavailable, it is impossible to access read/write APIs that consumers are using and applications on the L2 network will be down for most users without interacting directly through the L1 optimistic rollup contracts. The L2 has not stopped, but it would be unfair to continue providing service on your applications when only a few users can use them.\n\nTo help your applications identify when the sequencer is unavailable, you can use a data feed that tracks the last known status of the sequencer at a given point in time. This helps you prevent mass liquidations by providing a grace period to allow customers to react to such an event.\n\n## Available networks\n\nYou can find proxy addresses for the L2 sequencer feeds at the following addresses:\n\n- Arbitrum:\n  - Arbitrum mainnet: [0xFdB631F5EE196F0ed6FAa767959853A9F217697D](https://arbiscan.io/address/0xfdb631f5ee196f0ed6faa767959853a9f217697d)\n  - Arbitrum Goerli testnet: [0x4da69F028a5790fCCAfe81a75C0D24f46ceCDd69](https://goerli-rollup-explorer.arbitrum.io/address/0x4da69F028a5790fCCAfe81a75C0D24f46ceCDd69)\n- Optimism:\n  - Optimism mainnet: [0x371EAD81c9102C9BF4874A9075FFFf170F2Ee389](https://optimistic.etherscan.io/address/0x371EAD81c9102C9BF4874A9075FFFf170F2Ee389)\n  - Optimism Goerli testnet: [0x4C4814aa04433e0FB31310379a4D6946D5e1D353](https://goerli-optimism.etherscan.io/address/0x4C4814aa04433e0FB31310379a4D6946D5e1D353)\n- Metis:\n  - Andromeda mainnet: [0x58218ea7422255EBE94e56b504035a784b7AA204](https://andromeda-explorer.metis.io/address/0x58218ea7422255EBE94e56b504035a784b7AA204)\n\n### Arbitrum\n\nThe diagram below shows how these feeds update and how a consumer retrieves the status of the Arbitrum sequencer.\n\n![L2 Sequencer Feed Diagram](/images/data-feed/l2-diagram-arbitrum.webp)\n\n1. Chainlink nodes trigger an OCR round every 30s and update the sequencer status by calling the `validate` function in the [`ArbitrumValidator` contract](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/dev/ArbitrumValidator.sol) by calling it through the [`ValidatorProxy` contract](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/ValidatorProxy.sol).\n1. The `ArbitrumValidator` checks to see if the latest update is different from the previous update. If it detects a difference, it places a message in the [Arbitrum inbox contract](https://developer.offchainlabs.com/docs/inside_arbitrum#the-big-picture).\n1. The inbox contract sends the message to the [`ArbitrumSequencerUptimeFeed` contract](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/dev/ArbitrumSequencerUptimeFeed.sol). The message calls the `updateStatus` function in the `ArbitrumSequencerUptimeFeed` contract and updates the latest sequencer status to 0 if the sequencer is up and 1 if it is down. It also records the block timestamp to indicate when the message was sent from the L1 network.\n1. A consumer contract on the L2 network can read these values from the [`ArbitrumUptimeFeedProxy` contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.6/EACAggregatorProxy.sol), which reads values from the `ArbitrumSequencerUptimeFeed` contract.\n\n### Handling Arbitrum outages\n\nIf the Arbitrum network becomes unavailable, the `ArbitrumValidator` contract continues to send messages to the L2 network through the delayed inbox on L1. This message stays there until the sequencer is back up again. When the sequencer comes back online after downtime, it processes all transactions from the delayed inbox before it accepts new transactions. The message that signals when the sequencer is down will be processed before any new messages with transactions that require the sequencer to be operational.\n\n## Optimism and Metis\n\nOn Optimism and Metis, the sequencer’s status is relayed from L1 to L2 where the consumer can retrieve it.\n\n![L2 Sequencer Feed Diagram](/images/data-feed/l2-diagram-optimism-metis.webp)\n\n**On the L1 network:**\n\n1. A network of node operators runs the external adapter to post the latest sequencer status to the `AggregatorProxy` contract and relays the status to the `Aggregator` contract.  The `Aggregator` contract calls the `validate` function in the `OptimismValidator` contract.  \n\n1. The `OptimismValidator` contract calls the `sendMessage` function in the `L1CrossDomainMessenger` contract. This message contains instructions to call the `updateStatus(bool status, uint64 timestamp)` function in the sequencer uptime feed deployed on the L2 network.\n\n1. The `L1CrossDomainMessenger` contract calls the `enqueue` function to enqueue a new message to the `CanonicalTransactionChain`.\n\n1. The `Sequencer` processes the transaction enqueued in the `CanonicalTransactionChain` contract to send it to the L2 contract.\n\n**On the L2 network:**\n\n1. The `Sequencer` posts the message to the `L2CrossDomainMessenger` contract.\n\n1. The `L2CrossDomainMessenger` contract relays the message to the `OptimismSequencerUptimeFeed` contract.\n\n1. The message relayed by the `L2CrossDomainMessenger` contains instructions to call `updateStatus` in the `OptimismSequencerUptimeFeed` contract.  \n\n1. Consumers can then read from the `AggregatorProxy` contract, which fetches the latest round data from the `OptimismSequencerUptimeFeed` contract.\n\n### Handling outages on Optimism and Metis\n\nIf the sequencer is down, messages cannot be transmitted from L1 to L2 and **no L2 transactions are executed**. Instead, messages are enqueued in the `CanonicalTransactionChain` on L1 and only processed in the order they arrived later when the sequencer comes back up. As long as the message from the validator on L1 is already enqueued in the `CTC`, the flag on the sequencer uptime feed on L2 will be guaranteed to be flipped prior to any subsequent transactions. The transaction that flips the flag on the uptime feed will be executed before transactions that were enqueued after it. This is further explained in the diagrams below.\n\nWhen the Sequencer is down, all L2 transactions sent from the L1 network wait in the pending queue.\n\n1. **Transaction 3** contains Chainlink’s transaction to set the status of the sequencer as being down on L2.\n1. **Transaction 4** is a transaction made by a consumer that is dependent on the sequencer status.\n\n![L2 Sequencer Feed Diagram](/images/data-feed/seq-down-1.webp)\n\nAfter the sequencer comes back up, it moves moves all transactions in the pending queue to the processed queue.\n\n1. Transactions are processed in the order they arrived so **Transaction 3** is processed before **Transaction 4**.\n1. Because **Transaction 3** happens before **Transaction 4**, **Transaction 4** will read the status of the Sequencer as being down and responds accordingly.\n\n![L2 Sequencer Feed Diagram](/images/data-feed/seq-down-2.webp)\n\n## Example code\n\nCreate the consumer contract for sequencer uptime feeds similarly to contracts you use for [Chainlink Data Feeds](/data-feeds/price-feeds/#solidity). Configure the constructor using the following variables:\n\n- Configure the `sequencerUptimeFeed` object with the [sequencer uptime feed proxy address](#available-networks) for your L2 network.\n- Configure the `priceFeed` object with one of the [Data Feed proxy addresses](/data-feeds/price-feeds/addresses/) that are available for your network.\n\n\n::solidity-remix[samples/PriceFeeds/PriceConsumerWithSequencerCheck.sol]\n\nThe `sequencerUptimeFeed` object returns the following values:\n\n- `answer`: A variable with a value of either `1` or `0`\n  - 0: The sequencer is up\n  - 1: The sequencer is down\n- `startedAt`: This timestamp indicates when the sequencer changed status. This timestamp returns `0` if a round is invalid. When the sequencer comes back up after an outage, wait for the `GRACE_PERIOD_TIME` to pass before accepting answers from the price data feed. Subtract `startedAt` from `block.timestamp` and revert the request if the result is less than the `GRACE_PERIOD_TIME`.\n\nIf the sequencer is up and the `GRACE_PERIOD_TIME` has passed, the function retrieves the latest price from the data feed using the `priceFeed` object.\n"
    },
    {
      "title": "NFT Floor Pricing Feed Addresses",
      "headings": [],
      "url": "/data-feeds/nft-floor-price/addresses",
      "section": "ethereum",
      "description": "NFT Floor Pricing Feed Addresses",
      "content": "\r\n<FeedPage dataFeedType=\"nftFloor\" />\r\n"
    },
    {
      "title": "NFT Floor Pricing Feeds",
      "headings": [
        {
          "depth": 2,
          "slug": "using-nft-floor-pricing-feeds",
          "text": "Using NFT Floor Pricing Feeds"
        }
      ],
      "url": "/data-feeds/nft-floor-price",
      "section": "ethereum",
      "content": "\r\nChainlink NFT Floor Pricing Feeds provide the lowest price of an NFT in a collection. These feeds operate the same way as other Chainlink Data Feeds. NFT Floor Pricing Feeds are supported by [Coinbase Cloud’s](https://www.coinbase.com/cloud/) aggregation algorithm and Chainlink’s oracle infrastructure to help eliminate extreme price outliers and make these feeds resistant to market manipulation. You can use NFT Floor Pricing Feeds for use cases that rely on high-quality NFT data, including lending and borrowing, on-chain derivatives, dynamic NFTs, gaming guilds, CeFi products, prediction markets, and more.\r\n\r\nFind the list of testnet feeds on the [Contract Addresses](/data-feeds/nft-floor-price/addresses/) page. To sign up for access to NFT Floor Pricing feeds on Ethereum Mainnet, [use this TypeForm](https://chainlinkcommunity.typeform.com/nft-price-feeds).\r\n\r\n## Using NFT Floor Pricing Feeds\r\n\r\nRead answers from NFT Floor Pricing Feeds the same way that you use [Price Feeds](/data-feeds/price-feeds/).\r\n\r\nUsing Solidity, your smart contract should reference [`AggregatorV3Interface`](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol), which defines the external functions implemented by Data Feeds.\r\n\r\n::solidity-remix[samples/PriceFeeds/NFTFloorPriceConsumerV3.sol]\r\n"
    },
    {
      "title": "Price Feed Contract Addresses",
      "headings": [],
      "url": "/data-feeds/price-feeds/addresses",
      "section": "ethereum",
      "description": "A list of Price Feed addresses on supported networks.",
      "content": "\r\n<FeedPage  />\r\n"
    },
    {
      "title": "Data Feeds API Reference",
      "headings": [
        {
          "depth": 2,
          "slug": "aggregatorv3interface",
          "text": "AggregatorV3Interface"
        },
        {
          "depth": 3,
          "slug": "functions-in-aggregatorv3interface",
          "text": "Functions in AggregatorV3Interface"
        },
        {
          "depth": 4,
          "slug": "decimals",
          "text": "decimals"
        },
        {
          "depth": 4,
          "slug": "description",
          "text": "description"
        },
        {
          "depth": 4,
          "slug": "getrounddata",
          "text": "getRoundData"
        },
        {
          "depth": 4,
          "slug": "latestrounddata",
          "text": "latestRoundData"
        },
        {
          "depth": 4,
          "slug": "version",
          "text": "version"
        },
        {
          "depth": 2,
          "slug": "accesscontrolledoffchainaggregator",
          "text": "AccessControlledOffchainAggregator"
        },
        {
          "depth": 3,
          "slug": "variables-and-functions-in-accesscontrolledoffchainaggregator",
          "text": "Variables and functions in AccessControlledOffchainAggregator"
        },
        {
          "depth": 4,
          "slug": "decimals-1",
          "text": "decimals"
        },
        {
          "depth": 4,
          "slug": "description-1",
          "text": "description"
        },
        {
          "depth": 4,
          "slug": "getanswer",
          "text": "getAnswer"
        },
        {
          "depth": 4,
          "slug": "getbilling",
          "text": "getBilling"
        },
        {
          "depth": 4,
          "slug": "getrounddata-1",
          "text": "getRoundData"
        },
        {
          "depth": 4,
          "slug": "gettimestamp",
          "text": "getTimestamp"
        },
        {
          "depth": 4,
          "slug": "hasaccess",
          "text": "hasAccess"
        },
        {
          "depth": 4,
          "slug": "latestanswer",
          "text": "latestAnswer"
        },
        {
          "depth": 4,
          "slug": "latestconfigdetails",
          "text": "latestConfigDetails"
        },
        {
          "depth": 4,
          "slug": "latestround",
          "text": "latestRound"
        },
        {
          "depth": 4,
          "slug": "latestrounddata-1",
          "text": "latestRoundData"
        },
        {
          "depth": 4,
          "slug": "latesttimestamp",
          "text": "latestTimestamp"
        },
        {
          "depth": 4,
          "slug": "latesttransmissiondetails",
          "text": "latestTransmissionDetails"
        },
        {
          "depth": 4,
          "slug": "linkavailableforpayment",
          "text": "linkAvailableForPayment"
        },
        {
          "depth": 4,
          "slug": "oracleobservationcount",
          "text": "oracleObservationCount"
        },
        {
          "depth": 4,
          "slug": "owedpayment",
          "text": "owedPayment"
        },
        {
          "depth": 4,
          "slug": "requesteraccesscontroller",
          "text": "requesterAccessController"
        },
        {
          "depth": 4,
          "slug": "transmitters",
          "text": "transmitters"
        },
        {
          "depth": 4,
          "slug": "typeandversion",
          "text": "typeAndVersion"
        },
        {
          "depth": 4,
          "slug": "validatorconfig",
          "text": "validatorConfig"
        },
        {
          "depth": 4,
          "slug": "version-1",
          "text": "version"
        }
      ],
      "url": "/data-feeds/price-feeds/api-reference",
      "section": "ethereum",
      "description": "API reference for using Chainlink Data Feeds in smart contracts.",
      "content": "\r\nWhen you use data feeds, retrieve the feeds through the `AggregatorV3Interface` and the proxy address. Optionally, you can call variables and functions in the `AccessControlledOffchainAggregator` contract to get information about the aggregator behind the proxy.\r\n\r\n## AggregatorV3Interface\r\n\r\nImport this interface to your contract and use it to run functions in the proxy contract. Create the interface object by pointing to the proxy address. For example, on Goerli you could create the interface object in the constructor of your contract using the following example:\r\n\r\n```solidity Solidity\r\n/**\r\n * Network: Goerli\r\n * Data Feed: BTC/USD\r\n * Address: 0xA39434A63A52E749F02807ae27335515BA4b07F7\r\n */\r\nconstructor() {\r\n    priceFeed = AggregatorV3Interface(0xA39434A63A52E749F02807ae27335515BA4b07F7);\r\n}\r\n```\r\n\r\nTo see examples for how to use this interface, read the [Using Data Feeds](/data-feeds/price-feeds/) guide.\r\n\r\nYou can see the code for the [`AggregatorV3Interface` contract](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol) on GitHub.\r\n\r\n### Functions in AggregatorV3Interface\r\n\r\n|Name|Description|\r\n|---|---|\r\n|[decimals](#decimals)|The number of decimals in the response.|\r\n|[description](#description)|The description of the aggregator that the proxy points to.|\r\n|[getRoundData](#getrounddata)|Get data from a specific round.|\r\n|[latestRoundData](#latestrounddata)|Get data from the latest round.|\r\n|[version](#version)|The version representing the type of aggregator the proxy points to.|\r\n\r\n#### decimals\r\n\r\nGet the number of decimals present in the response value.\r\n\r\n```solidity Solidity\r\nfunction decimals() external view returns (uint8);\r\n```\r\n\r\n* `RETURN`: The number of decimals.\r\n\r\n#### description\r\n\r\nGet the description of the underlying aggregator that the proxy points to.\r\n\r\n```solidity Solidity\r\nfunction description() external view returns (string memory);\r\n```\r\n\r\n* `RETURN`: The description of the underlying aggregator.\r\n\r\n#### getRoundData\r\n\r\nGet data about a specific round, using the `roundId`.\r\n\r\n```solidity Solidity\r\nfunction getRoundData(uint80 _roundId)\r\n  external\r\n  view\r\n  returns (\r\n    uint80 roundId,\r\n    int256 answer,\r\n    uint256 startedAt,\r\n    uint256 updatedAt,\r\n    uint80 answeredInRound\r\n  );\r\n```\r\n\r\n**Parameters:**\r\n\r\n* `_roundId`: The round ID\r\n\r\n**Return values:**\r\n\r\n* `roundId`: The round ID\r\n* `answer`: The answer for this round\r\n* `startedAt`: Timestamp of when the round started\r\n* `updatedAt`: Timestamp of when the round was updated\r\n* `answeredInRound`: The round ID in which the answer was computed\r\n\r\n#### latestRoundData\r\n\r\nGet the price from the latest round.\r\n\r\n```solidity Solidity\r\nfunction latestRoundData() external view\r\n    returns (\r\n        uint80 roundId,\r\n        int256 answer,\r\n        uint256 startedAt,\r\n        uint256 updatedAt,\r\n        uint80 answeredInRound\r\n    )\r\n```\r\n\r\n**Return values:**\r\n\r\n* `roundId`: The round ID.\r\n* `answer`: The price.\r\n* `startedAt`: Timestamp of when the round started.\r\n* `updatedAt`: Timestamp of when the round was updated.\r\n* `answeredInRound`: The round ID of the round in which the answer was computed.\r\n\r\n#### version\r\n\r\nThe version representing the type of aggregator the proxy points to.\r\n\r\n```solidity Solidity\r\nfunction version() external view returns (uint256)\r\n```\r\n\r\n* `RETURN`: The version number.\r\n\r\n## AccessControlledOffchainAggregator\r\n\r\nThis is the contract for the aggregator. You can call functions on the aggregator directly, but it is a best practice to use the [AggregatorV3Interface](#aggregatorv3interface) to run functions on the proxy instead so that changes to the aggregator do not affect your application. Read the aggregator contract only if you need functions that are not available in the proxy.\r\n\r\nThe aggregator contract has several variables and functions that might be useful for your application. Although aggregator contracts are similar for each data feed, some aggregators have different variables. Use the `typeAndVersion()` function on the aggregator to identify what type of aggregator it is and what version it is running.\r\n\r\nAlways check the contract source code and configuration to understand how specific data feeds operate. For example, the [aggregator contract for BTC/USD on Arbitrum](https://arbiscan.io/address/0x942d00008d658dbb40745bbec89a93c253f9b882#code) is different from the aggregators on other networks.\r\n\r\nFor examples of the contracts that are typically used in aggregator deployments, see the [libocr repository](https://github.com/smartcontractkit/libocr/blob/master/contract/) on GitHub.\r\n\r\n### Variables and functions in AccessControlledOffchainAggregator\r\n\r\nThis contract imports `OffchainAggregator` and `SimpleReadAccessController`, which also include their own imports. The variables and functions lists include the publicly accessible items from these imported contracts.\r\n\r\nA simple way to read the variables or functions is to get the ABI from a blockchain explorer and point the ABI to the aggregator address. To do this in Remix, follow the [Using the ABI with AtAddress](https://remix-ide.readthedocs.io/en/latest/run.html#using-the-abi-with-ataddress) guide in the Remix documentation. As an example, you can find the ABI for the BTC/USD aggregator by viewing the [contract code in Etherscan](https://etherscan.io/address/0xae74faa92cb67a95ebcab07358bc222e33a34da7#code).\r\n\r\n**Variables:**\r\n\r\n|Name|Description|\r\n|---|---|\r\n|LINK|The address for the LINK token contract on a specific network.|\r\n|billingAccessController|The address for the billingAccessController, which limits access to the [billing configuration](https://github.com/smartcontractkit/libocr/blob/master/contract/OffchainAggregatorBilling.sol) for the aggregator.|\r\n|checkEnabled|A boolean that indicates if access is limited to addresses on the internal access list.|\r\n|maxAnswer|The highest median answer that the aggregator will accept. This prevents the aggregator from accepting extreme erroneous values.|\r\n|minAnswer|The lowest median answer that the aggregator will accept. This prevents the aggregator from accepting extreme erroneous values.|\r\n|owner|The address that owns this aggregator contract. This controls which address can execute specific functions.|\r\n\r\n**Functions:**\r\n\r\n|Name|Description|\r\n|---|---|\r\n|[decimals](#decimals-1)|Return the number of digits of precision for the stored answer. Answers are stored in fixed-point format.|\r\n|[description](#description-1)|Return a description for this data feed. Usually this is an asset pair for a price feed.|\r\n|[getAnswer](#getanswer)| (Deprecated) |\r\n|[getBilling](#getbilling)|Retrieve the current billing configuration.|\r\n|[getRoundData](#getrounddata-1)|Get the full information for a specific aggregator round including the answer and update timestamps. Use this to get the full historical data for a round.|\r\n|[getTimestamp](#gettimestamp)| (Deprecated) |\r\n|[hasAccess](#hasaccess)|Check if an address has internal access.|\r\n|[latestAnswer](#latestanswer)| (Deprecated) |\r\n|[latestConfigDetails](#latestconfigdetails)|Return information about the current off-chain reporting protocol configuration.|\r\n|[latestRound](#latestround)| (Deprecated) |\r\n|[latestRoundData](#latestrounddata-1)|Get the full information for the most recent round including the answer and update timestamps.|\r\n|[latestTimestamp](#latesttimestamp)| (Deprecated) |\r\n|[latestTransmissionDetails](#latesttransmissiondetails)|Get information about the most recent answer.|\r\n|[linkAvailableForPayment](#linkavailableforpayment)|Get the amount of LINK on this contract that is available to make payments to oracles. This value can be negative if there are outstanding payment obligations.|\r\n|[oracleObservationCount](#oracleobservationcount)|Returns the number of observations that oracle is due to be reimbursed for.|\r\n|[owedPayment](#owedpayment)|Returns how much LINK an oracle is owed for its observations.|\r\n|[requesterAccessController](#requesteraccesscontroller)|Returns the address for the access controller contract.|\r\n|[transmitters](#transmitters)|The oracle addresses that can report answers to this aggregator.|\r\n|[typeAndVersion](#typeandversion)|Returns the aggregator type and version. Many aggregators are `AccessControlledOffchainAggregator 3.0.0`, but there are other variants in production. The version is for the type of aggregator, and different from the contract `version`.|\r\n|[validatorConfig](#validatorconfig)|Returns the address and the gas limit for the validator contract.|\r\n|[version](#version-1)|Returns the contract version. This is different from the `typeAndVersion` for the aggregator.|\r\n\r\n#### decimals\r\n\r\nReturn the number of digits of precision for the stored answer. Answers are stored in fixed-point format.\r\n\r\n```solidity Solidity\r\nfunction decimals() external view returns (uint8 decimalPlaces);\r\n```\r\n\r\n#### description\r\n\r\nReturn a description for this data feed. Usually this is an asset pair for a price feed.\r\n\r\n```solidity Solidity\r\nfunction description()\r\n  public\r\n  override\r\n  view\r\n  checkAccess()\r\n  returns (string memory)\r\n{\r\n  return super.description();\r\n}\r\n```\r\n\r\n#### getAnswer\r\n\r\n:::caution[ This function is deprecated.]\r\n\r\n:::\r\n\r\n#### getBilling\r\n\r\nRetrieve the current billing configuration.\r\n\r\n```solidity Solidity\r\nfunction getBilling()\r\n  external\r\n  view\r\n  returns (\r\n    uint32 maximumGasPrice,\r\n    uint32 reasonableGasPrice,\r\n    uint32 microLinkPerEth,\r\n    uint32 linkGweiPerObservation,\r\n    uint32 linkGweiPerTransmission\r\n  )\r\n{\r\n  Billing memory billing = s_billing;\r\n  return (\r\n    billing.maximumGasPrice,\r\n    billing.reasonableGasPrice,\r\n    billing.microLinkPerEth,\r\n    billing.linkGweiPerObservation,\r\n    billing.linkGweiPerTransmission\r\n  );\r\n}\r\n```\r\n\r\n#### getRoundData\r\n\r\nGet the full information for a specific aggregator round including the answer and update timestamps. Use this to get the full historical data for a round.\r\n\r\n```solidity Solidity\r\nfunction getRoundData(uint80 _roundId)\r\n  public\r\n  override\r\n  view\r\n  checkAccess()\r\n  returns (\r\n    uint80 roundId,\r\n    int256 answer,\r\n    uint256 startedAt,\r\n    uint256 updatedAt,\r\n    uint80 answeredInRound\r\n  )\r\n{\r\n  return super.getRoundData(_roundId);\r\n}\r\n```\r\n\r\n#### getTimestamp\r\n\r\n:::caution[ This function is deprecated.]\r\n\r\n:::\r\n\r\n#### hasAccess\r\n\r\nCheck if an address has internal access.\r\n\r\n```solidity Solidity\r\nfunction hasAccess(\r\n  address _user,\r\n  bytes memory _calldata\r\n)\r\n  public\r\n  view\r\n  virtual\r\n  override\r\n  returns (bool)\r\n{\r\n  return super.hasAccess(_user, _calldata) || _user == tx.origin;\r\n}\r\n```\r\n\r\n#### latestAnswer\r\n\r\n:::caution[ This function is deprecated.]\r\n\r\n:::\r\n\r\n#### latestConfigDetails\r\n\r\nReturn information about the current off-chain reporting protocol configuration.\r\n\r\n```solidity Solidity\r\nfunction latestConfigDetails()\r\n  external\r\n  view\r\n  returns (\r\n    uint32 configCount,\r\n    uint32 blockNumber,\r\n    bytes16 configDigest\r\n  )\r\n{\r\n  return (s_configCount, s_latestConfigBlockNumber, s_hotVars.latestConfigDigest);\r\n}\r\n```\r\n\r\n#### latestRound\r\n\r\n:::caution[ This function is deprecated.]\r\n\r\n:::\r\n\r\n#### latestRoundData\r\n\r\nGet the full information for the most recent round including the answer and update timestamps.\r\n\r\n```solidity Solidity\r\nfunction latestRoundData()\r\n  public\r\n  override\r\n  view\r\n  checkAccess()\r\n  returns (\r\n    uint80 roundId,\r\n    int256 answer,\r\n    uint256 startedAt,\r\n    uint256 updatedAt,\r\n    uint80 answeredInRound\r\n  )\r\n{\r\n  return super.latestRoundData();\r\n}\r\n```\r\n\r\n#### latestTimestamp\r\n\r\n:::caution[ This function is deprecated.]\r\n\r\n:::\r\n\r\n#### latestTransmissionDetails\r\n\r\nGet information about the most recent answer.\r\n\r\n```solidity Solidity\r\nfunction latestTransmissionDetails()\r\n  external\r\n  view\r\n  returns (\r\n    bytes16 configDigest,\r\n    uint32 epoch,\r\n    uint8 round,\r\n    int192 latestAnswer,\r\n    uint64 latestTimestamp\r\n  )\r\n{\r\n  require(msg.sender == tx.origin, \"Only callable by EOA\");\r\n  return (\r\n    s_hotVars.latestConfigDigest,\r\n    uint32(s_hotVars.latestEpochAndRound >> 8),\r\n    uint8(s_hotVars.latestEpochAndRound),\r\n    s_transmissions[s_hotVars.latestAggregatorRoundId].answer,\r\n    s_transmissions[s_hotVars.latestAggregatorRoundId].timestamp\r\n  );\r\n}\r\n```\r\n\r\n#### linkAvailableForPayment\r\n\r\nGet the amount of LINK on this contract that is available to make payments to oracles. This value can be negative if there are outstanding payment obligations.\r\n\r\n```solidity Solidity\r\nfunction linkAvailableForPayment()\r\n  external\r\n  view\r\n  returns (int256 availableBalance)\r\n{\r\n  // there are at most one billion LINK, so this cast is safe\r\n  int256 balance = int256(LINK.balanceOf(address(this)));\r\n  // according to the argument in the definition of totalLINKDue,\r\n  // totalLINKDue is never greater than 2**172, so this cast is safe\r\n  int256 due = int256(totalLINKDue());\r\n  // safe from overflow according to above sizes\r\n  return int256(balance) - int256(due);\r\n}\r\n```\r\n\r\n#### oracleObservationCount\r\n\r\nReturns the number of observations that oracle is due to be reimbursed for.\r\n\r\n```solidity Solidity\r\nfunction oracleObservationCount(address _signerOrTransmitter)\r\n  external\r\n  view\r\n  returns (uint16)\r\n{\r\n  Oracle memory oracle = s_oracles[_signerOrTransmitter];\r\n  if (oracle.role == Role.Unset) { return 0; }\r\n  return s_oracleObservationsCounts[oracle.index] - 1;\r\n}\r\n```\r\n\r\n#### owedPayment\r\n\r\nReturns how much LINK an oracle is owed for its observations.\r\n\r\n```solidity Solidity\r\nfunction owedPayment(address _transmitter)\r\n  public\r\n  view\r\n  returns (uint256)\r\n{\r\n  Oracle memory oracle = s_oracles[_transmitter];\r\n  if (oracle.role == Role.Unset) { return 0; }\r\n  Billing memory billing = s_billing;\r\n  uint256 linkWeiAmount =\r\n    uint256(s_oracleObservationsCounts[oracle.index] - 1) *\r\n    uint256(billing.linkGweiPerObservation) *\r\n    (1 gwei);\r\n  linkWeiAmount += s_gasReimbursementsLinkWei[oracle.index] - 1;\r\n  return linkWeiAmount;\r\n}\r\n```\r\n\r\n#### requesterAccessController\r\n\r\nReturns the address for the access controller contract.\r\n\r\n```solidity Solidity\r\nfunction requesterAccessController()\r\n  external\r\n  view\r\n  returns (AccessControllerInterface)\r\n{\r\n  return s_requesterAccessController;\r\n}\r\n```\r\n\r\n#### transmitters\r\n\r\nThe oracle addresses that can report answers to this aggregator.\r\n\r\n```solidity Solidity\r\nfunction transmitters()\r\n  external\r\n  view\r\n  returns(address[] memory)\r\n{\r\n    return s_transmitters;\r\n}\r\n```\r\n\r\n#### typeAndVersion\r\n\r\nReturns the aggregator type and version. Many aggregators are `AccessControlledOffchainAggregator 2.0.0`, but there are other variants in production. The version is for the type of aggregator, and different from the contract `version`.\r\n\r\n```solidity Solidity\r\nfunction typeAndVersion()\r\n  external\r\n  override\r\n  pure\r\n  virtual\r\n  returns (string memory)\r\n{\r\n  return \"AccessControlledOffchainAggregator 2.0.0\";\r\n}\r\n```\r\n\r\n#### validatorConfig\r\n\r\nReturns the address and the gas limit for the validator contract.\r\n\r\n```solidity Solidity\r\nfunction validatorConfig()\r\n  external\r\n  view\r\n  returns (AggregatorValidatorInterface validator, uint32 gasLimit)\r\n{\r\n  ValidatorConfig memory vc = s_validatorConfig;\r\n  return (vc.validator, vc.gasLimit);\r\n}\r\n```\r\n\r\n#### version\r\n\r\nReturns the contract version. This is different from the `typeAndVersion` for the aggregator.\r\n\r\n```solidity Solidity\r\nfunction version() external view returns (uint256);\r\n```\r\n"
    },
    {
      "title": "Proof of Reserve Feed Addresses",
      "headings": [],
      "url": "/data-feeds/proof-of-reserve/addresses",
      "section": "ethereum",
      "description": "Chainlink Proof of Reserve Feed Addresses",
      "content": "\r\n<FeedPage dataFeedType=\"por\" />\r\n"
    },
    {
      "title": "Proof of Reserve Feeds",
      "headings": [
        {
          "depth": 2,
          "slug": "types-of-proof-of-reserve-feeds",
          "text": "Types of Proof of Reserve Feeds"
        },
        {
          "depth": 3,
          "slug": "cross-chain-reserves",
          "text": "Cross-chain reserves"
        },
        {
          "depth": 3,
          "slug": "off-chain-reserves",
          "text": "Off-chain reserves"
        },
        {
          "depth": 2,
          "slug": "using-proof-of-reserve-feeds",
          "text": "Using Proof of Reserve Feeds"
        }
      ],
      "url": "/data-feeds/proof-of-reserve",
      "section": "ethereum",
      "content": "\r\nChainlink Proof of Reserve Feeds provide the status of the reserves for several assets. You can consume these feeds the same way as [Price Feeds](/data-feeds/price-feeds/).\r\n\r\nTo find a list of available Proof of Reserve Feeds, see the [Contract Addresses](/data-feeds/proof-of-reserve/addresses/) page.\r\n\r\n## Types of Proof of Reserve Feeds\r\n\r\nReserves are available for both cross-chain assets and off-chain assets. Token issuers prove the reserves for their assets through several different methods: \r\n\r\n- [Cross-chain reserves](#cross-chain-reserves):\r\n  - Wallet address manager\r\n  - Self-attested wallet API\r\n- [Off-chain reserves](#off-chain-reserves):\r\n  - Third-party API\r\n  - Custodian API\r\n  - Self-attested API\r\n\r\n### Cross-chain reserves\r\n\r\nCross-Chain reserves are sourced from the network where the reserves are held. This includes but is not limited to networks including Bitcoin, Filecoin, Cardano, and chains where Chainlink has a native integration. Chainlink Node operators can report cross-chain reserves by running an [external adapter](/chainlink-nodes/external-adapters/external-adapters) and querying the source-chain client directly. In some instances, the reserves are composed of a dynamic list of IDs or addresses using a composite adapter.\r\n\r\n![Cross-chain reserves diagram](/images/data-feed/cross-chain-reserves.webp)\r\n\r\nCross-chain reserves provide their data using the following methods:\r\n\r\n- Wallet address manager: The project uses the [IPoRAddressList](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/PoRAddressList.sol) wallet address manager contract and self-attests to which addresses they own.\r\n- Self-attested wallet API: The project attests which addresses they own through a self-hosted API.\r\n\r\n### Off-chain reserves\r\n\r\nOff-Chain reserves are sourced from APIs through an [external adapter](/chainlink-nodes/external-adapters/external-adapters).\r\n\r\n![Off-chain reserves diagram](/images/data-feed/off-chain-reserves.webp)\r\n\r\nOff-chain reserves provide their data using the following methods:\r\n\r\n- Third-party API: An auditor or a third-party verifies the reserves and provides that data through an API.\r\n- Custodian API: Reserve status is read directly from a bank or custodian API.\r\n- Self-attested API: Reserve status is read from an API that the token issuer hosts.\r\n\r\n## Using Proof of Reserve Feeds\r\n\r\nRead answers from Proof of Reserve Feeds the same way that you use [Price Feeds](/data-feeds/price-feeds/).\r\n\r\nUsing Solidity, your smart contract should reference [`AggregatorV3Interface`](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol), which defines the external functions implemented by Data Feeds.\r\n\r\n\r\n::solidity-remix[samples/PriceFeeds/ReserveConsumerV3.sol]\r\n"
    },
    {
      "title": "Selecting Quality Data Feeds",
      "headings": [
        {
          "depth": 2,
          "slug": "data-feed-categories",
          "text": "Data Feed Categories"
        },
        {
          "depth": 3,
          "slug": "-verified-feeds",
          "text": "🟢 Verified Feeds"
        },
        {
          "depth": 3,
          "slug": "-monitored-feeds",
          "text": "🟡 Monitored Feeds"
        },
        {
          "depth": 3,
          "slug": "-custom-feeds",
          "text": "🔵 Custom Feeds"
        },
        {
          "depth": 3,
          "slug": "-specialized-feeds",
          "text": "⚫ Specialized Feeds"
        },
        {
          "depth": 3,
          "slug": "-deprecating",
          "text": "⭕ Deprecating"
        },
        {
          "depth": 2,
          "slug": "risk-mitigation",
          "text": "Risk Mitigation"
        },
        {
          "depth": 2,
          "slug": "chainlink-community-deployments",
          "text": "Chainlink Community Deployments"
        },
        {
          "depth": 2,
          "slug": "evaluating-data-sources-and-risks",
          "text": "Evaluating Data Sources and Risks"
        },
        {
          "depth": 3,
          "slug": "liquidity-and-its-distribution",
          "text": "Liquidity and its Distribution"
        },
        {
          "depth": 3,
          "slug": "single-source-data-providers",
          "text": "Single Source Data Providers"
        },
        {
          "depth": 3,
          "slug": "crypto-and-blockchain-actions",
          "text": "Crypto and Blockchain Actions"
        },
        {
          "depth": 3,
          "slug": "market-failures-resulting-from-extreme-events",
          "text": "Market Failures Resulting from Extreme Events"
        },
        {
          "depth": 3,
          "slug": "periods-of-high-network-congestion",
          "text": "Periods of High Network Congestion"
        },
        {
          "depth": 3,
          "slug": "unknown-and-known-users",
          "text": "Unknown and Known Users"
        },
        {
          "depth": 3,
          "slug": "extreme-events-causing-price-deviations-in-wrapped-or-bridged-assets",
          "text": "Extreme Events Causing Price Deviations in Wrapped or Bridged Assets"
        },
        {
          "depth": 3,
          "slug": "front-running-risk",
          "text": "Front Running Risk"
        },
        {
          "depth": 3,
          "slug": "fast-gas-reliability",
          "text": "Fast Gas Reliability"
        }
      ],
      "url": "/data-feeds/selecting-data-feeds",
      "section": "ethereum",
      "content": "\r\nWhen you design your applications, consider the quality of the data that you use in your smart contracts. Ultimately you are responsible for identifying and assessing the accuracy, availability, and quality of data that you choose to consume via the Chainlink Network. Note that all feeds contain some inherent risk. Read the [Risk Mitigation](#risk-mitigation) and [Evaluating Data Sources](#evaluating-data-sources-and-risks) sections when making design decisions. Chainlink lists decentralized data feeds in the documentation to help developers build new applications integrated with data.\r\n\r\n## Data Feed Categories\r\n\r\nThis categorization is put in place to inform users about the intended use cases of feeds and help to highlight some of the inherent market risks surrounding the data quality of these feeds.\r\n\r\nAll feeds published on [docs.chain.link](http://docs.chain.link) are monitored and maintained to the same levels and standards. Each feed goes through a rigorous assessment process when implemented. The assessment criteria can change depending on the product type of feed being deployed.\r\n\r\nFeeds do though evolve over time and we regularly monitor their market fundamentals and will proactively communicate any upcoming changes or issues we identify with a feed, these categories are designed to act as a mechanism in order to assist in accomplishing that task.\r\n\r\nData feeds are grouped into the following categories based on the level of risk from lowest to highest:\r\n\r\n+ [🟢 Verified Feeds](#-verified-feeds)\r\n+ [🟡 Monitored Feeds](#-monitored-feeds)\r\n+ [🔵 Custom Feeds](#-custom-feeds)\r\n+ [⚫ Specialized Feeds](#-specialized-feeds)\r\n+ [⭕ Deprecating](#-deprecating)\r\n\r\n:::note[ For important updates regarding the use of Chainlink Price Feeds, users should join the official Chainlink Discord and subscribe to the [data-feeds-user-notifications channel](https://discord.gg/Dqy5N9UbsR).]\r\n\r\n:::\r\n\r\n### 🟢 Verified Feeds\r\n\r\nThese are data feeds that follow a standardized data feeds workflow. Chainlink node operators each query several sources for the market price and aggregate the estimates provided by those sources.\r\n\r\nVerified feeds have the following characteristics:\r\n\r\n- Highly resilient to disruption\r\n- Leverage many data sources\r\n- Use an extensive network of nodes\r\n- Highly liquid and well represented on a large number of markets\r\n\r\nThese feeds incorporate three layers of aggregation (at the data source, node operator, and oracle network layers), providing industry-grade security and reliability on the price data they reference. To learn more about the three layers of data aggregation, see the blog post about [Data Aggregation in Chainlink Price Feeds](https://blog.chain.link/levels-of-data-aggregation-in-chainlink-price-feeds/).\r\n\r\nInherent risks might still exist based on your use case, the blockchain on which the feed is deployed and the conditions on that chain.\r\n\r\n### 🟡 Monitored Feeds\r\n\r\nFeeds under the monitored category are *under review* by the Chainlink Labs team to support the stability of the broader ecosystem. While generally resilient and distributed, these feeds carry additional risk.\r\n\r\nData feeds might be under review for the following reasons:\r\n\r\n- The token project or asset is in early development\r\n- The project is going through a market event such as a token or liquidity migration\r\n- The token or project is being deprecated in the market\r\n- The asset has a high spread between data providers or low liquidity in the market\r\n\r\n### 🔵 Custom Feeds\r\n\r\nCustom Feeds are built to serve a specific use case and might not be suitable for general use or your use case's risk parameters. Users must evaluate the properties of a feed to make sure it aligns with their intended use case. [Contact the Chainlink Labs team](https://chainlinkcommunity.typeform.com/to/OYQO67EF?page=market-data-feeds) if you want more detail on any specific feeds in this category.\r\n\r\nCustom feeds have the following categories and compositions:\r\n\r\n- **On-chain single source feeds:** These feeds take their data from an on-chain source, however the feed has only a single data provider currently supporting the feed.\r\n- **On-chain Proof of Reserve Feeds:** Chainlink Proof of Reserve uses the largest decentralized collection of security-reviewed and Sybil-resistant node operators in the industry to acquire and verify reserve data. In this use case, reserves reside on-chain.\r\n- **Technical Feeds:** Feeds within this category measure a particular technical metric from a specified blockchain. For example, Fast Gas or Block Difficulty.\r\n- **Total Value Locked Feeds:** These feeds measure the total value locked in a particular protocol.\r\n- **Custom Index Feeds:** An index calculates a function of the values for multiple underlying assets. The function is specific to that index and is typically calculated by node operators following an agreed formula.\r\n\r\nIf you plan on using one of these feeds and would like to get a more detailed understanding, [contact the Chainlink Labs team](https://chainlinkcommunity.typeform.com/to/OYQO67EF?page=market-data-feeds).\r\n\r\n### ⚫ Specialized Feeds\r\n\r\nThese are purpose-built feeds that might rely heavily on contracts maintained by external entities. Typical users of these feeds are large institutional users with deep expertise in the market space they operate in.\r\n\r\nThese feeds are monitored and well-supported, but they might not meet the same levels of resiliency as the above categories. We strongly advise you to [speak with the Chainlink Labs team](https://chainlinkcommunity.typeform.com/to/OYQO67EF?page=market-data-feeds) to understand their use cases, properties, and associated risks.\r\n\r\n**Examples of Specialized feeds:**\r\n\r\n- **Off-chain Single Source Feeds:** Some data providers use a single data source, which might be necessary if only one source exists off-chain for a specific type of data.\r\n- **Off-chain Proof of Reserve Feeds:** Chainlink Proof of Reserve uses the largest decentralized collection of security-reviewed and Sybil-resistant node operators in the industry to acquire and verify reserve data. In this use case, reserves reside off-chain.\r\n- **LP Token Feeds:** These feeds use a decentralized feed for the underlying asset as well as calculations to value the LP tokens.\r\n- **Wrapped Calculated Feeds:** These feeds are typically pegged 1:1 to the underlying token or asset. Under normal market conditions, these feeds track their underlying value accurately. However, the price is a derivative formed from a calculated method and might not always track value precisely.\r\n\r\nIf you plan on using one of these feeds and would like to get a more detailed understanding, [contact the Chainlink Labs team](https://chainlinkcommunity.typeform.com/to/OYQO67EF?page=market-data-feeds).\r\n\r\n### ⭕ Deprecating\r\n\r\nThese feeds are being deprecated. To find the deprecation dates for specific feeds, see the [Feeds Scheduled For Deprecation](/data-feeds/deprecating-feeds/) page.\r\n\r\n## Risk Mitigation\r\n\r\nAs a development best practice, design your systems and smart contracts to be resilient and mitigate risk to your protocol and your users. Ensure that your systems can tolerate known and unknown exceptions that might occur. Some examples include but are not limited to volatile market conditions, the degraded performance of infrastructure, chains, or networks, and any other upstream outage related to data providers or node operators. You bear responsibility for any manner in which you use the Chainlink Network, its software, and documentation.\r\n\r\nTo help you prepare for unforeseen market events, we recommend taking additional steps for custom or specialized feeds to protect your application or protocol. This might also be worth considering in all categories based on the value that your application secures. This tooling is put in place to mitigate extreme market events, possible malicious activity on third-party venues or contracts, potential delays, performance degradation, and outages.\r\n\r\nBelow are some examples of tooling that Chainlink users have put in place:\r\n\r\n- **Circuit breakers:** In the case of an extreme price event, the contract would pause operations for a limited period of time.\r\n- **Contract update delays:** Contracts would not update until the protocol had received a recent fresh input from the data feed.\r\n- **Manual kill switch:** If a vulnerability or bug is discovered in one of the upstream contracts, the user can manually cease operation and temporarily sever the connection to the data feed.\r\n- **Monitoring:** Some users create their own monitoring alerts based on deviations in the data feeds that they are using.\r\n- **Soak testing:** Users are strongly advised to thoroughly test price feed integrations and incorporate a [soak period](https://en.wikipedia.org/wiki/Soak_testing) prior to providing access to end users or securing value.\r\n\r\nFor more detailed information about some of these examples, see the [Monitoring data feeds](/data-feeds/#monitoring-data-feeds) documentation.\r\n\r\nFor important updates regarding the use of Chainlink Price Feeds, users should join the official Chainlink Discord and subscribe to the data-feeds-user-notifications channel: https://discord.gg/Dqy5N9UbsR\r\n\r\n## Chainlink Community Deployments\r\n\r\nChainlink technology is used by many within the blockchain community to support their use cases. Deployments built and run by community members are not tracked in the Chainlink documentation. Chainlink's community is continuously growing, and we believe they play a vital role in developing the ecosystem, so we continue to develop our software and tooling for anyone to use. Users have a wide variety of options for choosing how to deliver data on-chain. They can deploy Chainlink nodes themselves or via the extensive network of node operators that offer services and access one of the community-managed oracle networks that support the supply of various types of data on-chain. Chainlink Labs does not take responsibility for the use of Chainlink node software.\r\n\r\nIt is always recommended that you conduct a thorough analysis of your requirements and carry out appropriate due diligence on any partners you wish to use with your project.\r\n\r\n> **The Chainlink Labs team does not monitor community deployments** and encourages users to use best practices in observability, monitoring, and risk mitigation as appropriate for your application's stage of development and use case.\r\n\r\nAs your usage of data feeds evolves and requirements for higher availability and greater security increases, such as securing substantive value, the reliability properties of your data feed will become crucial. [Contact Chainlink Labs team](https://chainlinkcommunity.typeform.com/to/OYQO67EF?page=market-data-feeds) for services to ensure deployments meet the highest levels of availability and security.\r\n\r\n**High Risk: Forked, modified, or custom software:**\r\n\r\nAs Chainlink is open source, independent forks and modifications may exist. Chainlink Labs and development teams are not involved in these and do not track or maintain visibility on them. Chainlink Labs is not responsible for updates, enhancements, or bug fixes for these versions, and Chainlink Labs does not monitor them. Their use might pose risks that can do harm to your project. Users are responsible for thoroughly vetting and validating such deployments and determining their suitability.\r\n\r\n## Evaluating Data Sources and Risks\r\n\r\nIf your smart contracts use data feeds, assess those data feeds for the following characteristics:\r\n\r\n- [Liquidity and its Distribution](#liquidity-and-its-distribution)\r\n- [Single Source Data Providers](#single-source-data-providers)\r\n- [Crypto and Blockchain Actions](#crypto-and-blockchain-actions)\r\n- [Market Failures Resulting from Extreme Events](#market-failures-resulting-from-extreme-events)\r\n- [Periods of High Network Congestion](#periods-of-high-network-congestion)\r\n- [Unknown and Known Users](#unknown-and-known-users)\r\n- [Fast Gas Reliability](#fast-gas-reliability)\r\n\r\n### Liquidity and its Distribution\r\n\r\nIf your smart contract relies on pricing data for a specific asset, make sure that the asset has sufficient liquidity in the market to avoid price manipulation. Assets with low liquidity can be volatile, which might negatively impact your application and its users. Malicious actors might try to exploit volatility to take advantage of the logic in a smart contract and cause it to execute in a way that you did not intend.\r\n\r\nSome data feeds obtain their pricing data from individual exchanges rather than from aggregated price tracking services that gather their data from multiple exchanges. These are marked as such in the docs page for that feed. Assess the liquidity and reliability of that specific exchange.\r\n\r\n_Liquidity migrations_ occur when a project moves its tokens from one liquidity provider (such as a DEX, a CEX, or a new DeFi application) to another. When liquidity migrations occur, it can result in low liquidity in the original pool, making the asset susceptible to market manipulation. If your project is considering a liquidity migration, you should coordinate with relevant stakeholders, including liquidity providers, exchanges, oracle node operators, and users, to ensure prices are accurately reported throughout the migration.\r\n\r\nFeeds for assets with low market liquidity where data providers exhibit an abnormal price spread may, on occasion, see a price oscillate between two or more price points within regular intervals. To mitigate risk associated with such price oscillation, users must regularly monitor & assess the quality of an asset’s liquidity.\r\n\r\nDesign and test your contracts to handle price spikes and implement risk management measures to protect your assets. For example, create mock tests that return various oracle responses.\r\n\r\n### Single Source Data Providers\r\n\r\nSome data providers use a single data source, which might be necessary if only one source exists off-chain for a specific type of data. Evaluate data providers to make sure they provide high-quality data that your smart contracts can rely on. Any error or omission in the provider's data might negatively impact your application and its users.\r\n\r\n### Crypto and Blockchain Actions\r\n\r\nPrice data quality is subject to crypto actions by the crypto and blockchain project teams. Crypto actions are similar to [corporate actions](https://en.wikipedia.org/wiki/Corporate_action) but are specific to cryptocurrency and blockchain projects, such as token renaming, token swaps, redenominations, splits, network upgrades, and other migrations that teams who govern the blockchain or token might undertake\r\n\r\nSustaining data quality is dependent on data sources implementing the necessary adjustments related to such actions. For example, when a project upgrades to a new version of their token, this results in a *token migration*. When token migrations occur, they require building a new price feed to ensure that the token price is accurately reported. Similarly, actions by blockchain project teams, such as forks or upgrades to the network, may require new Price Feeds to ensure continuity and data quality. When considering a token migration, fork, network upgrade, or other crypto action, projects should proactively reach out to relevant stakeholders to ensure the asset price is accurately reported throughout the process.\r\n\r\n### Market Failures Resulting from Extreme Events\r\n\r\nUsers are strongly advised to set up monitoring and alerts in the event of unexpected market failures. Black swan events, hacks, coordinated attacks, or extreme market conditions may trigger unanticipated outcomes such as liquidity pools becoming unbalanced, unexpected re-weighting of indices, abnormal behavior by centralized or decentralized exchanges, or the de-pegging of synthetic assets and currencies from their intended exchange rates.\r\n\r\nUsers should be aware of inherently increased risk during such periods of high volatility and market failure.\r\n\r\n### Periods of High Network Congestion\r\n\r\nData Feed performance relies on the chains they are deployed on. Periods of high network congestion might impact the frequency of Chainlink Price Feeds. It is advised that you configure your applications to detect such chain performance issues and to respond appropriately.\r\n\r\n### Unknown and Known Users\r\n\r\nRoutine maintenance is carried out on Chainlink Data Feeds, including decommissioning, on an ad-hoc basis. These maintenance periods might require users to take action in order to maintain business continuity.\r\n\r\nNotifications are sent to inform known users regarding such occurrences, and it is strongly encouraged for all users, including those users utilizing data feeds for off-chain purposes, [to provide their contact information](https://chainlinkcommunity.typeform.com/unknownDfUsers?typeform-source=docs.chain.link) before utilizing data feeds. Without providing contact information, users will be unable to receive notifications regarding important price feed updates.\r\n\r\nIf you are using Price Feeds but have not provided your contact information, you can do so [here](https://chainlinkcommunity.typeform.com/unknownDfUsers?typeform-source=docs.chain.link). Users that fail to provide notification information do so at their own risk.\r\n\r\n### Extreme Events Causing Price Deviations in Wrapped or Bridged Assets\r\n\r\nChainlink Price Feeds are designed to provide the market-wide price of various assets, as determined by a volume-weighted average across a wide range of exchanges. On blockchain networks where assets are wrapped and/or bridged from another environment using a cross-chain token bridge, Chainlink Price Feeds on that blockchain will continue to report the market-wide price of the underlying asset as opposed to the price of the wrapped/bridged asset. This methodology reduces risks around market manipulation because wrapped/bridged tokens are often less liquid than the underlying asset.\r\n\r\nHowever, users should be aware that certain extreme events may result in price deviations between the wrapped/bridged asset and its underlying counterpart. For example, the exploitation or hack of a cross-chain token bridge may cause a collapse in demand for a particular wrapped asset. As such, users should construct their applications with safeguards, such as proactively pausing functionality, to mitigate risk during such scenarios.\r\n\r\nOne mechanism for securing a protocol utilizing wrapped assets is by incorporating [Chainlink Proof of Reserve](https://chain.link/proof-of-reserve). Chainlink Proof of Reserve enables the real-time reserve monitoring of off-chain and cross-chain assets, including those that have been wrapped/bridged. By comparing the wrapped token’s supply against a Chainlink Proof of Reserve feed, protocols can ensure that these assets are properly collateralized at all times.\r\n\r\n### Front Running Risk\r\n\r\nFront running (when a third party benefits from prior access to information about a transaction) is a known risk inherent to specific blockchain applications. Chainlink Data Feeds are optimized to prioritize high levels of data quality and reliability over latency.\r\n\r\nTo mitigate the risk associated with front running, users building highly latency-dependent applications should assess whether the configuration of data feeds meets their needed specifications for speed and frequency.\r\n\r\n### Fast Gas Reliability\r\n\r\nThe [Fast Gas Data Feed](https://data.chain.link/ethereum/mainnet/gas/fast-gas-gwei) provides a simple way to determine the price of gas so you can estimate how much gas you need to make a transaction execute quickly. Fast gas prices can be manipulated, so you should design your applications to detect gas price volatility or malicious activity that might affect the costs of your transactions.\r\n\r\n:::note[ The best practices above are provided for informational purposes only. You are responsible for reviewing the quality of the data that you integrate into your smart contracts.]\r\n\r\n:::\r\n"
    },
    {
      "title": "API Calls: Using Any API",
      "headings": [
        {
          "depth": 2,
          "slug": "1-how-does-the-request-and-receive-cycle-work-for-api-calls",
          "text": "1. How does the request and receive cycle work for API calls?"
        },
        {
          "depth": 2,
          "slug": "2-what-are-jobs",
          "text": "2. What are jobs?"
        },
        {
          "depth": 2,
          "slug": "3-what-are-tasks",
          "text": "3. What are Tasks?"
        },
        {
          "depth": 3,
          "slug": "tasks",
          "text": "Tasks"
        },
        {
          "depth": 3,
          "slug": "contract-example",
          "text": "Contract Example"
        },
        {
          "depth": 3,
          "slug": "external-adapters",
          "text": "External Adapters"
        },
        {
          "depth": 2,
          "slug": "4-how-can-i-use-an-oracle-data-service",
          "text": "4. How can I use an Oracle Data Service?"
        },
        {
          "depth": 2,
          "slug": "5-further-reading",
          "text": "5. Further Reading"
        }
      ],
      "url": "/getting-started/advanced-tutorial",
      "section": "gettingStarted",
      "content": "\r\n:::note[ Requirements]\r\n\r\nThis guide requires basic knowledge about smart contracts. If you are new to smart contract development, read the [Consuming Data Feeds](/getting-started/consuming-data-feeds/) and [Random Numbers](/getting-started/intermediates-tutorial/) guides before you begin.\r\n\r\n:::\r\n\r\n<YouTube id=\"https://www.youtube.com/watch?v=ay4rXZhAefs\" />\r\n\r\nIn this guide, you will learn how to request data from a public API in a smart contract. This includes understanding what Tasks and External adapters are and how Oracle Jobs use them. You will also learn how to find the Oracle Jobs and Tasks for your contract and how to request data from an Oracle Job.\r\n\r\n## 1. How does the request and receive cycle work for API calls?\r\n\r\nThe request and receive cycle describes how a smart contract requests data from an oracle and receives the response in a separate transaction. If you need a refresher, check out the [Basic Request Model](/architecture-overview/architecture-request-model/).\r\n\r\nFor contracts that use [Chainlink VRF](/vrf/v2/introduction/), you request randomness from a VRF oracle and then await the response. The fulfillment function is already given to us from the `VRFConsumerBase` contract, so oracles already know where to send the response to. However, with API calls, the contract itself _defines_ which function it wants to receive the response to.\r\n\r\nBefore creating any code, you should understand how Oracle jobs can get data on-chain.\r\n\r\n## 2. What are jobs?\r\n\r\nChainlink nodes require [**Jobs**](/chainlink-nodes/oracle-jobs/jobs/) to do anything useful. In the case of a Request and Receive job, the [Direct Request](/chainlink-nodes/oracle-jobs/job-types/direct_request) job monitors the blockchain for a request from a smart contract. Once it catches a request, it runs the tasks (both core and external adapters) that the job is configured to run and eventually returns the response to the requesting contract.\r\n\r\n## 3. What are Tasks?\r\n\r\nEach oracle job has a configured set of tasks it must complete when it is run. These tasks are split into two subcategories:\r\n\r\n- [**Tasks**](/chainlink-nodes/oracle-jobs/task-types/tasks/) - These are tasks that come built-in to each node. (examples: http, ethabidecode, etc).\r\n- [**External Adapters**](/chainlink-nodes/external-adapters/external-adapters/) - These are custom adapters built by node operators and community members, which perform specific tasks like calling a particular endpoint with a specific set of parameters (like authentication secrets that shouldn't be publicly visible).\r\n\r\n### Tasks\r\n\r\nIf a job needs to make a GET request to an API, find a specific unsigned integer field in a JSON response, then submit that back to the requesting contract, it would need a job containing the following Tasks:\r\n\r\n- [HTTP](/chainlink-nodes/oracle-jobs/task-types/task_http) calls the API. the `method` must be set to _GET_.\r\n- [JSON Parse](/chainlink-nodes/oracle-jobs/task-types/task_jsonparse) parses the JSON and extracts a value at a given keypath.\r\n- [Multiply](/chainlink-nodes/oracle-jobs/task-types/task_multiply) multiplies the input by a multiplier. Used to remove the decimals.\r\n- [ETH ABI Encode](/chainlink-nodes/oracle-jobs/task-types/task_eth_abi_encode) converts the data to a bytes payload according to ETH ABI encoding.\r\n- [ETH Tx](/chainlink-nodes/oracle-jobs/task-types/task_eth_tx) submits the transaction to the chain, completing the cycle.\r\n\r\nThe job specs example can be found [here](/chainlink-nodes/job-specs/direct-request-get-uint256/).\r\nLet's walk through a real example, where you will retrieve 24 volumes of the [ETH/USD pair](https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&tsyms=USD) from the cryptocompare API.\r\n\r\n1. [HTTP](/chainlink-nodes/oracle-jobs/task-types/task_http) calls the API and returns the body of an HTTP GET result for [ETH/USD pair](https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&tsyms=USD). Example:\r\n\r\n```json\r\n{\"RAW\":\r\n  {\"ETH\":\r\n    {\"USD\":\r\n      {\r\n        ...,\r\n        \"VOLUMEDAYTO\":953806939.7194247,\r\n        \"VOLUME24HOUR\":703946.0675653099,\r\n        \"VOLUME24HOURTO\":1265826345.488568\r\n        ...,\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n2. [JSON Parse](/chainlink-nodes/oracle-jobs/task-types/task_jsonparse) walks a specified `path` (`\"RAW,ETH,USD,VOLUME24HOUR\"`) and returns the value found at that result. Example: `703946.0675653099`\r\n\r\n3. [Multiply](/chainlink-nodes/oracle-jobs/task-types/task_multiply) parses the input into a float and multiplies it by the 10^18. Example: `703946067565309900000000`\r\n\r\n4. [ETH ABI Encode](/chainlink-nodes/oracle-jobs/task-types/task_eth_abi_encode) formats the input into an integer and then converts it into Solidity's `uint256` format. Example: `0xc618a1e4`\r\n\r\n5. [ETH Tx](/chainlink-nodes/oracle-jobs/task-types/task_eth_tx) takes the given input, places it into the data field of the transaction, signs a transaction, and broadcasts it to the network. Example: [transaction result](https://goerli.etherscan.io/tx/0x5f2023b665e0ae336665ded73fafa90ef752ac33487b9240f34b82f93a77c8ca)\r\n\r\n**Note: Some tasks accept parameters to be passed to them to inform them how to run.** Example: [JSON Parse](/chainlink-nodes/oracle-jobs/task-types/task_jsonparse) accepts a `path` parameter which informs the task where to find the data in the JSON object.\r\n\r\nLet's see what this looks like in a contract:\r\n\r\n### Contract Example\r\n\r\n::solidity-remix[samples/APIRequests/APIConsumer.sol]\r\n\r\nHere is a breakdown of each component of this contract:\r\n\r\n1. Constructor: This sets up the contract with the Oracle address, Job ID, and LINK fee that the oracle charges for the job.\r\n2. `requestVolumeData` functions: This builds and sends a request - which includes the fulfillment functions selector - to the oracle. Notice how it adds the `get`, `path` and `times` parameters. These are read by the Tasks in the job to perform correctly. `get` is used by [HTTP](/chainlink-nodes/oracle-jobs/task-types/task_http), `path` is used by [JSON Parse](/chainlink-nodes/oracle-jobs/task-types/task_jsonparse) and `times` is used by [Multiply](/chainlink-nodes/oracle-jobs/task-types/task_multiply).\r\n3. `fulfill` function: This is where the result is sent upon the Oracle Job's completion.\r\n\r\n**Note:** The calling contract should own enough LINK to pay the fee, which by default is 0.1 LINK. You can use [this tutorial](/resources/fund-your-contract/) to learn how to fund your contract.\r\n\r\nThis is an example of a basic HTTP GET request. However, it requires defining the API URL directly in the smart contract. This can, in fact, be extracted and configured on the Job level inside the Oracle node. You can follow the _APIConsumer_ tutorial [here](/any-api/get-request/examples/single-word-response/).\r\n\r\n### External Adapters\r\n\r\nHere are some examples nodes with external adapters:\r\n\r\n- [Google Weather Data](https://docs.chain.link/any-api/data-providers/google-weather/)\r\n- [Associated Press](https://market.link/nodes/The%20Associated%20Press/integrations)\r\n\r\nIf all the parameters are defined within the Oracle job, the only things a smart contract needs to define to consume are:\r\n\r\n- JobId\r\n- Oracle address\r\n- LINK fee\r\n- Fulfillment function\r\n\r\nThis will make your smart contract much more succinct. The `requestVolumeData` function from the code example [above](#contract-example) would look more like this:\r\n\r\n```solidity\r\nfunction requestVolumeData() public returns (bytes32 requestId) {\r\n    Chainlink.Request memory req = buildChainlinkRequest(jobId, address(this), this.fulfill.selector);\r\n\r\n    // Extra parameters don't need to be defined here because they are already defined in the job\r\n\r\n    return sendChainlinkRequest(req, fee);\r\n}\r\n```\r\n\r\nYou can follow a full _Existing Job Tutorial_ [here](/any-api/get-request/examples/existing-job-request/).\r\nMore on External Adapters can be found [here](/chainlink-nodes/external-adapters/external-adapters/).\r\n\r\n## 4. How can I use an Oracle Data Service?\r\n\r\nChainlink has facilitated the launch of several new oracle data services that allow dApps to access rich data from external data sources. For instance, you can create a smart contract that checks Google's DNS service to determine if a given domain is owned by a given blockchain address using oracle job without having to specify the URL inside the contract.\r\nJoin the [operator-requests discord channel](https://discord.gg/eGcxsdZzKR) to directly communicate with community node operators.\r\nA full example on Kovan testnet can be found [here](/any-api/data-providers/dns-ownership/).\r\n\r\n## 5. Further Reading\r\n\r\nTo learn more about connecting smart contracts to external APIs, read our blog posts:\r\n\r\n- [Connect a Smart Contract to the Twitter API](https://blog.chain.link/connect-smart-contract-to-twitter-api/)\r\n- [Connect a Tesla Vehicle API to a Smart Contract](https://blog.chain.link/create-tesla-smart-contract-rental/)\r\n- [OAuth and API Authentication in Smart Contracts](https://blog.chain.link/oauth-and-api-authentication-in-smart-contracts-2/)\r\n\r\nTo explore more applications of external API requests, check out our [other tutorials](/getting-started/other-tutorials/#api-requests).\r\n"
    },
    {
      "title": "Chainlink Overview",
      "headings": [
        {
          "depth": 2,
          "slug": "what-is-a-smart-contract-what-is-a-hybrid-smart-contract",
          "text": "What is a smart contract? What is a hybrid smart contract?"
        },
        {
          "depth": 2,
          "slug": "what-language-is-a-smart-contract-written-in",
          "text": "What language is a smart contract written in?"
        },
        {
          "depth": 2,
          "slug": "what-does-a-smart-contract-look-like",
          "text": "What does a smart contract look like?"
        },
        {
          "depth": 3,
          "slug": "solidity-versions",
          "text": "Solidity versions"
        },
        {
          "depth": 3,
          "slug": "naming-a-contract",
          "text": "Naming a Contract"
        },
        {
          "depth": 3,
          "slug": "variables",
          "text": "Variables"
        },
        {
          "depth": 3,
          "slug": "constructors",
          "text": "Constructors"
        },
        {
          "depth": 3,
          "slug": "functions",
          "text": "Functions"
        },
        {
          "depth": 3,
          "slug": "interfaces",
          "text": "Interfaces"
        },
        {
          "depth": 2,
          "slug": "what-does-deploying-mean",
          "text": "What does “deploying” mean?"
        },
        {
          "depth": 2,
          "slug": "what-is-a-link-token",
          "text": "What is a LINK token?"
        },
        {
          "depth": 2,
          "slug": "what-are-oracles",
          "text": "What are oracles?"
        },
        {
          "depth": 2,
          "slug": "how-do-smart-contracts-use-oracles",
          "text": "How do smart contracts use oracles?"
        },
        {
          "depth": 2,
          "slug": "what-is-remix",
          "text": "What is Remix?"
        },
        {
          "depth": 2,
          "slug": "what-is-metamask",
          "text": "What is Metamask?"
        }
      ],
      "url": "/getting-started/conceptual-overview",
      "section": "gettingStarted",
      "description": "Learn the basic concepts about what smart contracts are and, how to write them, and how Chainlink oracles work with smart contracts.",
      "content": "\r\nWelcome to the Smart Contract Getting Started guide. This overview explains the basic concepts of smart contract development and oracle networks.\r\n\r\n**Skip ahead:**\r\nTo get your hands on the code right away, you can skip this overview:\r\n\r\n- [Deploy Your First Smart Contract](/getting-started/deploy-your-first-contract/): If you are new to smart contracts, deploy your first smart contract in an interactive web development environment.\r\n- [Learn how to use Data Feeds](/getting-started/consuming-data-feeds/): If you are already familiar with smart contracts and want to learn how to create _hybrid_ smart contracts, use Chainlink Data Feeds to get asset price data on-chain.\r\n\r\n<YouTube id=\"https://www.youtube.com/watch?v=rFXSEEQG9YE\" />\r\n\r\n## What is a smart contract? What is a hybrid smart contract?\r\n\r\nWhen deployed to a blockchain, a _smart contract_ is a set of instructions that can be executed without intervention from third parties. The smart contract code defines how it responds to input, just like the code of any other computer program.\r\n\r\nA valuable feature of smart contracts is that they can store and manage on-chain assets (like [ETH or ERC20 tokens](https://ethereum.org/en/developers/docs/standards/tokens/erc-20/)), just like you can with an Ethereum wallet. Because they have an on-chain address like a wallet, they can do everything any other address can. This enables you to program automated actions when receiving and transferring assets.\r\n\r\nSmart contracts can connect to real-world market prices of assets to produce powerful applications. Securely connecting smart contracts with off-chain data and services is what makes them _hybrid_ smart contracts. This is done using oracles.\r\n\r\n## What language is a smart contract written in?\r\n\r\nThe most popular language for writing smart contracts on Ethereum and EVM Chains is [Solidity](https://docs.soliditylang.org/en/v0.8.7/). It was created by the Ethereum Foundation specifically for smart contract development and is constantly being updated. Other languages exist for writing smart contracts on Ethereum and EVM Chains, but Solidity is the language used for Chainlink smart contracts.\r\n\r\nIf you've ever written Javascript, Java, or other object-oriented scripting languages, Solidity should be easy to understand. Similar to object-oriented languages, Solidity is considered to be a _contract_-oriented language.\r\n\r\nSome networks are not EVM-compatible and use languages other than Solidity for smart contracts:\r\n\r\n- [Solana](/solana/)\r\n\r\n  - [Writing Solana contracts in Rust](https://docs.solana.com/developing/on-chain-programs/developing-rust)\r\n  - [Writing Solana contracts in C](https://docs.solana.com/developing/on-chain-programs/developing-c)\r\n\r\n## What does a smart contract look like?\r\n\r\nThe structure of a smart contract is similar to that of a class in Javascript, with a few differences. For example, the following `HelloWorld` contract is a simple smart contract that stores a single variable and includes a function to update the value of that variable.\r\n\r\n::solidity-remix[samples/Tutorials/HelloWorld.sol]\r\n\r\n### Solidity versions\r\n\r\nThe first thing that every Solidity file must have is the Solidity version definition. The `HelloWorld.sol` contract uses version `0.8.7`, which is defined in the contract as `pragma solidity 0.8.7;`\r\n\r\nYou can see the latest versions of the Solidity compiler [here](https://github.com/ethereum/solc-bin/blob/gh-pages/bin/list.txt/?target=_blank). You might also notice smart contracts that are compatible with a range of versions.\r\n\r\n```solidity\r\npragma solidity >=0.7.0 <0.9.0;\r\n```\r\n\r\nThis means that the code is written for Solidity version 0.7.0, or a newer version of the language up to, but not including version 0.9.0. The `pragma` selects the compiler, which defines how the code is treated.\r\n\r\n### Naming a Contract\r\n\r\nThe `contract` keyword defines the name of the contract, which in this example is `HelloWorld`. This is similar to declaring a `class` in Javascript. The implementation of `HelloWorld` is inside this definition and denoted with curly braces.\r\n\r\n```solidity\r\ncontract HelloWorld {\r\n\r\n}\r\n```\r\n\r\n### Variables\r\n\r\nLike Javascript, contracts can have state variables and local variables. **State variables** are variables with values that are permanently stored in contract storage. The values of **local variables**, however, are present only until the function is executing. There are also different types of variables you can use within Solidity, such as `string`, `uint256`, etc. Check out the [Solidity documentation](https://docs.soliditylang.org/en/v0.8.7/) to learn more about the different kinds of variables and types.\r\n\r\n_Visibility modifiers_ are used to define the level of access to these variables. Here are some examples of state variables with different visibility modifiers:\r\n\r\n```solidity\r\nstring public message;\r\nuint256 internal internalVar;\r\nuint8 private privateVar;\r\n```\r\n\r\nLearn more about state variables visibility [here](https://docs.soliditylang.org/en/latest/contracts.html#state-variable-visibility).\r\n\r\n### Constructors\r\n\r\nAnother familiar concept to programmers is the **constructor**. When you deploy a contract, the constructor sets the state of the contract when it is first created.\r\n\r\nIn `HelloWorld`, the constructor takes in a `string` as a parameter and sets the `message` state variable to that string.\r\n\r\n```solidity\r\nconstructor(string memory initialMessage) {\r\n  message = initialMessage;\r\n}\r\n```\r\n\r\n### Functions\r\n\r\n**Functions** can access and modify the state of the contract or call other functions on external contracts. `HelloWorld` has a function named `updateMessage`, which updates the current message stored in the state.\r\n\r\n```solidity\r\nconstructor(string memory initialMessage) {\r\n  message = initialMessage;\r\n}\r\n\r\nfunction updateMessage(string memory newMessage) public {\r\n  message = newMessage;\r\n}\r\n```\r\n\r\nFunctions use visibility modifiers to define the access level. Learn more about functions visibility [here](https://docs.soliditylang.org/en/latest/contracts.html#function-visibility).\r\n\r\n### Interfaces\r\n\r\nAn **interface** is another concept that is familiar to programmers of other languages. Interfaces define functions without their implementation, which leaves inheriting contracts to define the actual implementation themselves. This makes it easier to know what functions to call in a contract. Here's an example of an interface:\r\n\r\n::solidity-remix[samples/Tutorials/Test.sol]\r\n\r\nFor this example, `override` is necessary in the `Test` contract function because it overrides the base function contained in the `numberComparison` interface. The contract uses `pure` instead of `view` because the `isSameNum` function in the `Test` contract does not return a storage variable.\r\n\r\n## What does \"deploying\" mean?\r\n\r\n**Deploying** a smart contract is the process of pushing the code to the blockchain, at which point it resides with an on-chain address. Once it's deployed, the code cannot be changed and is said to be _immutable_.\r\n\r\nAs long as the address is known, its functions can be called through an interface, on [Etherscan](https://etherscan.io/), or through a library like [web3js](https://web3js.readthedocs.io/), [web3py](https://web3py.readthedocs.io/), [ethers](https://docs.ethers.io), and more. Contracts can also be written to interact with other contracts on the blockchain.\r\n\r\n## What is a LINK token?\r\n\r\nThe LINK token is an ERC677 token that inherits functionality from the [ERC20 token standard](https://ethereum.org/en/developers/docs/standards/tokens/erc-20/) and allows token transfers to contain a data payload. It is used to pay node operators for retrieving data for smart contracts and also for deposits placed by node operators as required by contract creators.\r\n\r\nAny wallet that handles ERC20 tokens can store LINK tokens. The ERC677 token standard that the LINK token implements still retains all functionality of ERC20 tokens.\r\n\r\n## What are oracles?\r\n\r\n**Oracles** provide a bridge between the real-world and on-chain smart contracts by being a source of data that smart contracts can rely on, and act upon.\r\n\r\nOracles play a critical role in facilitating the full potential of smart contract utility. Without a reliable connection to real-world conditions, smart contracts cannot effectively serve the real-world.\r\n\r\n## How do smart contracts use oracles?\r\n\r\nOracles are most popularly used with [_Data Feeds_](/data-feeds/). DeFi platforms like [AAVE](https://aave.com/) and [Synthetix](https://www.synthetix.io/) use Chainlink data feed oracles to obtain accurate real-time asset prices in their smart contracts.\r\n\r\nChainlink data feeds are sources of data [aggregated from many independent Chainlink node operators](/architecture-overview/architecture-decentralized-model/). Each data feed has an on-chain address and functions that enable contracts to read from that address. For example, the [ETH / USD feed](https://data.chain.link/eth-usd/).\r\n\r\n![Chainlink Feeds List](/images/contract-devs/price-aggr.png)\r\n\r\nSmart contracts also use oracles to get other capabilities on-chain:\r\n\r\n- [Generate Verifiable Random Numbers (VRF)](/vrf/v2/introduction/): Use Chainlink VRF to consume randomness in your smart contracts.\r\n- [Call External APIs (Any API)](/any-api/introduction/): Request & Receive data from any API using the Chainlink contract library.\r\n- [Automate Smart Contract Functions (Automation)](/chainlink-automation/introduction/): Automating smart contract functions and regular contract maintenance.\r\n\r\n## What is Remix?\r\n\r\n<YouTube id=\"https://www.youtube.com/watch?v=JWJWT9cwFbo\" />\r\n\r\n[Remix](https://remix.ethereum.org/) is a web IDE (integrated development environment) for creating, running, and debugging smart contracts in the browser. It is developed and maintained by the Ethereum foundation. Remix allows Solidity developers to write smart contracts without a development machine since everything required is included in the web interface. It allows for a simplified method of interacting with deployed contracts, without the need for a command line interface. Remix also has support for samples. This means that Remix can load code from Github.\r\n\r\nTo learn how to use Remix, see the [Deploying Your First Smart Contract\r\n](/getting-started/deploy-your-first-contract/) guide.\r\n\r\n<div class=\"remix-callout\">\r\n  <a href=\"/getting-started/deploy-your-first-contract/\">Deploy Your First Smart Contract</a>\r\n</div>\r\n\r\n## What is Metamask?\r\n\r\nContracts are deployed by other addresses on the network. To deploy a smart contract, you need an address. Not only that, but you need an address which you can easily use with Remix. Fortunately, [MetaMask](https://metamask.io) is just what is needed. **Metamask** allows anyone to create an address, store funds, and interact with Ethereum compatible blockchains from a browser extension.\r\n"
    },
    {
      "title": "Consuming Data Feeds",
      "headings": [
        {
          "depth": 2,
          "slug": "examine-the-sample-contract",
          "text": "Examine the sample contract"
        },
        {
          "depth": 2,
          "slug": "compile-deploy-and-run-the-contract",
          "text": "Compile, deploy, and run the contract"
        }
      ],
      "url": "/getting-started/consuming-data-feeds",
      "section": "gettingStarted",
      "description": "Learn how to consume Chainlink Data Feeds in your smart contracts.",
      "content": "\r\n:::note[ New to smart contracts?]\r\n\r\nThis tutorial assumes that you know how to create and deploy basic smart contracts. If you are new to smart contract development, learn how to [Deploy Your First Smart Contract](/getting-started/deploy-your-first-contract/) before you start this guide.\r\n\r\n:::\r\n\r\nWhen you connect a smart contract to real-world services or off-chain data, you create a _hybrid smart contract_. For example, you can use Chainlink Data Feeds to connect your smart contracts to asset pricing data like the [ETH / USD feed](https://data.chain.link/eth-usd). These data feeds use the data aggregated from many independent Chainlink node operators. Each price feed has an on-chain address and functions that enable contracts to read pricing data from that address.\r\n\r\nThis guide shows you how to write, deploy, and run a smart contract that consumes data from a price data feed.\r\n\r\n## Examine the sample contract\r\n\r\nThe following code describes a contract that obtains the latest ETH / USD price using the Goerli testnet.\r\n\r\n::solidity-remix[samples/PriceFeeds/PriceConsumerV3.sol]\r\n\r\nThe contract has the following components:\r\n\r\n- The `import` line imports an interface named `AggregatorV3Interface`. Interfaces define functions without their implementation, which leaves inheriting contracts to define the actual implementation themselves. In this case, `AggregatorV3Interface` defines that all v3 Aggregators have the function `latestRoundData`. You can [see the complete code](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol) for the `AggregatorV3Interface` on GitHub.\r\n\r\n- The `constructor() {}` initializes an interface object named `priceFeed` that uses `AggregatorV3Interface` and connects specifically to a proxy aggregator contract that is already deployed at `0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e`. The interface allows your contract to run functions on that deployed aggregator contract.\r\n\r\n- The `getLatestPrice()` function calls your `priceFeed` object and runs the `latestRoundData()` function. When you deploy the contract, it initializes the `priceFeed` object to point to the aggregator at `0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e`, which is the proxy address for the Goerli ETH / USD data feed. Your contract connects to that address and executes the function. The aggregator connects with several oracle nodes and aggregates the pricing data from those nodes. The response from the aggregator includes several variables, but `getLatestPrice()` returns only the `price` variable.\r\n\r\n## Compile, deploy, and run the contract\r\n\r\n:::caution[ If you have not already configured your MetaMask wallet and funded it with testnet ETH, follow the instructions in the Deploy Your First Smart Contract to set that up. You can get testnet ETH at one of the available [Goerli faucets](/resources/link-token-contracts/#goerli-testnet).]\r\n\r\n:::\r\n\r\nDeploy the `PriceConsumerV3` smart contract on the Goerli testnet.\r\n\r\n1. [Open the example contract](https://remix.ethereum.org/#url=https://docs.chain.link/samples/PriceFeeds/PriceConsumerV3.sol) in Remix. Remix opens and shows the contents of the smart contract.\r\n\r\n<div class=\"remix-callout\">\r\n  <a href=\"https://remix.ethereum.org/#url=https://docs.chain.link/samples/PriceFeeds/PriceConsumerV3.sol\">Open the contract in Remix</a>\r\n</div>\r\n\r\n1. Because the code is already written, you can start the compile step. On the left side of Remix, click the **Solidity Compiler** tab to view the compiler settings.\r\n   ![Screenshot showing the Compiler tab and its settings.](/images/getting-started/selectSolidityCompiler.png)\r\n\r\n1. Use the default compiler settings. Click the **Compile PriceConsumerV3.sol** button to compile the contract. Remix automatically detects the correct compiler version depending on the `pragma` that you specify in the contract. You can ignore warnings about unused local variables in this example.\r\n   ![Screenshot of the Compile button.](/images/getting-started/compilePriceConsumerV3.png)\r\n\r\n1. On the **Deploy** tab, select the **Injected Provider** environment. This contract specifically requires Web3 because it connects with another contract on the blockchain. Running in a JavaScript VM will not work.\r\n   ![Screenshot showing the Injected Provider environment selected.](/images/getting-started/selectWeb3.png)\r\n\r\n1. Because the example contract has several imports, Remix might select another contract to deploy by default. In the **Contract** section, select the `PriceConsumerV3` contract to make sure that Remix deploys the correct contract.\r\n   ![Screenshot showing PriceConsumerV3 as the contract to deploy.](/images/getting-started/selectPriceConsumerV3.png)\r\n\r\n1. Click **Deploy** to deploy the contract to the Goerli testnet. MetaMask opens and asks you to confirm payment for deploying the contract. Make sure MetaMask is set to the Goerli network before you accept the transaction. Because these transactions are on the blockchain, they are not reversible.\r\n   ![Screenshot of the Deploy button for PriceConsumerV3.](/images/getting-started/deployPriceConsumerV3.png)\r\n\r\n1. In the MetaMask prompt, click **Confirm** to approve the transaction and spend your testnet ETH required to deploy the contract.\r\n   ![Screenshot showing Metamask asking you to confirm the transaction.](/images/getting-started/confirmTransaction.png)\r\n\r\n1. After a few seconds, the transaction completes and your contract appears under the **Deployed Contracts** list in Remix. Click the contract dropdown to view its variables and functions.\r\n   ![Remix Deployed Contracts Section](/images/getting-started/deployedContractPriceConsumerV3.png)\r\n\r\n1. Click **getLatestPrice** to show the latest price from the aggregator contract. The latest price appears just below the button. The returned price is an integer, so it is missing its decimal point.\r\n   ![A screenshot showing the deployed contract.](/images/getting-started/getLatestPrice.png)\r\n\r\nYou can run your own oracle networks that provide data to smart contracts similar to the `AggregatorV3Interface`, but first, you should learn how to configure your contracts to pay oracles using LINK tokens. Follow the [Generate Random Numbers](/getting-started/intermediates-tutorial/) to learn how.\r\n"
    },
    {
      "title": "Deploy Your First Smart Contract",
      "headings": [
        {
          "depth": 2,
          "slug": "install-and-fund-your-metamask-wallet",
          "text": "Install and fund your MetaMask wallet"
        },
        {
          "depth": 2,
          "slug": "write-compile-and-deploy-your-first-smart-contract",
          "text": "Write, compile, and deploy your first smart contract"
        },
        {
          "depth": 2,
          "slug": "run-functions-in-your-contract",
          "text": "Run functions in your contract"
        }
      ],
      "url": "/getting-started/deploy-your-first-contract",
      "section": "gettingStarted",
      "description": "Deploy and run your first smart contract in an interactive web development environment.",
      "content": "\r\nYou can write your first smart contract and run it in your browser without any knowledge about Ethereum or blockchains. This guide shows you how easy it is to develop smart contracts using the [Solidity language](https://soliditylang.org/), a [MetaMask wallet](https://metamask.io) and the [Remix Development Environment](https://remix.ethereum.org/). You can use all of these tools in your browser for free with no signup required.\r\n\r\n:::note[ Already know Solidity and have MetaMask configured?]\r\n\r\nIf you are already familiar with how to deploy Smart Contracts and use MetaMask, you can skip to the [Consuming Data Feeds](/getting-started/consuming-data-feeds/) guide to learn how to connect your smart contracts to Chainlink data feeds.\r\n\r\n:::\r\n\r\nIn general, you create and deploy your smart contracts operate using the following process:\r\n\r\n1. **Write:** Write a contract to define how the contract functions, what data it can store, what other contracts it interacts with, and what external APIs it might call.\r\n\r\n1. **Compile:** Pass your smart contract code through a compiler to translate the contract into byte code that the blockchain can understand. For example, [Solidity](https://soliditylang.org) code must be compiled before it can run in the [Ethereum Virtual Machine](https://ethereum.org/en/developers/docs/evm/).\r\n\r\n1. **Deploy:** Send the compiled smart contract to the blockchain. From that point forward, the contract cannot be altered. However, you can still interact with the contract in several ways.\r\n\r\n1. **Run functions:** When you run the functions that you defined for the contract, the network processes those functions and modifies the state of your contract. For some functions, the network charges a small fee to complete the work. Your contract can also have functions that transfer funds to other contracts or wallets.\r\n\r\nThis guide walks you through each step, but you must install and fund your MetaMask wallet first.\r\n\r\n## Install and fund your MetaMask wallet\r\n\r\nDeploying smart contracts on-chain requires a wallet and ETH. The ETH pays for the work required by the Ethereum network to add the contract to the blockchain and store the variables. The wallet holds the ETH that you need to pay for the transaction. Install MetaMask, configure it to use the [Goerli testnet](https://goerli.net/), and fund your wallet with free testnet ETH.\r\n\r\n1. [Install and configure the MetaMask extension](https://metamask.io/download) in your browser.\r\n\r\n1. After you install the extension, open your browser extension list and click MetaMask to open MetaMask.\r\n   ![Screenshot showing the browser extension list with MetaMask installed.](/images/getting-started/openMetaMask.png)\r\n\r\n1. Follow the instructions in MetaMask to create a new MetaMask wallet. The new wallet includes a 12-word mnemonic phrase. This phrase is the key to your wallet. Copy that phrase down in a very secure location that only you can access. You can use this phrase to retrieve your wallet later or add it to another browser.\r\n\r\n1. Set MetaMask to use the Goerli test network.\r\n   ![Screenshot showing the network selection menu in MetaMask. The Goerli Test Network is selected.](/images/getting-started/selectGoerli.webp)\r\n\r\n1. Select one of the available [Goerli faucets](/resources/link-token-contracts/#goerli-testnet) and follow the steps to send testnet ETH to your MetaMask wallet address. You can copy your wallet address by clicking your account name in MetaMask. After the faucet completes the transaction, you should have testnet ETH in your MetaMask wallet on the Goerli testnet.\r\n\r\nNow that you configured your wallet and funded it with testnet ETH, you can write, compile, and deploy your contract.\r\n\r\n## Write, compile, and deploy your first smart contract\r\n\r\nYour first contract is a simple `HelloWorld.sol` example. This example shows you how to set and retrieve variables in a smart contract on-chain.\r\n\r\n::solidity-remix[samples/Tutorials/HelloWorld.sol]\r\n\r\n1. [Open the example contract](https://remix.ethereum.org/#url=https://docs.chain.link/samples/Tutorials/HelloWorld.sol) in the Remix IDE. Remix opens and shows the contents of the smart contract. You can modify the code in this editor when you write your own contract.\r\n\r\n<div class=\"remix-callout\">\r\n  <a href=\"https://remix.ethereum.org/#url=https://docs.chain.link/samples/Tutorials/HelloWorld.sol\" target=\"_blank\">Open in Remix</a>\r\n  <a href=\"/getting-started/conceptual-overview/#what-is-remix\" >What is Remix?</a>\r\n</div>\r\n\r\n1. Because the code is already written, you can start the compile step. On the left side of Remix, click the **Solidity Compiler** tab to view the compiler settings.\r\n   ![Screenshot showing the Compiler tab and its settings.](/images/getting-started/selectSolidityCompiler.png)\r\n\r\n1. For this contract, use the default compiler settings. Click the **Compile HelloWorld.sol** button to compile the contract. This converts the contract from Solidity into bytecode that the [Ethereum Virtual Machine](https://ethereum.org/en/developers/docs/evm/) can understand. Remix automatically detects the correct compiler version depending on the `pragma` that you specify in the contract.\r\n   ![Screenshot of the Compile button.](/images/getting-started/compileHelloWorld.png)\r\n\r\n1. After Remix compiles the contract, deploy it. On the left side of Remix, click the **Deploy and Run** tab to view the deployment settings.\r\n   ![Screenshot of the Deploy tab and its settings.](/images/getting-started/selectSolidityDeploy.png)\r\n\r\n1. In the deployment settings, select the **Injected Provider** environment. This tells Remix that you want to deploy your contract to the blockchain that you configured in MetaMask. You could optionally use one of the Javascript VM options, but they run in a virtual environment with no connection to an actual blockchain or Chainlink oracles.\r\n   ![Screenshot showing the Injected Provider environment selected.](/images/getting-started/selectWeb3.png)\r\n\r\n1. Next to the **Deploy** button, enter a message that you want to send with the smart contract when you deploy it. This contract has a constructor that sets an initial message when you deploy the contract.\r\n   ![Screenshot of the Deploy button with \"Hello world!\" as the defined message.](/images/getting-started/deployHelloWorld.png)\r\n\r\n1. Click the **Deploy** button to deploy the contract and its initial message to the blockchain network. MetaMask opens and asks you to confirm payment to deploy the contract. Make sure MetaMask is set to the Goerli network before you accept the transaction. Because these transactions are on the blockchain, they are not reversible.\r\n\r\n1. In the MetaMask prompt, click **Confirm** to approve the transaction and spend your testnet ETH required to deploy the contract.\r\n   ![Screenshot showing Metamask asking you to confirm the transaction.](/images/getting-started/confirmTransaction.png)\r\n\r\n1. After a few seconds, the transaction completes and your contract appears under the **Deployed Contracts** list in Remix. Click the contract dropdown to view its variables and functions.\r\n   ![Screenshot showing the deployed Hello World contract.](/images/getting-started/deployedContract.png)\r\n\r\n1. Click the `message` variable. Remix retrieves and prints the initial message that you set.\r\n   ![Screenshot showing the message function and the returned \"Hello World\" message.](/images/getting-started/runHelloWorld.png)\r\n\r\nThe contract has an address just like your wallet address. If you save this address, you can return to your deployed contract at any time to retrieve variables or execute functions. To see details about your deployed contract, copy the contract address from the list in Remix and search for it in the [Etherscan Goerli Testnet Explorer](https://goerli.etherscan.io/).\r\n\r\n## Run functions in your contract\r\n\r\nBecause you deployed the contract to an actual blockchain, several nodes on the test network confirmed your payment for the smart contract. The contract, its variables, and its functions remain in the blockchain permanently. To change the `message` variable that is stored with your contract, run the `updateMessage` function.\r\n\r\n1. In your deployed contract, enter a new message next to the `updateMessage` function.\r\n   ![Screenshot showing the updateMessage function with a new value.](/images/getting-started/runUpdateMessage.png)\r\n\r\n1. Click the `updateMessage` button to set the new message in the contract data. MetaMask opens and asks you to confirm payment to update the state of your contract.\r\n\r\n1. In the new MetaMask prompt, click **Confirm** to approve the transaction.\r\n   ![Screenshot showing Metamask asking you to confirm the transaction.](/images/getting-started/confirmTransaction.png)\r\n\r\n1. Click the `message` variable again to see the updated value. It might take a few seconds before the transaction updates the variable.\r\n   ![Screenshot showing the updated value for the `message` value.](/images/getting-started/runHelloWorldAgain.png)\r\n\r\nNow you know how to deploy example contracts to a test network and run the functions in those contracts. You can write your own contracts and test them using this same process.\r\n\r\nNext, read the [Consuming Data Feeds](/getting-started/consuming-data-feeds/) guide to learn how to connect your smart contracts to Chainlink Data Feeds and retrieve on-chain data that your smart contracts can act on.\r\n"
    },
    {
      "title": "Random Numbers: Using Chainlink VRF",
      "headings": [
        {
          "depth": 2,
          "slug": "how-is-randomness-generated-on-blockchains-what-is-chainlink-vrf",
          "text": "How is randomness generated on blockchains? What is Chainlink VRF?"
        },
        {
          "depth": 2,
          "slug": "what-is-the-request-and-receive-cycle",
          "text": "What is the Request and Receive cycle?"
        },
        {
          "depth": 2,
          "slug": "what-is-the-payment-process-for-generating-a-random-number",
          "text": "What is the payment process for generating a random number?"
        },
        {
          "depth": 2,
          "slug": "how-can-i-use-chainlink-vrf",
          "text": "How can I use Chainlink VRF?"
        },
        {
          "depth": 3,
          "slug": "create-and-fund-a-subscription",
          "text": "Create and fund a subscription"
        },
        {
          "depth": 3,
          "slug": "importing-vrfconsumerbasev2-and-vrfcoordinatorv2interface",
          "text": "Importing VRFConsumerBaseV2 and VRFCoordinatorV2Interface"
        },
        {
          "depth": 3,
          "slug": "contract-variables",
          "text": "Contract variables"
        },
        {
          "depth": 3,
          "slug": "initializing-the-contract",
          "text": "Initializing the contract"
        },
        {
          "depth": 3,
          "slug": "rolldice-function",
          "text": "rollDice function"
        },
        {
          "depth": 3,
          "slug": "fulfillrandomwords-function",
          "text": "fulfillRandomWords function"
        },
        {
          "depth": 3,
          "slug": "house-function",
          "text": "house function"
        },
        {
          "depth": 2,
          "slug": "how-do-i-deploy-to-testnet",
          "text": "How do I deploy to testnet?"
        },
        {
          "depth": 2,
          "slug": "how-do-i-add-my-contract-to-my-subscription-account",
          "text": "How do I add my contract to my subscription account?"
        },
        {
          "depth": 2,
          "slug": "how-do-i-test-rolldice",
          "text": "How do I test rollDice?"
        },
        {
          "depth": 2,
          "slug": "further-reading",
          "text": "Further Reading"
        }
      ],
      "url": "/getting-started/intermediates-tutorial",
      "section": "gettingStarted",
      "description": "Learn how to use randomness in your smart contracts using Chainlink VRF.",
      "content": "\r\n:::note[ Requirements]\r\n\r\nThis guide assumes that you have basic knowledge about writing and deploying smart contracts. If you are new to smart contract development, read the [Consuming Data Feeds](/getting-started/consuming-data-feeds/) guide before you begin.\r\n\r\n:::\r\n\r\n<YouTube id=\"https://www.youtube.com/watch?v=rdJ5d8j1RCg&ab\" />\r\n\r\n<p style=\"text-align:center\">VRF v2 - Developer Walkthrough</p>\r\n\r\nIn this guide, you will learn about generating randomness on blockchains. This includes learning how to implement a Request and Receive cycle with Chainlink oracles and how to consume random numbers with Chainlink VRF in smart contracts.\r\n\r\n## How is randomness generated on blockchains? What is Chainlink VRF?\r\n\r\nRandomness is very difficult to generate on blockchains. This is because every node on the blockchain must come to the same conclusion and form a consensus. Even though random numbers are versatile and useful in a variety of blockchain applications, they cannot be generated natively in smart contracts. The solution to this issue is [**Chainlink VRF**](/vrf/v2/introduction/), also known as Chainlink Verifiable Random Function.\r\n\r\n## What is the Request and Receive cycle?\r\n\r\nThe [previous guide](/getting-started/consuming-data-feeds/) explained how to consume Chainlink Data Feeds, which consist of reference data posted on-chain by oracles. This data is stored in a contract and can be referenced by consumers until the oracle updates the data again.\r\n\r\nRandomness, on the other hand, cannot be reference data. If the result of randomness is stored on-chain, any actor could retrieve the value and predict the outcome. Instead, randomness must be requested from an oracle, which generates a number and a cryptographic proof. Then, the oracle returns that result to the contract that requested it. This sequence is known as the **[Request and Receive cycle](/architecture-overview/architecture-request-model/)**.\r\n\r\n## What is the payment process for generating a random number?\r\n\r\nVRF requests receive funding from subscription accounts. The [Subscription Manager](https://vrf.chain.link) lets you create an account and pre-pay for VRF requests, so that funding of all your application requests are managed in a single location.\r\nTo learn more about VRF requests funding, see [Subscriptions limits](/vrf/v2/subscription#subscription-limits).\r\n\r\n## How can I use Chainlink VRF?\r\n\r\nTo see a basic implementation of Chainlink VRF, see [Get a Random Number](/vrf/v2/subscription/examples/get-a-random-number/). In this section, you will create an application that uses Chainlink VRF to generate randomness. The contract used in this application will have a [_Game of Thrones_](https://en.wikipedia.org/wiki/Game_of_Thrones) theme.\r\n\r\nThe contract will request randomness from Chainlink VRF. The result of the randomness will transform into a number between 1 and 20, mimicking the rolling of a 20 sided die. Each number represents a _Game of Thrones_ house. If the dice land on the value 1, the user is assigned house Targaryan, 2 for Lannister, and so on. A full list of houses can be found [here](https://gameofthrones.fandom.com/wiki/Great_House).\r\n\r\nWhen rolling the dice, it will accept an `address` variable to track which address is assigned to each house.\r\n\r\nThe contract will have the following functions:\r\n\r\n- `rollDice`: This submits a randomness request to Chainlink VRF\r\n- `fulfillRandomWords`: The function that the Oracle uses to send the result back\r\n- `house`: To see the assigned house of an address\r\n\r\n**Note**: to jump straight to the entire implementation, you can [open the VRFD20.sol contract](https://remix.ethereum.org/#url=https://docs.chain.link/samples/VRF/VRFD20.sol) in remix.\r\n\r\n### Create and fund a subscription\r\n\r\nChainlink VRF requests receive funding from subscription accounts. The [Subscription Manager](https://vrf.chain.link) lets you create an account and pre-pay your use of Chainlink VRF requests.\r\nFor this example, create a new subscription on the Goerli testnet as explained [here](/vrf/v2/subscription/examples/get-a-random-number/#create-and-fund-a-subscription).\r\n\r\n### Importing `VRFConsumerBaseV2` and `VRFCoordinatorV2Interface`\r\n\r\nChainlink maintains a [library of contracts](https://github.com/smartcontractkit/chainlink/tree/master/contracts) that make consuming data from oracles easier. For Chainlink VRF, you will use:\r\n\r\n- [`VRFConsumerBaseV2`](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/VRFConsumerBaseV2.sol) that must be imported and extended from the contract that you create.\r\n- [`VRFCoordinatorV2Interface`](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol) that must be imported to communicate with the VRF coordinator.\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\r\n\r\ncontract VRFD20 is VRFConsumerBaseV2 {\r\n\r\n}\r\n```\r\n\r\n### Contract variables\r\n\r\nThis example is adapted for [Goerli testnet](/vrf/v2/subscription/supported-networks/#goerli-testnet) but you can change the configuration and make it run for any [supported network](/vrf/v2/subscription/supported-networks/#configurations).\r\n\r\n```solidity\r\nuint64 s_subscriptionId;\r\naddress vrfCoordinator = 0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D;\r\nbytes32 s_keyHash = 0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15;\r\nuint32 callbackGasLimit = 40000;\r\nuint16 requestConfirmations = 3;\r\nuint32 numWords =  1;\r\n```\r\n\r\n- `uint64 s_subscriptionId`: The subscription ID that this contract uses for funding requests. Initialized in the `constructor`.\r\n- `address vrfCoordinator`: The address of the Chainlink VRF Coordinator contract.\r\n- `bytes32 s_keyHash`: The gas lane key hash value, which is the maximum gas price you are willing to pay for a request in wei. It functions as an ID of the off-chain VRF job that runs in response to requests.\r\n- `uint32 callbackGasLimit`: The limit for how much gas to use for the callback request to your contract's `fulfillRandomWords` function. It must be less than the `maxGasLimit` on the coordinator contract. Adjust this value for larger requests depending on how your `fulfillRandomWords` function processes and stores the received random values. If your `callbackGasLimit` is not sufficient, the callback will fail and your subscription is still charged for the work done to generate your requested random values.\r\n- `uint16 requestConfirmations`: How many confirmations the Chainlink node should wait before responding. The longer the node waits, the more secure the random value is. It must be greater than the `minimumRequestBlockConfirmations` limit on the coordinator contract.\r\n- `uint32 numWords`: How many random values to request. If you can use several random values in a single callback, you can reduce the amount of gas that you spend per random value. In this example, each transaction requests one random value.\r\n\r\nTo keep track of addresses that roll the dice, the contract uses mappings. [Mappings](https://medium.com/upstate-interactive/mappings-in-solidity-explained-in-under-two-minutes-ecba88aff96e) are unique key-value pair data structures similar to hash tables in Java.\r\n\r\n```solidity\r\nmapping(uint256 => address) private s_rollers;\r\nmapping(address => uint256) private s_results;\r\n```\r\n\r\n- `s_rollers` stores a mapping between the `requestID` (returned when a request is made), and the address of the roller. This is so the contract can keep track of who to assign the result to when it comes back.\r\n- `s_results` stores the roller and the result of the dice roll.\r\n\r\n### Initializing the contract\r\n\r\nThe coordinator and subscription id must be initialized in the `constructor` of the contract. To use `VRFConsumerBaseV2` properly, you must also pass the VRF coordinator address into its constructor.\r\nThe address that creates the smart contract is the owner of the contract. the modifier `onlyOwner()` checks that only the owner is allowed to do some tasks.\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\r\n\r\ncontract VRFD20 is VRFConsumerBaseV2 {\r\n    // variables\r\n    // ...\r\n\r\n    // constructor\r\n    constructor(uint64 subscriptionId) VRFConsumerBaseV2(vrfCoordinator) {\r\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\r\n        s_owner = msg.sender;\r\n        s_subscriptionId = subscriptionId;\r\n    }\r\n\r\n    //...\r\n    modifier onlyOwner() {\r\n        require(msg.sender == s_owner);\r\n        _;\r\n    }\r\n}\r\n```\r\n\r\n### `rollDice` function\r\n\r\nThe `rollDice` function will complete the following tasks:\r\n\r\n1. Check if the roller has already rolled since each roller can only ever be assigned to a single house.\r\n1. Request randomness by calling the VRF coordinator.\r\n1. Store the `requestId` and roller address.\r\n1. Emit an event to signal that the dice is rolling.\r\n\r\nYou must add a `ROLL_IN_PROGRESS` constant to signify that the dice has been rolled but the result is not yet returned. Also add a `DiceRolled` event to the contract.\r\n\r\nOnly the owner of the contract can execute the `rollDice` function.\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\r\n\r\ncontract VRFD20 is VRFConsumerBaseV2 {\r\n    // variables\r\n    uint256 private constant ROLL_IN_PROGRESS = 42;\r\n    // ...\r\n\r\n    // events\r\n    event DiceRolled(uint256 indexed requestId, address indexed roller);\r\n    // ...\r\n\r\n    // ...\r\n    // { constructor }\r\n    // ...\r\n\r\n    // rollDice function\r\n    function rollDice(address roller) public onlyOwner returns (uint256 requestId) {\r\n        require(s_results[roller] == 0, \"Already rolled\");\r\n        // Will revert if subscription is not set and funded.\r\n        requestId = COORDINATOR.requestRandomWords(\r\n        s_keyHash,\r\n        s_subscriptionId,\r\n        requestConfirmations,\r\n        callbackGasLimit,\r\n        numWords\r\n       );\r\n\r\n        s_rollers[requestId] = roller;\r\n        s_results[roller] = ROLL_IN_PROGRESS;\r\n        emit DiceRolled(requestId, roller);\r\n    }\r\n}\r\n```\r\n\r\n### `fulfillRandomWords` function\r\n\r\n`fulfillRandomWords` is a special function defined within the `VRFConsumerBaseV2` contract that our contract extends from. The coordinator sends the result of our generated `randomWords` back to `fulfillRandomWords`. You will implement some functionality here to deal with the result:\r\n\r\n1. Change the result to a number between 1 and 20 inclusively. Note that `randomWords` is an array that could contain several random values. In this example, request 1 random value.\r\n1. Assign the transformed value to the address in the `s_results` mapping variable.\r\n1. Emit a `DiceLanded` event.\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\r\n\r\ncontract VRFD20 is VRFConsumerBaseV2 {\r\n    // ...\r\n    // { variables }\r\n    // ...\r\n\r\n    // events\r\n    // ...\r\n    event DiceLanded(uint256 indexed requestId, uint256 indexed result);\r\n\r\n    // ...\r\n    // { constructor }\r\n    // ...\r\n\r\n    // ...\r\n    // { rollDice function }\r\n    // ...\r\n\r\n    // fulfillRandomWords function\r\n    function fulfillRandomWords(uint256 requestId , uint256[] memory randomWords) internal override {\r\n\r\n        // transform the result to a number between 1 and 20 inclusively\r\n        uint256 d20Value = (randomWords[0] % 20) + 1;\r\n\r\n        // assign the transformed value to the address in the s_results mapping variable\r\n        s_results[s_rollers[requestId]] = d20Value;\r\n\r\n        // emitting event to signal that dice landed\r\n        emit DiceLanded(requestId, d20Value);\r\n    }\r\n}\r\n```\r\n\r\n### `house` function\r\n\r\nFinally, the `house` function returns the house of an address.\r\n\r\nTo have a list of the house's names, create the `getHouseName` function that is called in the `house` function.\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\r\n\r\ncontract VRFD20 is VRFConsumerBaseV2 {\r\n    // ...\r\n    // { variables }\r\n    // ...\r\n\r\n    // ...\r\n    // { events }\r\n    // ...\r\n\r\n    // ...\r\n    // { constructor }\r\n    // ...\r\n\r\n    // ...\r\n    // { rollDice function }\r\n    // ...\r\n\r\n    // ...\r\n    // { fulfillRandomWords function }\r\n    // ...\r\n\r\n    // house function\r\n    function house(address player) public view returns (string memory) {\r\n        // dice has not yet been rolled to this address\r\n        require(s_results[player] != 0, \"Dice not rolled\");\r\n\r\n        // not waiting for the result of a thrown dice\r\n        require(s_results[player] != ROLL_IN_PROGRESS, \"Roll in progress\");\r\n\r\n        // returns the house name from the name list function\r\n        return getHouseName(s_results[player]);\r\n    }\r\n\r\n    // getHouseName function\r\n    function getHouseName(uint256 id) private pure returns (string memory) {\r\n        // array storing the list of house's names\r\n        string[20] memory houseNames = [\r\n            \"Targaryen\",\r\n            \"Lannister\",\r\n            \"Stark\",\r\n            \"Tyrell\",\r\n            \"Baratheon\",\r\n            \"Martell\",\r\n            \"Tully\",\r\n            \"Bolton\",\r\n            \"Greyjoy\",\r\n            \"Arryn\",\r\n            \"Frey\",\r\n            \"Mormont\",\r\n            \"Tarley\",\r\n            \"Dayne\",\r\n            \"Umber\",\r\n            \"Valeryon\",\r\n            \"Manderly\",\r\n            \"Clegane\",\r\n            \"Glover\",\r\n            \"Karstark\"\r\n        ];\r\n\r\n        // returns the house name given an index\r\n        return houseNames[id.sub(1)];\r\n    }\r\n}\r\n```\r\n\r\n<div class=\"remix-callout\">\r\n  <a href=\"https://remix.ethereum.org/#url=https://docs.chain.link/samples/VRF/VRFD20.sol\" target=\"_blank\" >Open in Remix</a>\r\n  <a href=\"/getting-started/conceptual-overview/#what-is-remix\" >What is Remix?</a>\r\n</div>\r\n\r\nYou have now completed all necessary functions to generate randomness and assign the user a _Game of Thrones_ house. We've added a few helper functions in there to make using the contract easier and more flexible. You can deploy and interact with the complete contract in Remix.\r\n\r\n## How do I deploy to testnet?\r\n\r\nYou will now deploy your completed contract. This deployment is slightly different than the example in the [Deploy Your First Contract](/getting-started/deploy-your-first-contract/) guide. In our case, you will have to pass in parameters to the constructor upon deployment.\r\n\r\nOnce compiled, you'll see a dropdown menu that looks like this in the deploy pane:\r\n\r\n![Remix contract selected](/files/intermediates-tutorial-01.png)\r\n\r\nSelect the `VRFD20` contract or the name that you gave to your contract. You will deploy this contract on the Goerli test network.\r\n\r\nClick the caret arrow on the right hand side of **Deploy** to expand the parameter fields, and paste your subscription id.\r\n\r\n![Remix contract parameters to deploy](/files/intermediates-tutorial-02.png)\r\n\r\nThen click the `Deploy` button and use your Metamask account to confirm the transaction.\r\n\r\n**Note**: You should [have some Goerli ETH](/getting-started/deploy-your-first-contract/#install-and-fund-your-metamask-wallet) in your Metamask account to pay for the GAS.\r\n\r\n:::note[ Address, Key Hashes and more]\r\nFor a full reference of the addresses, key hashes and fees for each network, see [VRF Supported Networks](/vrf/v2/subscription/supported-networks/#configurations).\r\n:::\r\n\r\nAt this point, your contract should be successfully deployed. However, it can't request anything because it is not yet approved to use the LINK balance in your subscription. If you click `rollDice`, the transaction will revert.\r\n\r\n## How do I add my contract to my subscription account?\r\n\r\nAfter you deploy your contract, you must add it as an approved consumer contract so it can use the subscription balance when requesting for randomness. Go to the [Subscription Manager](https://vrf.chain.link) and add your deployed contract address to the list of consumers. Find your contract address in Remix under **Deployed Contracts** on the bottom left.\r\n\r\n![Remix contract address](/files/intermediates-tutorial-03.png)\r\n\r\n## How do I test `rollDice`?\r\n\r\nAfter you open the deployed contract tab in the bottom left, the function buttons are available. Find `rollDice` and click the caret to expand the parameter fields. Enter an Ethereum address to specify a \"dice roller\", and click 'rollDice'.\r\n\r\nYou will have to wait a few minutes for your transaction to confirm and the response to be sent back. You can get your house by clicking the `house` function button with the address passed in `rollDice`. After the response is sent back, you'll be assigned a _Game of Thrones_ house!\r\n\r\n## Further Reading\r\n\r\nTo read more about generating random numbers in Solidity, read our blog posts:\r\n\r\n- [35+ Blockchain RNG Use Cases Enabled by Chainlink VRF](https://blog.chain.link/blockchain-rng-use-cases-enabled-by-chainlink-vrf/)\r\n- [How to Build Dynamic NFTs on Polygon](https://blog.chain.link/how-to-build-dynamic-nfts-on-polygon/)\r\n- [Chainlink VRF v2 Now Live on Ethereum Mainnet](https://blog.chain.link/vrf-v2-mainnet-launch/)\r\n"
    },
    {
      "title": "Learning Resources",
      "headings": [
        {
          "depth": 2,
          "slug": "smart-contract-learning-materials",
          "text": "Smart contract learning materials"
        },
        {
          "depth": 3,
          "slug": "video-tutorials",
          "text": "Video tutorials"
        },
        {
          "depth": 3,
          "slug": "applications",
          "text": "Applications"
        },
        {
          "depth": 4,
          "slug": "data-feeds",
          "text": "Data feeds"
        },
        {
          "depth": 4,
          "slug": "randomness-vrf",
          "text": "Randomness (VRF)"
        },
        {
          "depth": 4,
          "slug": "api-requests",
          "text": "API requests"
        },
        {
          "depth": 4,
          "slug": "automation-keepers",
          "text": "Automation (Keepers)"
        },
        {
          "depth": 3,
          "slug": "game-resources",
          "text": "Game resources"
        },
        {
          "depth": 3,
          "slug": "coding-bootcamps",
          "text": "Coding bootcamps"
        },
        {
          "depth": 3,
          "slug": "starter-kits",
          "text": "Starter kits"
        },
        {
          "depth": 3,
          "slug": "external-tutorials",
          "text": "External tutorials"
        },
        {
          "depth": 3,
          "slug": "more-inspiration",
          "text": "More inspiration"
        },
        {
          "depth": 2,
          "slug": "outreach",
          "text": "Outreach"
        },
        {
          "depth": 3,
          "slug": "get-support",
          "text": "Get support"
        },
        {
          "depth": 3,
          "slug": "join-the-community",
          "text": "Join the community"
        }
      ],
      "url": "/getting-started/other-tutorials",
      "section": "gettingStarted",
      "content": "\r\nWelcome to the Resources page. This is a list of links and pages that you might need to help you throughout your learning journey. If you're new to Chainlink, start with the [Getting Started](/getting-started/conceptual-overview/) guide to better understand the products and services Chainlink offers. This page contains more resources, inspiration, and outreach information to further your learning.\r\n\r\n## Smart contract learning materials\r\n\r\nVideos, tutorials, examples, and bootcamps are a great way to get experience building smart contracts and using Chainlink products. The following learning materials are useful for expanding your knowledge.\r\n\r\n### Video tutorials\r\n\r\nWe're constantly uploading new videos to our [YouTube](https://www.youtube.com/c/chainlink) channel. Here are some direct links to playlists that may be helpful if you're starting your Chainlink learning journey or if you're looking for interesting ways to apply Chainlink to your project:\r\n\r\n- [Two-Minute Explainers](https://www.youtube.com/playlist?list=PLVP9aGDn-X0Q3qBME3T9sBMw66xPsglMA)\r\n- [Chainlink Developer Workshops](https://www.youtube.com/playlist?list=PLVP9aGDn-X0SPHromvpiGvoNDpH7YErmf)\r\n- [Chainlink Engineering Tutorials](https://www.youtube.com/playlist?list=PLVP9aGDn-X0QwJVbQvuKr-zrh2_DV5M6J)\r\n- [Solidity, Blockchain, and Smart Contract Python Course](https://www.youtube.com/watch?v=M576WGiDBdQ)\r\n- [Chainlink Engineering YouTube](https://www.youtube.com/playlist?list=PLVP9aGDn-X0QwJVbQvuKr-zrh2_DV5M6J)\r\n- [Dapp University](https://www.youtube.com/watch?v=YLmMNocc1ys)\r\n- [Austin Griffith](https://www.youtube.com/watch?v=ffU96UhlA0A)\r\n- [Patrick Collins](https://www.youtube.com/watch?v=p36tXHX1JD8)\r\n- [Nader Dabit](https://www.youtube.com/watch?v=nS9xP1hxg3w)\r\n\r\n### Applications\r\n\r\nBelow is a list of applications of Chainlink's products and services sorted by difficulty and type to help you navigate and search for projects that you might find interesting. See the [Chainlink Blog](https://blog.chain.link/) to stay up to date with new ways to use Chainlink.\r\n\r\n#### Data feeds\r\n\r\n| Name                                                                                                                                              | Type     | Difficulty |\r\n| :------------------------------------------------------------------------------------------------------------------------------------------------ | :------- | :--------- |\r\n| [How to Calculate Price Volatility for DeFi Variance Swaps](https://blog.chain.link/how-to-calculate-price-volatility-for-defi-variance-swaps/)   | DeFi     | Advanced   |\r\n| [Build a dApp on Gnosis Chain (xDai) with Secure Data Feeds](https://blog.chain.link/build-a-dapp-on-xdai-chain-with-secure-data-feeds/)          | DeFi     | Medium     |\r\n| [Craft Whiskey Crypto Payments With Chainlink Oracles](https://blog.chain.link/craft-whiskey-crypto-payments-with-chainlink-oracles/)             | Payments | Advanced   |\r\n| [Convert a Vending Machine to Accept Cryptocurrency Payments Using Chainlink Data Feeds](https://blog.chain.link/cryptocurrency-vending-machine/) | Payments | Advanced   |\r\n| [Build a dApp on BNB Chain With Secure Data Feeds](https://blog.chain.link/build-a-dapp-on-binance-smart-chain-with-secure-data-feeds/)           | DeFi     | Medium     |\r\n| [How to Use Chainlink With Hardhat](https://blog.chain.link/using-chainlink-with-hardhat/)                                                        | DeFi     | Medium     |\r\n| [Develop a DeFi Project Using Python](https://blog.chain.link/develop-python-defi-project/)                                                       | DeFi     | Medium     |\r\n| [Build a DeFi Call Option Exchange With Chainlink Data Feeds](https://blog.chain.link/defi-call-option-exchange-in-solidity/)                     | DeFi     | Advanced   |\r\n| [Build a DeFi Yield Farming dApp Using Chainlink Data Feeds](https://blog.chain.link/build-defi-yield-farming-application-with-chainlink/)        | DeFi     | Advanced   |\r\n| [Build and Deploy an Avalanche Smart Contract](https://blog.chain.link/how-to-build-and-deploy-an-avalanche-smart-contract/)                      | DeFi     | Beginner   |\r\n\r\n#### Randomness (VRF)\r\n\r\n| Name                                                                                                                | Type     | Difficulty |\r\n| :------------------------------------------------------------------------------------------------------------------ | :------- | :--------- |\r\n| [How to Get a Random Number on Polygon](https://blog.chain.link/how-to-get-a-random-number-on-polygon/)             | DeFi     | Medium     |\r\n| [Build Your Own Dynamic NFT With Hardhat](https://blog.chain.link/dynamic-nft-hardhat/)                             | NFT      | Advanced   |\r\n| [Build, Deploy, and Sell Your Own Dynamic NFT](https://blog.chain.link/build-deploy-and-sell-your-own-dynamic-nft/) | NFT      | Advanced   |\r\n| [How to Build a Blockchain Lottery](https://blog.chain.link/how-to-build-a-blockchain-lottery-2/)                   | Gambling | Advanced   |\r\n\r\n#### API requests\r\n\r\n| Name                                                                                                                                                           | Type                 | Difficulty |\r\n| -------------------------------------------------------------------------------------------------------------------------------------------------------------- | :------------------- | :--------- |\r\n| [Build a Real Estate dApp With Chainlink Oracles](https://blog.chain.link/build-a-real-estate-dapp-with-chainlink-oracles/)                                    | Real-Estate          | Medium     |\r\n| [Off-Chain Computation: Statistical Analysis With Chainlink](https://blog.chain.link/off-chain-computation-statistical-analysis-with-chainlink/)               | Statistical Analysis | Advanced   |\r\n| [Blockchain Fintech Tutorial: Lending and Borrowing With Python](https://blog.chain.link/blockchain-fintech-defi-tutorial-lending-borrowing-python/)           | Lending              | Medium     |\r\n| [Build a Blockchain-Based Fantasy Sports Game Using a Chainlink External Adapter](https://blog.chain.link/blockchain-based-fantasy-sports-game)                | Sports               | Medium     |\r\n| [Fetch IPFS Data in Smart Contracts Using a Chainlink External Adapter](https://blog.chain.link/fetch-ipfs-api-data-token-distribution/)                       | Audius               | Medium     |\r\n| [How to Connect a Two-Factor Authentication (2FA) API to a Smart Contract With Chainlink](https://blog.chain.link/2fa-authentication-smart-contracts/)         | Security             | Medium     |\r\n| [Build a Marine Insurance Smart Contract With Chainlink](https://blog.chain.link/build-a-marine-insurance-smart-contract-with-chainlink/)                      | Insurance            | Medium     |\r\n| [How to Build a Parametric Insurance Smart Contract](https://blog.chain.link/parametric-insurance-smart-contract/)                                             | Insurance            | Advanced   |\r\n| [Connect a Smart Contract to the Twitter API](https://blog.chain.link/connect-smart-contract-to-twitter-api/)                                                  | Social Media         | Advanced   |\r\n| [Build an RFID Blockchain Integration With Chainlink External Adapters](https://blog.chain.link/rfid-blockchain-integration-with-chainlink-external-adapters/) | Identification       | Advanced   |\r\n| [How to Connect a Tesla Vehicle API to a Smart Contract Via a Chainlink External Adapter](https://blog.chain.link/create-tesla-smart-contract-rental/)         | Transportation       | Advanced   |\r\n| [OAuth and API Authentication in Smart Contracts](https://blog.chain.link/oauth-and-api-authentication-in-smart-contracts-2/)                                  | Security             | Advanced   |\r\n\r\n#### Automation (Keepers)\r\n\r\n| Name                                                                                                                                                                                                | Type       | Difficulty |\r\n| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :--------- | :--------- |\r\n| [Smart Contract Automation Master Class Module #1](https://youtu.be/D3rMFshrj7c)                                                                                                                    | Automation | Beginner   |\r\n| [Smart Contract Automation Master Class Module #2](https://youtu.be/UT2qpUh0tmA/)                                                                                                                   | Automation | Beginner   |\r\n| [Entropyfi Saves Engineering Hours with Chainlink Keepers](https://medium.com/entropyfi/entropyfi-saves-engineering-hours-with-chainlink-keepers-6ec172a76249)                                      | Gaming     | Medium     |\r\n| [Enabling Limit Orders on CivTrade With Chainlink Keepers](https://news.civfund.org/civtrade-with-chainlink-keepers-8b6c3965a92e)                                                                   | Trading    | Medium     |\r\n| [Pickle Finance UniV3 Jars Powered by Chainlink Keepers](https://picklefinance.medium.com/pickle-finance-univ3-jars-powered-by-chainlink-keepers-8ce1756a2497)                                      | Finance    | Medium     |\r\n| [JamonSwap Introduces New Limit Order Functionality Using Chainlink Keepers](https://medium.com/@JamonSwap/jamonswap-introduces-new-limit-order-functionality-using-chainlink-keepers-51bd94d75feb) | DeFi       | Medium     |\r\n| [How Cratos used Chainlink Keepers to automate the token vesting process](https://cratostoken.medium.com/how-cratos-used-chainlink-keepers-to-automate-the-token-vesting-process-69bcb3611161)      | DeFi       | Medium     |\r\n| [Enabling automated NFT lotteries with Chainlink Keepers and VRF](https://czodiac.medium.com/enabling-automated-nft-lotteries-with-chainlink-keepers-and-vrf-34dcc191965b)                          | NFT        | Medium     |\r\n| [How ApeSwap Integrated Chainlink Keepers for BANANA Maximizer Vaults](https://ape-swap.medium.com/how-apeswap-integrated-chainlink-keepers-for-banana-maximizer-vaults-2e88abb34eca)               | DeFi       | Medium     |\r\n\r\n### Game resources\r\n\r\n- [CryptoZombies](https://cryptozombies.io/)\r\n- [DamnVulnerableDefi](https://damnvulnerabledefi.xyz/challenges/8.html)\r\n- [Ethernaut](https://ethernaut.openzeppelin.com/)\r\n\r\n### Coding bootcamps\r\n\r\n- [ChainShot](https://www.chainshot.com/courses)\r\n- [Consensys Bootcamp](https://consensys.net/academy/bootcamp/)\r\n- [Ivan On Tech](https://academy.moralis.io/courses/chainlink-101)\r\n\r\n### Starter kits\r\n\r\nOur Starter Kits help jumpstart your full-stack development process. You can get starter kits for Brownie (Python), Truffle (Javascript), and Hardhat (Javascript). See the [Engineering Tutorials](https://www.youtube.com/playlist?list=PLVP9aGDn-X0QwJVbQvuKr-zrh2_DV5M6J) playlist to learn more about each kit and how to use them.\r\n\r\n- [Chainlink Brownie Starter Kit (Python)](https://github.com/smartcontractkit/chainlink-mix)\r\n- [Chainlink Truffle Starter Kit (Javascript)](https://github.com/smartcontractkit/truffle-starter-kit)\r\n- [Chainlink Hardhat Starter Kit (Javascript)](https://github.com/smartcontractkit/hardhat-starter-kit)\r\n\r\n### External tutorials\r\n\r\n- [Ethereum Developers](https://ethereum.org/en/developers/tutorials/)\r\n- [useWeb3](https://www.useweb3.xyz/)\r\n\r\n### More inspiration\r\n\r\nLooking for more ways to use Chainlink? Here are some resources that discuss Chainlink's use cases as well as the winning projects we've had in our previous hackathons. There is also a link to the Marketplace where you can find the latest data provider nodes and explore the network.\r\n\r\n- [77 Use Cases by Chainlink](https://blog.chain.link/44-ways-to-enhance-your-smart-contract-with-chainlink/)\r\n- [Past Hackathon Winning Projects](/resources/example-projects/)\r\n\r\n## Outreach\r\n\r\nThe Chainlink community is an inviting group of engineers that is always looking to help users expand their knowledge on Chainlink and solve related issues. Refer back to the [Getting Help](/resources/getting-help/) page for the latest information about how to get support.\r\n\r\n### Get support\r\n\r\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/chainlink)\r\n- [Stack Exchange Ethereum](https://ethereum.stackexchange.com/questions/tagged/chainlink)\r\n- [Hackathon Discord](https://discord.gg/h3AvTHj)\r\n- [Developer Discord](https://discord.gg/2YHSAey)\r\n\r\n### Join the community\r\n\r\n- [Twitter](https://mobile.twitter.com/chainlink)\r\n- [Reddit](https://www.reddit.com/r/Chainlink/)\r\n- [Telegram](https://t.me/chainlinkofficial)\r\n- [Blog](https://blog.chain.link)\r\n"
    },
    {
      "title": "Acquire testnet LINK",
      "headings": [
        {
          "depth": 2,
          "slug": "configure-metamask-to-use-link-tokens",
          "text": "Configure MetaMask to use LINK tokens"
        },
        {
          "depth": 2,
          "slug": "get-testnet-link-from-a-faucet",
          "text": "Get testnet LINK from a faucet"
        }
      ],
      "url": "/resources/acquire-link",
      "section": "ethereum",
      "content": "\r\nThe Getting Started guides show you how to send ETH on the Goerli testnet, but some contracts might require you to use LINK token instead. This page shows you how to obtain testnet LINK and send it to your MetaMask wallet.\r\n\r\n## Configure MetaMask to use LINK tokens\r\n\r\nTo see your LINK token balance in MetaMask, you must manually add the token.\r\n\r\n1. Open up MetaMask.\r\n1. At the bottom of the MetaMask windows, click **Import tokens**.\r\n1. Find the LINK token contract address for the network that you want to use. On Goerli the LINK token address is: `0x326C977E6efc84E512bB9C30f76E30c160eD06FB`. See the [LINK Token Contracts](/resources/link-token-contracts/) page to find addresses for different testnets.\r\n1. Paste the token contract address into MetaMask in the Token Address input. The token symbol and decimals of precision will auto-populate.\r\n   ![Metamask Custom Tokens Screen](/images/getting-started/metamaskImportTokens.webp)\r\n1. Click **Next**. A new window will appears, showing the LINK token details.\r\n1. Click **Import Tokens** to confirm adding the new token.\r\n\r\nMetaMask should now display the new LINK token balance.\r\n\r\n## Get testnet LINK from a faucet\r\n\r\n1. Go to [https://faucets.chain.link/](https://faucets.chain.link/).\r\n1. In Metmask, select the network where you want to receive testnet LINK.\r\n1. Click **Connect wallet** so the faucet app can detect the network and wallet address.\r\n1. If you want to receive testnet funds at a different address, paste it in the **Wallet address** section. This field defaults to your connected wallet address.\r\n1. In the **Request type** section, select the testnet funds that you want to receive.\r\n1. Complete the Captcha and click **Send request**. The funds are transferred from the faucet to the wallet address that you specified.\r\n\r\nAfter the transaction is confirmed on-chain, the faucet app shows \"Request complete\" and the transaction hash of your request.\r\n\r\n![Successful Faucet Request Message](/files/faucet-success.png)\r\n"
    },
    {
      "title": "Contributing to Chainlink",
      "headings": [
        {
          "depth": 1,
          "slug": "what-it-means-to-contribute",
          "text": "What It Means to Contribute"
        },
        {
          "depth": 1,
          "slug": "why-should-you-contribute",
          "text": "Why Should You Contribute"
        },
        {
          "depth": 1,
          "slug": "ways-to-contribute",
          "text": "Ways to Contribute"
        },
        {
          "depth": 2,
          "slug": "contributing-to-software-and-tooling",
          "text": "Contributing to Software and Tooling"
        },
        {
          "depth": 3,
          "slug": "raising-an-issue",
          "text": "Raising an Issue"
        },
        {
          "depth": 3,
          "slug": "requesting-a-new-feature",
          "text": "Requesting a new Feature"
        },
        {
          "depth": 4,
          "slug": "voting-on-new-features",
          "text": "Voting on new features"
        },
        {
          "depth": 3,
          "slug": "submitting-a-pull-request",
          "text": "Submitting a Pull Request"
        },
        {
          "depth": 2,
          "slug": "contributing-to-the-documentation",
          "text": "Contributing to the documentation"
        },
        {
          "depth": 2,
          "slug": "creating-community-content",
          "text": "Creating Community Content"
        },
        {
          "depth": 2,
          "slug": "becoming-a-developer-expert",
          "text": "Becoming a Developer Expert"
        },
        {
          "depth": 2,
          "slug": "joining-the-chainlink-community-advocate-program",
          "text": "Joining the Chainlink Community Advocate program"
        },
        {
          "depth": 2,
          "slug": "running-a-chainlink-focused-developer-bootcamp",
          "text": "Running a Chainlink Focused Developer Bootcamp"
        },
        {
          "depth": 2,
          "slug": "running-an-in-person-meetup-or-watch-party",
          "text": "Running an In-Person Meetup or Watch Party"
        },
        {
          "depth": 2,
          "slug": "participate-in-a-hackathon",
          "text": "Participate in a Hackathon"
        },
        {
          "depth": 2,
          "slug": "applying-for-a-grant",
          "text": "Applying for a Grant"
        }
      ],
      "url": "/resources/contributing-to-chainlink",
      "section": "ethereum",
      "content": "\r\nChainlink is an open-source project licensed [under the MIT license](https://github.com/smartcontractkit/chainlink/blob/master/LICENSE), and we encourage contributions from all developers and community members.\r\n\r\n<YouTube id=\"https://www.youtube.com/watch?v=nerpcSPN4kE\" />\r\n\r\n# What It Means to Contribute\r\n\r\nWhen you contribute to the Chainlink project, you as a developer or community member contribute your time and effort to help improve and grow Chainlink. Your contribution can be from various methods:\r\n\r\n- [Building and maintaining the Chainlink software and tools](#contributing-to-software-and-tooling)\r\n- [Improving and maintaining the documentation, including translations into other languages](#contributing-to-the-documentation)\r\n- [Creating Chainlink focused content (blog posts, tutorials, videos etc)](#creating-community-content)\r\n- [Becoming a developer expert](#becoming-a-developer-expert)\r\n- [Becoming a community advocate](#joining-the-chainlink-community-advocate-program)\r\n- [Running a Chainlink focused developer Bootcamp (in person or online)](#running-a-chainlink-focused-developer-bootcamp)\r\n- [Running an in-person meetup or watch party](#running-an-in-person-meetup-or-watch-party)\r\n- [Participate in a hackathon](#participate-in-a-hackathon)\r\n- [Applying for a grant](#applying-for-a-grant)\r\n\r\n# Why Should You Contribute\r\n\r\n[Open source software](https://en.wikipedia.org/wiki/Open-source_software) is a model that brings multiple benefits for both the project and the contributors. As a developer or community member, contributing to Chainlink helps you to gain valuable skills and experience, improve the software that you use, and grow your personal brand in the community which can lead to future employment opportunities. On top of these awesome things, contributing to open source is fun. It can give you a sense of community involvement, and gives you a personal sense of satisfaction knowing that you're part of an effort to build something that will enable a fairer, more transparent, and efficient new world.\r\n\r\n# Ways to Contribute\r\n\r\n## Contributing to Software and Tooling\r\n\r\nThe most direct way you can contribute to Chainlink is to contribute to the core code or the various tooling found in our [GitHub repository](https://github.com/smartcontractkit/). Contributing to code or code-based tools can generally be split into a few different categories:\r\n\r\n- Raising an issue\r\n- Requesting a new feature\r\n- Submitting a Pull Request (PR) for a fix, improvement, or new tool\r\n\r\n### Raising an Issue\r\n\r\nDuring the course of using Chainlink software or tools, you might encounter errors or unexpected behavior that leads you to believe the software isn't behaving correctly. You can bring this to the attention of the Chainlink Labs team as well as the wider developer community by raising an issue in the project’s GitHub repository. The 'Issues' tab lists all of the open issues for the repository.\r\n\r\nAfter an issue is raised and tagged, the Chainlink Labs team and the wider community can address it. This gives the issue the visibility required for someone to investigate it and resolve the issue.\r\n\r\nWhen you first create an issue, you must also categorize it. This prefixes the issue name to give viewers an indication of what category the issue relates to:\r\n\r\n- [NODE]: The issue relates to the core node software\r\n- [DEVEL]: The issue is a result of working on code found in the current repository\r\n- [FEAT]: The issue relates to a new feature request\r\n- [SMRT]: The issue related to using Chainlink smart contracts\r\n- [EXPL]: The issue related to using the Chainlink Explorer\r\n- [FAUC]: The issue related to using the Chainlink Faucet\r\n\r\n![Selecting the new issue category](/files/new-issue-category.png)\r\n\r\nAfter you select a category, enter the details for the issue. Include as much detail about the issue as possible. Provide a thorough description, environment, and software version details. Also provide detailed steps that describe how to reproduce the issue. The more thorough you make your description, the better the chances are that someone will be able to pick up the issue and resolve it.\r\n\r\nOnce a team member acknowledges that the issue has been received, they will tag it with an appropriate label. You should then monitor the state of the open issue for any questions or updates.\r\n\r\n### Requesting a new Feature\r\n\r\nHave you thought of an improvement or an awesome new feature that you think should be implemented into Chainlink? Request a new feature to bring it to the attention of the team and the wider community. You can request new features by creating a new GitHub issue in the correct repository and tagging that issue with the [FEAT] prefix (Feature request). The process for doing this is covered in the [Raising an Issue](#raising-an-issue) section. Provide as much detail as possible in your feature request, including any benefits, risks, or considerations that you can think of.\r\n\r\n#### Voting on new features\r\n\r\nSometimes a new feature is put to a vote to decide if it's something that the team and wider community should implement. When an feature is put to a vote, the issue is tagged with the 'needs votes' label. You can contribute to the voting process by reacting to the first post in the feature request with a thumbs up or thumbs down emoji. This will help drive the decision. You can also contribute your thoughts by replying directly to the feature request with a new post in the thread.\r\n\r\n![Voting on a new feature request](/files/voting-issue.png)\r\n\r\n### Submitting a Pull Request\r\n\r\nThe best way to contribute to Chainlink is to submit a [pull request (PR)](https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests). PRs can be submitted for various reasons, such as fixing an identified issue, adding a feature or improvement to the project, or even adding an entirely new repository to the Chainlink source code for a new tool or feature. If you're looking for something to pick up and create a PR for, you can search through the Chainlink repositories to find open issues, and approved feature requests.\r\n\r\nIf you're new to contributing to open-source software or Chainlink, we've tagged some [good first issues](https://github.com/smartcontractkit/chainlink/issues?q=is%3Aissue+label%3A%22good+first+issue%22) against the main node software and smart contracts that you can tackle. Each major repository in the Chainlink GitHub should also have some good first issues tagged for developers to be able to take on.\r\n\r\nAll code changes must follow the [style guide] (https://github.com/smartcontractkit/chainlink/wiki/Code-Style-Guide), All PRs must be in an appropriately named branch with a format like 'feat/feature-description' or 'devel/issue-description'. After you submit a PR, you should get a response by a team member within a day or two acknowledging that the PR has been received. After that, monitor the PR for any additional questions or updates that come up while the team and the community review the changes.\r\n\r\n## Contributing to the documentation\r\n\r\nThe [Chainlink documentation](https://docs.chain.link/) is the go-to place for developers who want to learn how to build applications using Chainlink, and node operators wanting useful information on running a Chainlink node. The documentation is [open source](https://github.com/smartcontractkit/documentation), allowing for other developers and community members to contribute to adding or improving it. You can contribute to the Chainlink documentation in various ways:\r\n\r\n- Improving the readability of pages\r\n- Fixing typos or grammar errors\r\n- Adding new guides or tutorials that you would find useful\r\n- Translating the documentation into other languages\r\n\r\nThe process for contributing to the documentation follows the process defined earlier in the [Submitting a Pull Request](#submitting-a-pull-request) section. Each page also has a 'Suggest Edits' link on the top right, and will directly take you to the page in the [documentation repository](https://github.com/smartcontractkit/documentation), where you can create a new PR with the suggested changes. Before you create a PR for the documentation, read the [contributing guidelines](https://github.com/smartcontractkit/documentation/blob/main/CONTRIBUTING.md).\r\n\r\nIf you want to translate the documentation into a new language that is not yet supported, feel free to [reach out to the team](mailto:devrel@smartcontract.com) beforehand, so we can make sure you get the support you need.\r\n\r\n## Creating Community Content\r\n\r\nChainlink has a strong and vibrant community of developers and community advocates. Community members often create Chainlink-focused content in various forms and publish it for the wider community on various platforms. This increases knowledge and awareness of Chainlink solutions across the wider community and builds the contributor's personal skills and brand in the community.\r\n\r\nSome examples of the content generated from the community:\r\n\r\n- Document your experience in using Chainlink as part of your project\r\n- Do a deep dive blog post or video on a Chainlink solution\r\n- Write up technical tutorials showcasing Chainlink being used in various use cases\r\n\r\n## Becoming a Developer Expert\r\n\r\nChainlink Developer Experts are smart contract and blockchain developers with deep experience building applications using Chainlink. They are passionate about sharing their technical knowledge with the world. As a developer expert, you will receive recognition in the community, previews of new Chainlink features, exclusive access to Chainlink events, and opportunities to level up your technical and soft skills. You can apply to become a developer expert on the [Chainlink Developer Experts page](https://chain.link/developers/experts).\r\n\r\n## Joining the Chainlink Community Advocate program\r\n\r\nThe [Chainlink Community Advocate Program](https://blog.chain.link/expanding-the-chainlink-community-advocate-program/) is a program designed to help accelerate the awareness and adoption of Chainlink. Chainlink community advocates are passionate members of the Chainlink community that help to achieve this by running virtual and in-person meetups, connecting with partners and sponsors, creating content, and working directly with the teams that are making Chainlink-powered smart contracts. Many Advocates have gone on to have rewarding careers in the blockchain industry, and some of them work on Chainlink specifically.\r\n\r\nTo become a community advocate, you can apply via the [community advocates web page](https://chain.link/community/advocates).\r\n\r\n## Running a Chainlink Focused Developer Bootcamp\r\n\r\nIn June 2021, Chainlink [virtually hosted](https://blog.chain.link/smart-contract-developer-bootcamp-on-demand/) the first [Chainlink Developer Bootcamp](http://chain.link/bootcamp). If you're passionate about educating others about smart contracts and Chainlink, you can contribute by running your own developer Bootcamp. You can also contribute by translating an existing Bootcamp and running it in another language. Before you run your own Bootcamp, [reach out to the team](mailto:devrel@smartcontract.com) so we can make sure you have the support that you need.\r\n\r\n## Running an In-Person Meetup or Watch Party\r\n\r\nIf you're passionate about helping to grow the awareness and adoption of Chainlink, you can contribute by running an in-person meetup or watch party for a Chainlink event such as [SmartCon](https://www.smartcontractsummit.io/). Meetups are a great way to meet others also passionate about how hybrid smart contracts can create an economically fair world.\r\n\r\nIf you're interested in running an in-person meetup or watch party, [reach out to the team](mailto:community@smartcontract.com) so we can make sure you have the support that you need.\r\n\r\n## Participate in a Hackathon\r\n\r\nChainlink runs hackathons multiple times per year and often sponsors other hackathons across the blockchain ecosystem. Participating in a hackathon that Chainlink is a part of is a great way to learn how to use Chainlink. It is also a great way to showcase your skills to the Chainlink team and the wider community. Hackathons are a popular place for recruiting talent into the blockchain ecosystem.\r\n\r\nTo stay up to date on the hackathons that Chainlink is running or sponsoring, keep an eye out on the official Chainlink social media channels, and sign up for our [developer newsletter](/resources/developer-communications/).\r\n\r\n## Applying for a Grant\r\n\r\nThe [Chainlink grant program](https://chain.link/community/grants) encourages the community to create critical developer tooling, add high-quality data, and the launch key services around the Chainlink Network. Grant categories include community, integration, bug bounty, research, and social impact grants. If you have a great idea that fits into one of these categories, you can apply for a grant. If successful, you will receive the funding and support needed to successfully build and implement your idea.\r\n\r\nFor more information about the grant program, go to the [Chainlink Grants web page](https://chain.link/community/grants).\r\n"
    },
    {
      "title": "Install Frameworks",
      "headings": [
        {
          "depth": 1,
          "slug": "install-into-existing-projects",
          "text": "Install into Existing Projects"
        },
        {
          "depth": 2,
          "slug": "npm",
          "text": "NPM"
        },
        {
          "depth": 2,
          "slug": "yarn",
          "text": "Yarn"
        },
        {
          "depth": 1,
          "slug": "create-a-new-project",
          "text": "Create a New Project"
        },
        {
          "depth": 2,
          "slug": "hardhat-starter-kit",
          "text": "Hardhat Starter Kit"
        },
        {
          "depth": 2,
          "slug": "brownie-starter-kit",
          "text": "Brownie Starter Kit"
        },
        {
          "depth": 2,
          "slug": "truffle-starter-kit",
          "text": "Truffle Starter Kit"
        },
        {
          "depth": 2,
          "slug": "dapptools-starter-kit",
          "text": "DappTools Starter Kit"
        },
        {
          "depth": 2,
          "slug": "foundry-starter-kit",
          "text": "Foundry Starter Kit"
        },
        {
          "depth": 1,
          "slug": "using-chainlink-contracts",
          "text": "Using Chainlink Contracts"
        },
        {
          "depth": 1,
          "slug": "testing-chainlink-contracts",
          "text": "Testing Chainlink Contracts"
        }
      ],
      "url": "/resources/create-a-chainlinked-project",
      "section": "ethereum",
      "content": "\r\n![Starter Kits Logos](/files/c6e99c5-Untitled_design_23.png)\r\n\r\nThis page explains how to install and use the [Chainlink Library](/any-api/api-reference/) in your projects, either manually or via the user of the Chainlink Starter Kits.\r\n\r\n:::note[ Important]\r\n\r\nIf you're new to smart contract development and want a step-by-step guide, try out our [Getting Started](/getting-started/conceptual-overview/) guide.\r\n\r\n:::\r\n\r\n# Install into Existing Projects\r\n\r\nChainlink is supported by [Hardhat](http://hardhat.org), [Brownie](https://eth-brownie.readthedocs.io/en/stable), [Truffle](https://www.trufflesuite.com) and other frameworks.\r\n\r\nIf you already have a project, you can add Chainlink to it by using the following package managers.\r\n\r\n## NPM\r\n\r\nInstall using [NPM](https://www.npmjs.com/):\r\n\r\n```shell npm\r\nnpm install @chainlink/contracts --save\r\n```\r\n\r\n## Yarn\r\n\r\nInstall using [Yarn](https://yarnpkg.com/):\r\n\r\n```shell yarn\r\nyarn add @chainlink/contracts\r\n```\r\n\r\n# Create a New Project\r\n\r\nIf you're creating a new project from scratch, these commands will help you set up your project to interact with Chainlink tools and features via the use of our Starter Kits.\r\n\r\n## Hardhat Starter Kit\r\n\r\nTo learn more about Hardhat, see the [Hardhat Documentation](https://hardhat.org/getting-started/).\r\n\r\nClone the starter kit. The starter kit includes Hardhat, so you don't need to install it separately.\r\n\r\n```shell\r\ngit clone https://github.com/smartcontractkit/hardhat-starter-kit\r\ncd hardhat-starter-kit\r\n```\r\n\r\nFor instructions on how to use the starter kit, refer to the [Hardhat starter kit README](https://github.com/smartcontractkit/hardhat-starter-kit/blob/main/README.md).\r\n\r\nFor more details on how to use Chainlink with Hardhat, see our blog post about [How to use Hardhat with Chainlink](https://blog.chain.link/using-chainlink-with-hardhat/).\r\n\r\n---\r\n\r\n## Brownie Starter Kit\r\n\r\nBefore you begin, [install Brownie](https://eth-brownie.readthedocs.io/en/stable/install.html).\r\n\r\nWith Brownie installed, run the commands below to open a Brownie project in a new directory.\r\n\r\n```shell\r\nmkdir MyChainlinkProject\r\ncd MyChainlinkProject/\r\nbrownie bake chainlink-mix\r\ncd chainlink-mix\r\n```\r\n\r\nFor instructions on how to use the starter kit, refer to the [Brownie starter kit README](https://github.com/smartcontractkit/chainlink-mix/blob/master/README.md).\r\n\r\nFor more details on how to use Chainlink with Brownie, see the [Develop a DeFi Project Using Python](https://blog.chain.link/develop-python-defi-project/) blog post.\r\n\r\n---\r\n\r\n## Truffle Starter Kit\r\n\r\nBefore you begin, [install Truffle with NPM](https://www.trufflesuite.com/truffle):\r\n\r\n```shell\r\nnpm install truffle -g\r\n```\r\n\r\nOnce installed, unbox the Truffle Starter Kit:\r\n\r\n```shell Truffle\r\nmkdir MyChainlinkProject\r\ncd MyChainlinkProject/\r\ntruffle unbox smartcontractkit/truffle-starter-kit\r\n```\r\n\r\nFor instructions on how to use the starter kit, refer to the [Truffle starter kit README](https://github.com/smartcontractkit/truffle-starter-kit/blob/master/README.md).\r\n\r\nFor more details on how to use Chainlink with Truffle, see our blog post about [Using Truffle to interact with Chainlink Smart Contracts](https://www.trufflesuite.com/blog/using-truffle-to-interact-with-chainlink-smart-contracts).\r\n\r\n---\r\n\r\n## DappTools Starter Kit\r\n\r\nTo learn more about DappTools, refer to the [DappTools Documentation](https://dapp.tools/).\r\n\r\n1. Install Dapp tools using the [Installation instructions](https://github.com/dapphub/dapptools#installation) in the Dapp tools GitHub repository.\r\n\r\n1. After you install the tools, clone the starter kit and install the dependencies:\r\n\r\n   ```shell\r\n   git clone https://github.com/smartcontractkit/dapptools-starter-kit\r\n   cd dapptools-starter-kit\r\n   make # This installs the project's dependencies.\r\n   ```\r\n\r\nFor instructions on how to use the starter kit, refer to the DappTools starter kit [README](https://github.com/smartcontractkit/dapptools-starter-kit#readme).\r\n\r\nFor more details on how to use Chainlink with DappTools, see the [How To Use DappTools](https://blog.chain.link/how-to-use-dapptools/) blog post.\r\n\r\n---\r\n\r\n## Foundry Starter Kit\r\n\r\nTo learn more about Foundry, refer to the [Foundry Documentation](https://onbjerg.github.io/foundry-book/).\r\n\r\n1. Install Foundry using the [Installation instructions](https://onbjerg.github.io/foundry-book/getting-started/installation.html) on GitHub.io.\r\n\r\n1. After you install Foundry, clone the starter kit and install the project dependencies:\r\n\r\n   ```shell\r\n   git clone https://github.com/smartcontractkit/foundry-starter-kit\r\n   cd foundry-starter-kit\r\n   make # This installs the project's dependencies.\r\n   ```\r\n\r\nFor instructions on how to use the starter kit, refer to the [Foundry starter kit README](https://github.com/smartcontractkit/foundry-starter-kit#readme).\r\n\r\n---\r\n\r\n# Using Chainlink Contracts\r\n\r\nOnce you have the Chainlink library installed, you can leverage the Chainlink ecosystem.\r\n\r\nIf you're interested in retrieving up to date crypto prices in your contracts, learn more about our [Data Feeds](/data-feeds/).\r\n\r\nIf you need to consume randomness in your contracts, learn about [Chainlink VRF](/vrf/v2/introduction/).\r\n\r\nAnd if you want your contracts to retrieve data from off-chain APIs, learn about [Using Any API](/any-api/introduction/).\r\n\r\n# Testing Chainlink Contracts\r\n\r\nSee our blog post on [Testing Chainlink Smart Contracts](https://blog.chain.link/testing-chainlink-smart-contracts/) or watch the [Chainlink Hackathon Workshop](https://www.youtube.com/watch?v=d8SqLaH8pu0).\r\n\r\nTests samples can be found on [Hardhat Starter Kit](https://github.com/smartcontractkit/hardhat-starter-kit/tree/main/test) and [Truffle Starter Kit](https://github.com/smartcontractkit/truffle-starter-kit/tree/master/test) respectively.\r\n"
    },
    {
      "title": "Developer Communications",
      "headings": [],
      "url": "/resources/developer-communications",
      "section": "ethereum",
      "description": "We are committed to communicating these changes with you in advance. This page will provide information on our current communication channels and detail active notifications / upgrade plans with timelines.",
      "content": "\r\nThe Chainlink Developer mailing list is the best place to stay up to date on\r\n\r\n- Releases\r\n- Package Updates\r\n- New Features\r\n- Breaking Changes\r\n- Events\r\n- Connecting with other developers\r\n\r\n<DeveloperCommunicationsCallout />\r\n"
    },
    {
      "title": "Example Projects",
      "headings": [
        {
          "depth": 1,
          "slug": "hackathons",
          "text": "Hackathons"
        },
        {
          "depth": 2,
          "slug": "hackathon-tutorials",
          "text": "Hackathon Tutorials"
        },
        {
          "depth": 2,
          "slug": "chainlink-spring-2021-hackathon",
          "text": "Chainlink Spring 2021 Hackathon"
        },
        {
          "depth": 2,
          "slug": "eth-globals-ethonline-2020",
          "text": "ETH Global’s ETHOnline 2020"
        },
        {
          "depth": 2,
          "slug": "chainlink-hackathon-2020",
          "text": "Chainlink Hackathon 2020"
        },
        {
          "depth": 2,
          "slug": "ethglobal-hack-money",
          "text": "ETHGlobal Hack Money"
        },
        {
          "depth": 2,
          "slug": "ethdenver-2020",
          "text": "ETHDenver 2020"
        },
        {
          "depth": 2,
          "slug": "chainlink-virtual-hackathon-2019",
          "text": "Chainlink Virtual Hackathon 2019"
        },
        {
          "depth": 2,
          "slug": "ethberlin-2019",
          "text": "ETHBerlin 2019"
        },
        {
          "depth": 2,
          "slug": "ethnewyork-2019",
          "text": "ETHNewYork 2019"
        },
        {
          "depth": 2,
          "slug": "ethparis-2019",
          "text": "ETHParis 2019"
        },
        {
          "depth": 2,
          "slug": "ethdenver-2019",
          "text": "ETHDenver 2019"
        }
      ],
      "url": "/resources/example-projects",
      "section": "ethereum",
      "content": "\r\n# Hackathons\r\n\r\nThe following is a list of selected hackathon projects utilizing Chainlinked contracts.\r\n\r\n## Hackathon Tutorials\r\n\r\nFurther exploration into how some of the hackathon winners developed their entries.\r\n\r\n| Name                     | Description                                      | Tutorial                                                                                    |\r\n| :----------------------- | :----------------------------------------------- | :------------------------------------------------------------------------------------------ |\r\n| **Link My Ride**         | A decentralized Tesla rental platform.           | [Go](https://blog.chain.link/create-tesla-smart-contract-rental/)                           |\r\n| **Open Library Project** | A library platform for borrowing books on-chain. | [Go](https://blog.chain.link/rfid-blockchain-integration-with-chainlink-external-adapters/) |\r\n| **Marine Insurance**     | Parametric insurance for the marine industry.    | [Go](https://blog.chain.link/build-a-marine-insurance-smart-contract-with-chainlink/)       |\r\n| **Fruity Market**        | Vending machine cryptocurrency payments.         | [Go](https://blog.chain.link/cryptocurrency-vending-machine/)                               |\r\n| **Whiskey MarketMaker**  | Craft whiskey crypto payments.                   | [Go](https://blog.chain.link/craft-whiskey-crypto-payments-with-chainlink-oracles/)         |\r\n| **Digital Bridge**       | Two factor authentication for smart contracts.   | [Go](https://blog.chain.link/2fa-authentication-smart-contracts/)                           |\r\n| **Iroiro**               | Fetch IPFS Data in Smart Contracts.              | [Go](https://blog.chain.link/fetch-ipfs-api-data-token-distribution/)                       |\r\n\r\n## Chainlink Spring 2021 Hackathon\r\n\r\nThe [Chainlink Spring 2021 Hackathon](https://chain.link/hackathon/spring-2021), read our [blog here!](https://blog.chain.link/congratulations-to-the-spring-2021-chainlink-virtual-hackathon-winners/)\r\n\r\n| Name                               | Description                       | GitHub                                                                            |\r\n| :--------------------------------- | :-------------------------------- | :-------------------------------------------------------------------------------- |\r\n| **deBridge**<br />🥇               | Cross-chain defi primative        | [Go](https://github.com/debridge-finance)                                         |\r\n| **Vulcan Exchange**<br />🥇        | Weather derivatives defi platform | [Go](https://github.com/Vulcan-Exchange?ref=block123)                             |\r\n| **DeFi Lending Insurance**<br />🥇 | DeFi Lending Insurance            | [Go](https://github.com/chainlink-hackathon2021-insurance/DeFi-Lending-Insurance) |\r\n| **Fract**<br />🥇                  | Dynamic NFT no-code UI creator    |                                                                                   |\r\n\r\n## ETH Global's ETHOnline 2020\r\n\r\nThe [ETH Online](https://ethglobal.online/), read our [blog here!](https://blog.chain.link/ethonline-2020-chainlink-hackathon-winners/)\r\n\r\n| Name                  | Description                                         | GitHub                                                   |\r\n| :-------------------- | :-------------------------------------------------- | :------------------------------------------------------- |\r\n| **Iroiro**<br />🥇    | Decentralized Creators Support Platform.            | [Go](https://github.com/TART-tokyo/iroiro)               |\r\n| **Overlay**<br />🥇   | Long/Short data stream derivatives.                 | [Go](https://github.com/overlay-market/overlay-protocol) |\r\n| **Rupia**<br />🥇     | An Indian Rupee (INR) Stablecoin Derivative.        | [Go](https://github.com/vijayengineer/rupia)             |\r\n| **SecretPay**<br />🥇 | Buy ETH Privately From PayPal and Revolut.          | [Go](https://github.com/franono/ethglobal)               |\r\n| **Unipeer**<br />🥇   | Fiat to Ethereum On-Ramp Using an Open Banking API. | [Go](https://github.com/unipeer/unipeer)                 |\r\n\r\n## Chainlink Hackathon 2020\r\n\r\nThe [Chainlink Hackathon](https://chain.link/hackathon/2020), read our [blog here!](https://blog.chain.link/congratulations-to-the-winners-of-the-chainlink-virtual-hackathon-2020/)\r\n\r\n| Name                             | Description                                           | GitHub                                                    |\r\n| :------------------------------- | :---------------------------------------------------- | :-------------------------------------------------------- |\r\n| **Link My Ride**<br />🥇         | A decentralized Tesla rental platform.                | [Go](https://github.com/pappas999/Link-My-Ride)           |\r\n| **Farm Together**<br />🥇        | A farming game where you can earn real yield in defi. | [Go](https://github.com/johhonn/realyield.farm-contracts) |\r\n| **Open Library Project**<br />🥇 | A library platform for borrowing books on-chain.      | [Go](https://github.com/amoghaddassi/open-library)        |\r\n\r\n## ETHGlobal Hack Money\r\n\r\nThe [Hack Money hackathon](https://ethglobal.online/), read our [blog here!](https://blog.chain.link/showcasing-the-winners-of-the-2020-hackmoney-virtual-hackathon/)\r\n\r\n| Name                   | Description                                                          | GitHub                                              |\r\n| :--------------------- | :------------------------------------------------------------------- | :-------------------------------------------------- |\r\n| **Genie**<br />🥇      | A no-loss betting platform for gamers.                               | [Go](https://github.com/genie-platform)             |\r\n| **DefiDollar**<br />🥈 | DefiDollar (DUSD) is a stablecoin backed by Curve Finance LP tokens. | [Go](https://github.com/defidollar/defidollar-core) |\r\n| **CandyShop**<br />🥉  | Lottery based arbitrage.                                             | [Go](https://github.com/itsthecandyshop/)           |\r\n\r\n## ETHDenver 2020\r\n\r\nRead our [blog post here](https://blog.chain.link/showcasing-the-winning-projects-from-the-ethdenver-2020-hackathon/).\r\n\r\n| Name                          | Description                                                                                    | GitHub                                                          |\r\n| :---------------------------- | :--------------------------------------------------------------------------------------------- | :-------------------------------------------------------------- |\r\n| **InsuraLink**<br />🥇        | Data-driven insurance agreements that use Chainlink oracles to bridge IoT and smart contracts. | [Go](https://github.com/mycelium-ethereum/insuralink-contracts) |\r\n| **1x.ag**<br />🥈             | Build leveraged trade positions across different lending platforms.                            | [Go](https://github.com/1x-ag/solidity-contracts)               |\r\n| **We Watch in Public Spaces** | Tracking system for calculating event attendance.                                              | [Go](https://github.com/iainnash/ethdenver-we-watch-in-public)  |\r\n\r\n## Chainlink Virtual Hackathon 2019\r\n\r\nRead our [blog post here](https://blog.chain.link/winners-of-the-chainlink-virtual-hackathon/).\r\n\r\n| Name                          | Description                                                                                    | GitHub                                                                                  |\r\n| :---------------------------- | :--------------------------------------------------------------------------------------------- | :-------------------------------------------------------------------------------------- |\r\n| **LinkPal**<br />🥇           | A smart contract uses Chainlink oracles to confirm that the PayPal invoice has been paid.      | [Go](https://github.com/vvoluom/LinkPal)                                                |\r\n| **Cerebus Wallet**<br />🥈    | Two-factor authorization for crypto transactions using phone push notifications.               | [Go](https://github.com/MikaelLazarev/cerberus)                                         |\r\n| **Flyt**<br />🥉              | Flight insurance.                                                                              | [Go](https://github.com/robin-thomas/flyt)                                              |\r\n| **Link Total Return Swap**    | A Defi platform which enables Chainlink Node Operators to hedge against LINK price volatility. | [Go](https://github.com/mycelium-ethereum/LinkTRS)                                      |\r\n| **Smart Marketing Campaigns** | Use Google Analytics data to make payments to marketing agencies.                              | [Go](https://coinlist.co/build/chainlink/projects/6106f616-f9d8-4fec-85d7-c9f98bf8bd9e) |\r\n| **Steam Trader**              | Trustless trading of digital items.                                                            | [Go](https://github.com/brent-riva/Steam-Trader)                                        |\r\n| **Contractor**                | Constructor of smart contracts.                                                                | [Go](https://github.com/alekcangp/ChainLinkContractor)                                  |\r\n| **Fiat Gateway**              | Crypto Fiat Gateway on Ethereum using Chainlink Oracles                                        | [Go](https://github.com/chatch/fiat-gateway)                                            |\r\n| **The Anti-Social Challenge** | Incentivize people to reduce their usage of social platforms.                                  | [Go](https://github.com/raphpap/smart-inactivity-agreement)                             |\r\n\r\n## ETHBerlin 2019\r\n\r\nRead our [blog post here](https://blog.chain.link/showcasing-the-winners-of-the-etherlin-zwei-hackathon/).\r\n\r\n| Name                               | Description                                             | GitHub                                               |\r\n| :--------------------------------- | :------------------------------------------------------ | :--------------------------------------------------- |\r\n| **Chainlink \\u2661 Augur**<br />🥇 | Create derivatives based on the valuations of startups. | [Go](https://github.com/jasperdg/flux-ethberlinzwei) |\r\n| **VollgasDAO**<br />🥈             | Gas futures.                                            | [Go](https://devpost.com/software/vollgas-futures)   |\r\n| **Etherflare**<br />🥉             | Reward white hat hackers.                               | [Go](https://github.com/EtherFlareGraph/etherflare)  |\r\n\r\n## ETHNewYork 2019\r\n\r\nRead our [blog post here](https://blog.chain.link/showcasing-the-winning-projects-from-the-ethnewyork-hackathon/).\r\n\r\n| Name                           | Description                                                     | GitHub                                                        |\r\n| :----------------------------- | :-------------------------------------------------------------- | :------------------------------------------------------------ |\r\n| **French Toast Kitty**<br />🥇 | Interact with your Cryptokitty using real-world data.           | [Go](https://github.com/frenchtoastkitty/contracts)           |\r\n| **Blocksolid**                 | Donations that pay for Internet services in developing regions. | [Go](https://github.com/unicef-isp-manager/eth-new-york-2019) |\r\n\r\n## ETHParis 2019\r\n\r\nRead our [blog post here](https://blog.chain.link/the-winning-projects-from-ethparis-hackathon/).\r\n\r\n| Name                 | Description                                                               | GitHub                                               |\r\n| :------------------- | :------------------------------------------------------------------------ | :--------------------------------------------------- |\r\n| **Nanti**<br />🥇    | Issue and use corporate bonds as collateral for instant payment channels. | [Go](https://github.com/cryptotuxorg/nanti-dapp)     |\r\n| **SmartKek**<br />🥈 | Burn tokens to leave comments.                                            | [Go](https://github.com/smartkek/ETHParis-graveyard) |\r\n\r\n## ETHDenver 2019\r\n\r\nRead our [blog post here](https://blog.chain.link/detailing-the-winning-chainlink-projects-from-ethdenver-hackathon/).\r\n\r\n| Name                    | Description                                                                   | GitHub                                             |\r\n| :---------------------- | :---------------------------------------------------------------------------- | :------------------------------------------------- |\r\n| **EventLINK**<br />🥇   | Crowdfund events using Twitter APIs, smart contracts, and staking mechanisms. | [Go](https://github.com/ConnorMaloney/EventLink)   |\r\n| **Grand Fondo**<br />🥈 | Decentralized athletic competitions using Strava.                             | [Go](https://github.com/tokensoft/gran-fondo)      |\r\n| **Smart Piggies**       | Peer-to-peer global derivatives market.                                       | [Go](https://github.com/smartpiggies/smartpiggies) |\r\n"
    },
    {
      "title": "Fund Your Contracts",
      "headings": [
        {
          "depth": 2,
          "slug": "retrieve-the-contract-address",
          "text": "Retrieve the contract address"
        },
        {
          "depth": 2,
          "slug": "send-funds-to-your-contract",
          "text": "Send funds to your contract"
        }
      ],
      "url": "/resources/fund-your-contract",
      "section": "ethereum",
      "content": "\r\nSome smart contracts require funding at their addresses so they can operate without you having to call functions manually and pay for the transactions through MetaMask. This guide explains how to fund Solidity contracts with LINK or ETH.\r\n\r\n## Retrieve the contract address\r\n\r\n1. In Remix, deploy your contract and wait until you see a new contract in the **Deployed Contracts** section.\r\n1. On the left side panel, use the **Copy** button located near the contract title to copy the contract address to your clipboard.\r\n\r\n![Remix Copy Deployed Contract Address](/files/25d2c8e-Screen_Shot_2020-09-08_at_7.15.50_AM.png)\r\n\r\n## Send funds to your contract\r\n\r\n1. Open MetaMask.\r\n1. Select the network that you want to send funds on. For example, select the Goerli testnet.\r\n1. Click the **Send** button to initiate a transaction.\r\n1. Paste your contract address in the address field.\r\n1. In the **Asset** drop down menu, select the type of asset that you need to send to your contract. For example, you can send LINK. If LINK is not listed, follow the guide to [Acquire testnet LINK](/resources/acquire-link/).\r\n1. In the **Amount** field, enter the amount of LINK that you want to send.\r\n1. Click **Next** to review the transaction details and the Gas cost.\r\n1. If the transaction details are correct, click **Confirm** and wait for the transaction to process.\r\n\r\n![Metamask Send Link Screen](/files/867073d-metamask.png)\r\n\r\n:::caution[ Transaction fee didn't update?]\r\n\r\n You may need to click **Fastest**, **Fast**, **Slow**, or **Advanced Options** after entering the **Amount** to update the gas limit for the token transfer to be successful.\r\n\r\n:::\r\n"
    },
    {
      "title": "Getting Help",
      "headings": [
        {
          "depth": 2,
          "slug": "where-do-i-go-to-get-help-and-support",
          "text": "Where do I go to get help and support?"
        },
        {
          "depth": 2,
          "slug": "1-double-check-the-documentation",
          "text": "1. Double check the documentation"
        },
        {
          "depth": 2,
          "slug": "2-do-a-web-search-for-the-specific-error-or-situation-youre-in",
          "text": "2. Do a web search for the specific error or situation you’re in"
        },
        {
          "depth": 2,
          "slug": "3-open-an-issue-on-github-or-the-code-repository",
          "text": "3. Open an issue on GitHub or the code repository"
        },
        {
          "depth": 2,
          "slug": "4-ask-a-question-on-stack-overflow-or-stack-exchange-ethereum",
          "text": "4. Ask a question on Stack Overflow or Stack Exchange Ethereum"
        },
        {
          "depth": 2,
          "slug": "5-ask-the-community",
          "text": "5. Ask the community"
        }
      ],
      "url": "/resources/getting-help",
      "section": "ethereum",
      "content": "\r\n## Where do I go to get help and support?\r\n\r\nIf you run into issues and the available documentation, videos, and code repositories are not able to assist you, the best way to get help is to follow the support escalation process in this document. Sometimes you might have a question that is too theoretical or hasn't been solved, so you might not always get what you're looking for!\r\n\r\n## 1. Double check the documentation\r\n\r\nCheck to see if you missed any code, documentation, blog, or video on the topic or issue you're looking for. There are typically a few different resources on a topic if one doesn't answer exactly what you're looking for. You can also use the documentation search bar to look up things as well.\r\n\r\n## 2. Do a web search for the specific error or situation you're in\r\n\r\nOften someone else has asked the same question that you're asking. If you copy and paste the error into the Google or web search bar, there is a good chance that you will find some helpful material from someone else who has already found the solution to your question.\r\n\r\n## 3. Open an issue on GitHub or the code repository\r\n\r\nThis is only applicable if you're working with a certain set of code. For example, if you're having an issue working with the [Chainlink Hardhat Starter kit](https://github.com/smartcontractkit/hardhat-starter-kit), open an issue on the repo explaining exactly what's going on and someone might have the answer that you need.\r\n\r\nWhen writing issues, remember to:\r\n\r\n- Keep titles short\r\n- Be clear and concise about the issue that you are encountering\r\n- Format your issue description. Use [three backticks (```)](https://www.freecodecamp.org/news/how-to-format-code-in-markdown/#code-blocks) to format your code or log output.\r\n- Always add any and all associated code\r\n- Don't use screenshots. Screenshots are not searchable and generally make it harder to understand your issue.\r\n\r\n## 4. Ask a question on [Stack Overflow](https://stackoverflow.com/questions/ask?tags=chainlink) or [Stack Exchange Ethereum](https://ethereum.stackexchange.com/)\r\n\r\nThis is where most people will end up and is one of the most helpful resources out there. Stack Overflow is living documentation, so do your best to make a [thoughtful and easy to triage question](https://stackoverflow.com/help/how-to-ask). This will make it much easier for people to help debug your issue and ensure it doesn't get removed from the site. Remember, we want to make this question **searchable** so others who run into the same issue can also get their question solved. You could use any forum-based site you like if you prefer another site over Stack Overflow.\r\n\r\nHere is an example of a poorly formatted question:\r\n\r\n:::note\r\n\r\nTitle: Please help\r\n\r\nI'm following this guide, and my code is breaking, what's going on?\r\n\r\nhttps://docs.chain.link/\r\n\r\nHere is my code\r\n\r\n```\r\npragma solidity 0.6.7; contract HelloWorld { string public message; constructor(string memory initialMessage) {message = initialMessage; }`\r\n```\r\n\r\n:::\r\n\r\nHere is that same question with better formatting:\r\n\r\n:::note\r\nTitle: Remix Solidity Compile Error - Source File Requires Different Compiler Version\r\n\r\nI'm [following this guide](/getting-started/deploy-your-first-contract/), and I'm unable to compile my solidity code in [Remix](https://remix.ethereum.org/).\r\n\r\nHere is the code:\r\n\r\n```javascript\r\npragma solidity 0.6.7;\r\n\r\ncontract HelloWorld {\r\n   string public message;\r\n\r\n   constructor(string memory initialMessage) {\r\n       message = initialMessage;\r\n   }\r\n\r\n   function updateMessage(string memory newMessage) public {\r\n       message = newMessage;\r\n   }\r\n}\r\n```\r\n\r\nAnd the error I'm getting is as follows:\r\n\r\n```\r\nParserError: Source file requires different compiler version (current compiler is 0.8.7+commit.e28d00a7.Emscripten.clang) - note that nightly builds are considered to be strictly less than the released version\r\n--> contracts/test.sol:1:1:\r\n|\r\n1 | pragma solidity 0.6.7;\r\n| ^^^^^^^^^^^^^^^^^^^^^^\r\n\r\n```\r\n\r\n:::\r\n\r\nIt's best to create a [minimum reproducible example](https://stackoverflow.com/help/minimal-reproducible-example) to help others understand your issue. This way, they can help you get an answer quickly. Remember, its a community-run platform!\r\n\r\nDon't get discouraged if your question gets downvoted or removed. This just means you need to format your question a little differently next time!\r\n\r\n## 5. Ask the community\r\n\r\nAnd lastly, you can always ask the question in the [Discord](https://discord.gg/2YHSAey) and see if there is a community member who might be able to help you out. One of the best ways to ask the community is to drop a link to your Stack Overflow question, issue, or the forum where you're asking a Chainlink question. Remember, these are community members, and they are helping because they are wonderful and kind individuals!\r\n\r\nFor important updates regarding the use of Chainlink Price Feeds, users should join the official Chainlink Discord and subscribe to the data-feeds-user-notifications channel: https://discord.gg/Dqy5N9UbsR\r\n"
    },
    {
      "title": "Glossary",
      "headings": [
        {
          "depth": 3,
          "slug": "adapter",
          "text": "Adapter"
        },
        {
          "depth": 3,
          "slug": "answer",
          "text": "Answer"
        },
        {
          "depth": 3,
          "slug": "bridge",
          "text": "Bridge"
        },
        {
          "depth": 3,
          "slug": "consumer-contract",
          "text": "Consumer (Contract)"
        },
        {
          "depth": 3,
          "slug": "encumbrance-parameters",
          "text": "Encumbrance Parameters"
        },
        {
          "depth": 3,
          "slug": "external-adapter",
          "text": "External Adapter"
        },
        {
          "depth": 3,
          "slug": "function-selector",
          "text": "Function Selector"
        },
        {
          "depth": 3,
          "slug": "initiator",
          "text": "Initiator"
        },
        {
          "depth": 3,
          "slug": "job",
          "text": "Job"
        },
        {
          "depth": 3,
          "slug": "job-run",
          "text": "Job Run"
        },
        {
          "depth": 3,
          "slug": "jobid",
          "text": "JobID"
        },
        {
          "depth": 3,
          "slug": "job-spec",
          "text": "Job Spec"
        },
        {
          "depth": 3,
          "slug": "oracle",
          "text": "Oracle"
        },
        {
          "depth": 3,
          "slug": "oracle-contract",
          "text": "Oracle Contract"
        },
        {
          "depth": 3,
          "slug": "oracle-node",
          "text": "Oracle Node"
        },
        {
          "depth": 3,
          "slug": "phase",
          "text": "Phase"
        },
        {
          "depth": 3,
          "slug": "requester",
          "text": "Requester"
        },
        {
          "depth": 3,
          "slug": "run-result",
          "text": "Run Result"
        },
        {
          "depth": 3,
          "slug": "run-status",
          "text": "Run Status"
        },
        {
          "depth": 3,
          "slug": "said",
          "text": "SAID"
        },
        {
          "depth": 3,
          "slug": "service-agreement",
          "text": "Service Agreement"
        },
        {
          "depth": 3,
          "slug": "spec",
          "text": "Spec"
        },
        {
          "depth": 3,
          "slug": "task",
          "text": "Task"
        },
        {
          "depth": 3,
          "slug": "task-spec",
          "text": "Task Spec"
        },
        {
          "depth": 3,
          "slug": "task-run",
          "text": "Task Run"
        }
      ],
      "url": "/resources/glossary",
      "section": "ethereum",
      "content": "\r\n### Adapter\r\n\r\n:::danger[ The adapters or JSON adapters for v1 Jobs are removed for Chainlink nodes running version 1.0.0 and later. Use [v2 job tasks](/chainlink-nodes/oracle-jobs/task-types/tasks/) instead.]\r\n\r\n:::\r\n\r\nAn adapter or [task](#task) is a piece of software responsible for executing a specific piece of functionality. A Chainlink node comes with a number of Adapters built-in, commonly known as Core Adapters, but can also be extended via [Bridges](/chainlink-nodes/external-adapters/node-operators/) to connect with user-defined [External Adapters](#external-adapter).\r\n\r\n### Answer\r\n\r\nThe result produced from an oracle service, after all safety checks and aggregations have been performed.\r\n\r\n### Bridge\r\n\r\nBridge is the connection between a Chainlink node and an [External Adapter](#external-adapter). The External Adapter runs as a separate [service](https://en.wikipedia.org/wiki/Service-oriented_architecture), and a Bridge facilitates communication between the node and one of these adapters.\r\n\r\nIf you would like to add a new External Adapter to your node, you create a new Bridge either in the GUI or the CLI. Within the Chainlink node, a bridge must have a unique name, but can share the same URL with other bridges. You can also set a different number of default confirmations for each bridge, and an additional payment amount. Once the bridge is added to the node, its name can then be used as a task type in [Jobs](/chainlink-nodes/oracle-jobs/jobs/).\r\n\r\n### Consumer (Contract)\r\n\r\nRecipient of an [Answer](#answer) provided by an [Oracle](#oracle). The Consumer is commonly a contract, and is also commonly the same [entity that requested the Answer](#requester), but does not have to be. We have a helper function, ` addExternalRequest`, that gives consuming contracts the ability to safely check answers it receives without requesting them itself.\r\n\r\n### Encumbrance Parameters\r\n\r\nEncumbrance parameters are the part of a [service agreement](#service-agreement) that can be enforced on-chain. Information on encumbrance parameters can be found <a href=\"https://github.com/smartcontractkit/chainlink/wiki/Service-Agreements-and-the-Coordinator-Contract\" target=\"_blank\">on our Wiki</a>.\r\n\r\n### External Adapter\r\n\r\n[External adapters](https://github.com/smartcontractkit/chainlink/wiki/External-Adapters) are what make Chainlink easily extensible, providing simple integration of custom computations and specialized APIs.\r\n\r\nA Chainlink node communicates with external adapters by sending a POST request with a JSON data payload. More information can be found on the external adapter [page](/chainlink-nodes/external-adapters/external-adapters).\r\n\r\n### Function Selector\r\n\r\nA [function selector](https://docs.soliditylang.org/en/develop/abi-spec.html#function-selector) specifies the function to be called in Ethereum. It is the first four bytes of the call data for a function call in an Ethereum transaction. Solidity contracts have a built-in helper method to access the function selector by using `this.myFunction.selector`, where `myFunction` is a non-overloaded function in the contract.\r\n\r\n### Initiator\r\n\r\n:::danger[ The initiators for v1 Jobs are removed for Chainlink nodes running version 1.0.0 and later. Use the [v2 job types](/chainlink-nodes/oracle-jobs/jobs/) instead.]\r\n\r\n:::\r\n\r\nTriggers the execution of a [Job Spec](#job-spec).\r\n\r\n### Job\r\n\r\nShort-hand for a [Job Spec](#job-spec).\r\n\r\n### Job Run\r\n\r\nThe Job Run is the artifact documenting the outcome of executing a [Job](#job). The Job Run is made up of a [Task](#task) and a [Run Result](#run-result) representing the ultimate outcome of the Job Run.\r\n\r\n### JobID\r\n\r\nThe ID associated to a given [Job Spec](#job-spec). This will be unique per-node, even with the same contents within the spec itself.\r\n\r\n### Job Spec\r\n\r\nThe [Job Specification](/chainlink-nodes/oracle-jobs/jobs/) is the specification of a piece of work to be completed by an Oracle Node. The Job Spec is made up of two main parts:\r\n\r\n- The [Task Type](/chainlink-nodes/oracle-jobs/jobs#shared-fields) or the [External Initiator](/chainlink-nodes/external-initiators/external-initiators-introduction/): Defines the ways a Job can be triggered to execute.\r\n- The [Task list](#task-spec): The `tasks` that specify all of the computation steps to perform when executing a Job Spec. The Task list is sometimes referred to as the [Job Pipeline](/chainlink-nodes/oracle-jobs/task-types/pipelines) because all of the Tasks' operations are performed in order, with the result being fed into the next task.\r\n\r\n### Oracle\r\n\r\nEntity which connects computations on blockchains with off-chain resources. Typically made up of two components: the [Oracle Node](#oracle-node) (off-chain) and the [Oracle Contract](#oracle-contract) (on-chain).\r\n\r\n### Oracle Contract\r\n\r\nThe on-chain component of an [Oracle](#oracle). The Oracle Contract is the interface through which [Consuming Contracts](#consumer-contract) pass and receive data with off-chain resources.\r\n\r\n### Oracle Node\r\n\r\nThe off-chain component of an [Oracle](#oracle).\r\n\r\n### Phase\r\n\r\nFor data feeds, a phase indicates the underlying aggregator implementation has been updated. Phases are relevant only for the EACAggregatorProxys. You can think of a roundId on the proxies as a large number containing data for two numbers (phaseId + roundId). The roundId is pulled from the aggregator's implementation and combined by bit shifting with the latest phaseId of the proxy.\r\n\r\n### Requester\r\n\r\nA Smart Contract or Externally Owned Account which requests data from an [Oracle](#oracle). The Requester does not have to be the same entity as the [Consumer](#consumer-contract) but commonly is the same.\r\n\r\n### Run Result\r\n\r\nA Run Result is the result of executing a [Job Spec](#job-spec).\r\n\r\n### Run Status\r\n\r\nEach [Job Run](#job) has a status field indicating its current progress. The Run Status can be in one of the [following states](https://godoc.org/github.com/smartcontractkit/chainlink/core/store/models/#pkg-constants):\r\n\r\n- Unstarted\r\n- In Progress\r\n- Pending Confrimations\r\n- Pending Bridge\r\n- Pending Sleep\r\n- Errored\r\n- Completed\r\n\r\n### SAID\r\n\r\nThe ID associated with a given [Service Agreement](#service-agreement).\r\n\r\n### Service Agreement\r\n\r\nThe Service agreement consists of a [Job Spec](#job-spec) and a set of [encumbrance parameters](#encumbrance-parameters) that is shared among a creator and multiple Chainlink nodes. Information on service agreements can be found [on our Wiki](https://github.com/smartcontractkit/chainlink/wiki/Service-Agreements-and-the-Coordinator-Contract).\r\n\r\n### Spec\r\n\r\nAnother short-hand for a [Job Spec](#job-spec).\r\n\r\n### Task\r\n\r\nA v2 job [task](/chainlink-nodes/oracle-jobs/task-types/tasks/).\r\n\r\n### Task Spec\r\n\r\nThe Task Spec is the definition for an individual task to be performed within the [job specification](/chainlink-nodes/oracle-jobs/jobs/) by a specific adapter. The Task Spec always includes a `type` field which specifies which [adapter](#adapter) will execute it. Optionally, a Task Spec can specify additional `params` which will be passed on to its adapter, and `confirmations` which specify how many confirmations a [Task Run](#task-run) needs before executing.\r\n\r\n### Task Run\r\n\r\nThe result of the individual [Task Spec](#task-spec)'s execution. A Task Run includes the Task Spec that it used for input and the [Run Result](#run-result) which was the output of the execution.\r\n"
    },
    {
      "title": "Hackathon Resources",
      "headings": [
        {
          "depth": 3,
          "slug": "hackathon--project-resources",
          "text": "Hackathon & Project Resources"
        },
        {
          "depth": 1,
          "slug": "want-to-check-out-winners-code-of-past-hackathons-to-get-some-inspiration",
          "text": "Want to check out winners code of past hackathons to get some inspiration?"
        },
        {
          "depth": 2,
          "slug": "boilerplate-code-and-starter-kits",
          "text": "Boilerplate code, and starter kits"
        },
        {
          "depth": 2,
          "slug": "support-communications",
          "text": "Support Communications"
        },
        {
          "depth": 2,
          "slug": "tutorials",
          "text": "Tutorials"
        },
        {
          "depth": 2,
          "slug": "inspiration",
          "text": "Inspiration"
        },
        {
          "depth": 3,
          "slug": "the-chainlink-community-is-some-of-the-most-inviting-groups-of-engineers-always-looking-to-help-you-grow-to-the-next-stage",
          "text": "The chainlink community is some of the most inviting groups of engineers always looking to help you grow to the next stage."
        },
        {
          "depth": 1,
          "slug": "join-the-community",
          "text": "Join the community"
        },
        {
          "depth": 2,
          "slug": "blockchain-specific",
          "text": "Blockchain Specific"
        }
      ],
      "url": "/resources/hackathon-resources",
      "section": "ethereum",
      "content": "\r\n:::note[ Note on Resources]\r\n\r\nFor a comprehensive list of resources, refer to the [Learning Resources](/getting-started/other-tutorials/) page.\r\n\r\n:::\r\n\r\n### Hackathon & Project Resources\r\n\r\nIf you're looking to just start jumping into stuff, here is a directory that can help you out.\r\n\r\n# Want to check out winners code of past hackathons to get some inspiration?\r\n\r\nCheck out the <a href=\"/resources/example-projects\"> example winners projects here. </a>\r\n\r\n## Boilerplate code, and starter kits\r\n\r\nBe sure to check the docs above for remix examples!\r\n\r\n- [Chainlink Brownie Starter Kit (Python)](https://github.com/smartcontractkit/chainlink-mix)\r\n- [Chainlink Truffle Starter Kit (Javascript)](https://github.com/smartcontractkit/truffle-starter-kit)\r\n- [Chainlink Hardhat Starter Kit (Javascript)](https://github.com/smartcontractkit/hardhat-starter-kit)\r\n\r\n## Support Communications\r\n\r\nAlways refer back to the [getting help](/resources/getting-help) page for the latest information about how to get support.\r\n\r\n- [Getting Help](/resources/getting-help)\r\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/chainlink)\r\n- [Stack Exchange Ethereum](https://ethereum.stackexchange.com/questions/tagged/chainlink)\r\n- [Hackathon Discord](https://discord.gg/h3AvTHj)\r\n- [Developer Discord](https://discord.gg/2YHSAey)\r\n\r\n## Tutorials\r\n\r\nBe sure to check the documentation in the links above for in depth-descriptions of everything.\r\n\r\nNew? See the [Getting Started Guide](/getting-started/conceptual-overview/).\r\n\r\n- [Video Tutorials](https://www.youtube.com/playlist?list=PLVP9aGDn-X0QwJVbQvuKr-zrh2_DV5M6J)\r\n- [What is Ethereum?](https://www.youtube.com/playlist?list=PLVP9aGDn-X0QwJVbQvuKr-zrh2_DV5M6J)\r\n- [Developer Blog (many tutorials)](https://blog.chain.link/tag/developers/)\r\n- [Testing Chainlink Smart Contracts](https://blog.chain.link/testing-chainlink-smart-contracts/)\r\n- [NFTs and Chainlink](https://blog.chain.link/build-deploy-and-sell-your-own-dynamic-nft/)\r\n- [Build an external adapter](/chainlink-nodes/external-adapters/developers/)\r\n\r\n## Inspiration\r\n\r\n- [77 Use Cases by Chainlink](https://blog.chain.link/44-ways-to-enhance-your-smart-contract-with-chainlink/)\r\n- [Past winners & code](/resources/example-projects/)\r\n- [Chainlink docs](/)\r\n\r\n### The chainlink community is some of the most inviting groups of engineers always looking to help you grow to the next stage.\r\n\r\n# Join the community\r\n\r\n- [Twitter](https://mobile.twitter.com/chainlink)\r\n- [Reddit](https://www.reddit.com/r/Chainlink/)\r\n- [Telegram](https://t.me/chainlinkofficial)\r\n- [Blog](https://blog.chain.link)\r\n\r\n## Blockchain Specific\r\n\r\n- [Matic Data Feeds](/data-feeds/price-feeds/addresses/?network=polygon)\r\n- [BNB Chain Data Feeds](/data-feeds/price-feeds/addresses/?network=bnb-chain)\r\n- [Conflux](https://github.com/Conflux-Network-Global/demo-cfx-chainlink)\r\n"
    },
    {
      "title": "Hackathon Rules, Waiver & Release, and Code of Conduct",
      "headings": [
        {
          "depth": 5,
          "slug": "the-code",
          "text": "The Code"
        },
        {
          "depth": 5,
          "slug": "event-rules--conditions",
          "text": "Event Rules & Conditions"
        }
      ],
      "url": "/resources/hackathon-rules-waiver-and-release",
      "section": "ethereum",
      "content": "**Code of Conduct**\r\n\r\nThis event is a community hackathon intended for collaboration and learning in the Chainlink and broader blockchain communities. We value the participation of each member of the community and want all participants to have an enjoyable experience. Accordingly, all participants are expected to show respect and courtesy to other participants throughout the hackathon. To make clear what is expected, all participants of this hackathon are required to conform to the following Code of Conduct. Organizers will enforce this code throughout the event.\r\n\r\n\r\n##### **The Code**\r\n\r\nThe spirit of The Code is to prohibit activities including but not limited to:\r\n* Comments that others find offensive\r\n* Cheating or taking unfair advantage of other participants’ work or efforts\r\n* Any activity related to harassing, demeaning, mocking, or intimidating others, especially this behavior as it relates to characteristics such as:\r\n    * Gender\r\n    * Sexual orientation\r\n    * Physical or mental ability\r\n    * Age\r\n    * Socioeconomic status\r\n    * Ethnicity\r\n    * Physical appearance\r\n    * Race\r\n    * Religion\r\n    * Country of origin\r\n* Examples of other prohibited behaviors include, but are not limited to:\r\n    * Stalking\r\n    * Unwanted sexual attention\r\n    * Use of sexualized content\r\n\r\nParticipants asked to stop any behavior deemed as harassment are expected to comply immediately. If a participant fails to comply they will be asked to leave the event. Sponsors, judges, mentors, volunteers, organizers, Chainlink team, and anyone else at the event are also subject to the Code. \r\n\r\nIf a participant engages in behavior that violates the Code, the hackathon organizers will take any action they deem appropriate, including warning the offender or expelling them from the event.\r\n\r\nIf you feel uncomfortable or think there may be a potential violation of the code of conduct, please report it immediately to one of the event organizers or by emailing us at legal@chain.link. All reporters have the right to remain anonymous.\r\n\r\n\r\n##### **Event Rules & Conditions**\r\n1. The following rules & conditions (the “Rules”) apply to this Chainlink hackathon (the “Event\"). By clicking the “I Accept” button, you acknowledge that you have read these Rules, understand them, and agree to be bound as follows: \r\n1. You assume full responsibility for any damage or injury caused by you in your participation in the Event (whether to persons or property, and whether to yourself or others) and release SmartContract Chainlink Limited SEZC (and its affiliates) (“Chainlink”), the Event, the organizers of the Event (the “Organizers”), all sponsors of the Event (“Sponsors”), the Event volunteers and the Event staff, (collectively, the “Releasees”) from any liability therefore. **YOU ARE AWARE THAT YOUR PARTICIPATION IN THE EVENT IS SOLELY AT YOUR OWN RISK, AND THAT THE RELEASE HEREIN IS INTENDED TO REFLECT THAT UNDERSTANDING**\r\n1. You will own any developments that you create during the Event, and all right, title and interest in those developments, including the intellectual property rights therein, shall belong to you. However, you acknowledge that during the course of the Event, you may obtain access to products, developments, information and other materials belonging to Chainlink, other participants of the Event, the Sponsors and/or other third parties (“Third Party Materials”), and that nothing in this Agreement is deemed to transfer any ownership, right, title or interest in such Third Party Materials to you. Your only rights to the Third Party Materials shall be those expressly granted to you by the owner(s) of the Third Party Materials. Specifically, any APIs or other software provided to you by the Sponsors are subject to the subscription terms and software licenses associated with such APIs or other software.\r\n1. By entering this Event, you  represent and warrant that your participation complies with these Rules and that you have sufficient rights to (1) authorize the publication and dissemination of any submission materials and presentations (“Submitted Materials”); (2) allow the Organizers and Sponsors to use and to authorize others to use, publish and disseminate your Submitted Materials.  Further, you are entirely responsible for your Submitted Materials, in whole or in part, if: (a) determined to be defamatory, offensive or otherwise inappropriate; (b) determined to violate any laws, rules or regulations; (c) determined to be infringing, or constitute a misappropriation of any intellectual property rights or confidential or proprietary information of any third party; or (d) determined to violate these Rules.  Your Submitted Materials must be true and accurate and in compliance with these Rules in all regards.  At any time, the Organizers at their sole discretion, reserve the right to remove your Submitted Materials from the Event, in whole or in part, for any violation of these Official Rules.\r\n1. You acknowledge that the Event is intended to be a place where ideas are shared freely, and therefore acknowledge that any information that you share with other participants of the Event, the Sponsors and/or other third parties during the Event is solely at your discretion and risk. If you wish to protect your information, it is solely your responsibility to implement confidentiality and security measures with respect to the persons to whom you are disclosing your information. None of the Releasees shall have any responsibility under this Agreement or by virtue of their participation in the Event with respect to your information.\r\n1. You acknowledge that the Organizers and Chainlink have the right to reject participants in the Event at their sole discretion. \r\n1. The Organizers have the unrestricted right to use your likeness, image, voice, opinions, and appearance, and also any images of your projects, developments, materials and belongings made at or brought to the Event, captured through video, photographs or other media during the Event for the express purpose of creating promotional material (the “Images”), for the purposes of use in websites, promotional materials, publications and other media of any of the Organizers, whether in print or electronically (the “Materials”). The foregoing right includes permission to copyright, use, re-use, publish, and republish Images in which you may be included, intact or in part, composite or distorted in character or form, without restriction as to changes or transformations, in conjunction with your own or a fictitious name, reproduction in color or otherwise, made through any and all media now or hereafter known;\r\n    1. The Organizers shall solely own the Materials in which you or your Images, in whole or in part, may appear, including copyright interests, and you have no ownership rights therein;\r\n    1. You give all clearances, copyright and otherwise, for use of your Images, and waive any moral rights that you may have in the Materials in which you or your Images may appear. The rights granted to the Organizers herein are perpetual and worldwide. For greater certainty, you agree that your images may continue to be used after the completion of the Event;\r\n    1. You relinquish any right that you may have to examine or approve the Materials in which you or your Images may appear or the use to which they may be applied; and\r\n    1. You hereby release, discharge and agree to save harmless each and all of the Organizers from any liability by virtue of any blurring, distortion, alteration, optical illusion, or use in composite form of the Images whether intentional or otherwise, that may occur or be produced in the recording of the Images or in any subsequent processing thereof, as well as any publication thereof, including without limitation any claims for libel or invasion of privacy.\r\n1. You agree that the Organizers may share your registration details, LinkedIn/Github profiles, details of your Hackathon submission, and other information obtained from you in the course of, or relating to, the Event with the Sponsors, and acknowledge that such Sponsors may contact you during and after the Event. By agreeing to this document and/or participating in the Event, you are providing your express consent to communications by the Organizers and Sponsors (including email communications, both marketing and informational) respecting the products and services of the Organizers and Sponsors, and future events.\r\n1. For valuable consideration, including permission to take part in the Event, you hereby covenant not to sue, and release, waive, and discharge the Releasees, their owners, officers, agents, affiliates, employees, volunteers, and/or any other person or entity in any way associated with the Event, from liability for any injury to your person or property or death arising out of or related to your participation in the Event, whether caused by an act of negligence of the Releasees or otherwise; and hereby assume full responsibility for any risk of bodily injury, death or property damage arising out of or related to your participation in the Event, whether occurring to you or to any other person or entity for whom you are responsible or with whom you are associated, and whether caused by an act of negligence of the Releasees or otherwise. The foregoing release includes, but is not limited to, any occurrences of personal injury, illness (food-borne or otherwise), and loss of belongings, whether by theft or otherwise. You further agree that this instrument (the terms of which collectively are referred to as the Rules) is intended to be as broad and inclusive as is permitted by the laws of the State of California and that if any portion thereof is held invalid, that portion shall be invalid only to the extent required by law, and the balance shall, notwithstanding, continue in full force and effect.\r\n1. You agree to indemnify and hold the Organizers and Sponsors (and judges, mentors, volunteers, organizers, Chainlink team administering the Event) and each of their employees, representatives, agents, attorneys, affiliates, directors, employees, officers, managers, and shareholders (the “Indemnified Parties”) harmless from any damage, loss, cost, or expense (including without limitation, attorneys’ fees and costs) incurred in connection with any third-party claim, demand, or action (“Claim”) brought or asserted against any of the Indemnified Parties, alleging facts or circumstances that would constitute a breach of any provision of the these Rules by you; arising from, related to, or connected with your entry, Submitted Materials, presentations and participation in any way in any aspect of Event , including receipt of any prize. If you are obligated to provide indemnification pursuant to this provision, the Indemnified Parties may, in their sole discretion, control the disposition of any claim at your sole cost and expense. Without limitation of the foregoing, you may not settle, compromise, or in any other manner dispose of any claim without the Organizers’s express written consent.\r\n1. If selected as a winner of a Chainlink award, your acceptance of the Chainlink award means you agree to the following:\r\n    1. You will not disparage Chainlink or its products, services, agents, representatives, directors, officers, shareholders, attorneys, employees, vendors, business partners, affiliates, successors or assigns, or any person acting by, through, under or in concert with any of them, with any written or oral statement. Nothing in this paragraph shall prohibit the winner from providing truthful information in response to a valid subpoena or other legal process; however, the winning participant agrees to provide Company sufficient notice of such to allow Company the opportunity to oppose such subpoena or legal process prior to providing any information (unless expressly prohibited by applicable law).\r\n    1. You agree that awards are subject to availability and Chainlink and the Sponsors reserve the right to substitute or withdraw any prize without giving notice at their sole discretion.\r\n    1. Any media, such as a blog post, that is created about winning the Event, will first be shared with the Chainlink team beforehand so that we can coordinate and help you spread the message. \r\n    1. You agree to an interview with a writer affiliated with the Chainlink team, which will result in featuring your project on the Chainlink website and sharing your project with the greater community. \r\n"
    },
    {
      "title": "LINK Token Contracts",
      "headings": [
        {
          "depth": 2,
          "slug": "ethereum",
          "text": "Ethereum"
        },
        {
          "depth": 3,
          "slug": "ethereum-mainnet",
          "text": "Ethereum Mainnet"
        },
        {
          "depth": 3,
          "slug": "goerli-testnet",
          "text": "Goerli testnet"
        },
        {
          "depth": 2,
          "slug": "bnb-chain",
          "text": "BNB Chain"
        },
        {
          "depth": 3,
          "slug": "bnb-chain-mainnet",
          "text": "BNB Chain mainnet"
        },
        {
          "depth": 3,
          "slug": "bnb-chain-testnet",
          "text": "BNB Chain testnet"
        },
        {
          "depth": 2,
          "slug": "polygon-matic",
          "text": "Polygon (Matic)"
        },
        {
          "depth": 3,
          "slug": "polygon-mainnet",
          "text": "Polygon mainnet"
        },
        {
          "depth": 3,
          "slug": "mumbai-testnet",
          "text": "Mumbai testnet"
        },
        {
          "depth": 2,
          "slug": "rsk",
          "text": "RSK"
        },
        {
          "depth": 3,
          "slug": "rsk-mainnet",
          "text": "RSK mainnet"
        },
        {
          "depth": 2,
          "slug": "gnosis-chain-xdai",
          "text": "Gnosis Chain (xDai)"
        },
        {
          "depth": 3,
          "slug": "gnosis-chain-mainnet",
          "text": "Gnosis Chain mainnet"
        },
        {
          "depth": 2,
          "slug": "avalanche",
          "text": "Avalanche"
        },
        {
          "depth": 3,
          "slug": "avalanche-mainnet",
          "text": "Avalanche mainnet"
        },
        {
          "depth": 3,
          "slug": "fuji-testnet",
          "text": "Fuji testnet"
        },
        {
          "depth": 2,
          "slug": "fantom",
          "text": "Fantom"
        },
        {
          "depth": 3,
          "slug": "fantom-mainnet",
          "text": "Fantom mainnet"
        },
        {
          "depth": 3,
          "slug": "fantom-testnet",
          "text": "Fantom testnet"
        },
        {
          "depth": 2,
          "slug": "arbitrum",
          "text": "Arbitrum"
        },
        {
          "depth": 3,
          "slug": "arbitrum-mainnet",
          "text": "Arbitrum mainnet"
        },
        {
          "depth": 3,
          "slug": "arbitrum-goerli-testnet",
          "text": "Arbitrum Goerli testnet"
        },
        {
          "depth": 2,
          "slug": "heco-chain",
          "text": "HECO Chain"
        },
        {
          "depth": 3,
          "slug": "heco-chain-mainnet",
          "text": "HECO Chain mainnet"
        },
        {
          "depth": 2,
          "slug": "optimism",
          "text": "Optimism"
        },
        {
          "depth": 3,
          "slug": "optimism-mainnet",
          "text": "Optimism mainnet"
        },
        {
          "depth": 3,
          "slug": "optimism-goerli-testnet",
          "text": "Optimism Goerli testnet"
        },
        {
          "depth": 2,
          "slug": "harmony",
          "text": "Harmony"
        },
        {
          "depth": 3,
          "slug": "harmony-mainnet",
          "text": "Harmony mainnet"
        },
        {
          "depth": 2,
          "slug": "moonriver",
          "text": "Moonriver"
        },
        {
          "depth": 3,
          "slug": "moonriver-mainnet",
          "text": "Moonriver mainnet"
        },
        {
          "depth": 2,
          "slug": "moonbeam",
          "text": "Moonbeam"
        },
        {
          "depth": 3,
          "slug": "moonbeam-mainnet",
          "text": "Moonbeam mainnet"
        },
        {
          "depth": 2,
          "slug": "metis",
          "text": "Metis"
        },
        {
          "depth": 3,
          "slug": "andromeda-mainnet",
          "text": "Andromeda mainnet"
        },
        {
          "depth": 2,
          "slug": "klaytn",
          "text": "Klaytn"
        },
        {
          "depth": 3,
          "slug": "baobab-testnet",
          "text": "Baobab testnet"
        }
      ],
      "url": "/resources/link-token-contracts",
      "section": "ethereum",
      "description": "Addresses for the LINK token on supported networks.",
      "content": "\r\nLINK tokens are used to pay node operators for retrieving data for smart contracts and also for deposits placed by node operators as required by contract creators. The smallest denomination of LINK is called a Juel, and 1,000,000,000,000,000,000 (1e18) Juels are equal to 1 LINK. This is similar to Wei, which is the [smallest denomination of ETH](https://ethereum.org/en/developers/docs/intro-to-ether/#denominations).\r\n\r\nThe LINK token is an ERC677 token that inherits functionality from the ERC20 token standard and allows token transfers to contain a data payload. Read more about the [ERC677 transferAndCall token standard](https://github.com/ethereum/EIPs/issues/677).\r\n\r\n**Networks:**\r\n\r\n- [Ethereum](#ethereum)\r\n- [BNB Chain](#bnb-chain)\r\n- [Polygon (Matic)](#polygon-matic)\r\n- [RSK](#rsk)\r\n- [Gnosis Chain (xDai)](#gnosis-chain-xdai)\r\n- [Avalanche](#avalanche)\r\n- [Fantom](#fantom)\r\n- [Arbitrum](#arbitrum)\r\n- [HECO Chain](#heco-chain)\r\n- [Optimism](#optimism)\r\n- [Harmony](#harmony)\r\n- [Moonriver](#moonriver)\r\n- [Moonbeam](#moonbeam)\r\n- [Metis](#metis)\r\n- [Klaytn](#klaytn)\r\n\r\n## Ethereum\r\n\r\n### Ethereum Mainnet\r\n\r\n| Parameter      | Value                                                                                                                                                                                                        |\r\n| :------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `1`                                                                                                                                                                                                          |\r\n| Address        | <a class=\"erc-token-address\" id=\"1_0x514910771AF9Ca656af840dff83E8264EcF986CA\" href=\"https://etherscan.io/token/0x514910771AF9Ca656af840dff83E8264EcF986CA\">`0x514910771AF9Ca656af840dff83E8264EcF986CA`</a> |\r\n| Name           | Chainlink Token                                                                                                                                                                                              |\r\n| Symbol         | LINK                                                                                                                                                                                                         |\r\n| Decimals       | 18                                                                                                                                                                                                           |\r\n| Network status | [ethstats.net](https://ethstats.net/)                                                                                                                                                                        |\r\n\r\n### Goerli testnet\r\n\r\nTestnet LINK is available at [faucets.chain.link](https://faucets.chain.link/goerli). Testnet ETH is available at [goerlifaucet.com](https://goerlifaucet.com/) or the faucets listed at [faucetlink.to/goerli](https://faucetlink.to/goerli).\r\n\r\n| Parameter      | Value                                                                                                                                                                                                               |\r\n| :------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\r\n| `ETH_CHAIN_ID` | `5`                                                                                                                                                                                                                 |\r\n| Address        | <a class=\"erc-token-address\" id=\"5_0x326C977E6efc84E512bB9C30f76E30c160eD06FB\" href=\"https://goerli.etherscan.io/token/0x326C977E6efc84E512bB9C30f76E30c160eD06FB\">`0x326C977E6efc84E512bB9C30f76E30c160eD06FB`</a> |\r\n| Name           | Chainlink Token                                                                                                                                                                                                     |\r\n| Symbol         | LINK                                                                                                                                                                                                                |\r\n| Decimals       | 18                                                                                                                                                                                                                  |\r\n\r\n## BNB Chain\r\n\r\n### BNB Chain mainnet\r\n\r\nBNB is used to pay for transactions on the BNB Chain mainnet.\r\n\r\n:::caution[ ERC-677 LINK on BNB Chain]\r\n\r\nThe LINK provided by the [BNB Chain Bridge](https://www.bnbchain.world/en/bridge) is not ERC-677 compatible, so you cannot use it with Chainlink services or oracle nodes. Use the [**Chainlink PegSwap service**](https://pegswap.chain.link/) to convert bridged LINK to the official ERC-677 LINK token on BNB Chain.\r\n\r\n:::\r\n\r\n| Parameter      | Value                                                                                                                                                                                                        |\r\n| :------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `56`                                                                                                                                                                                                         |\r\n| Address        | <a class=\"erc-token-address\" id=\"56_0x404460C6A5EdE2D891e8297795264fDe62ADBB75\" href=\"https://bscscan.com/token/0x404460C6A5EdE2D891e8297795264fDe62ADBB75\">`0x404460C6A5EdE2D891e8297795264fDe62ADBB75`</a> |\r\n| Name           | Chainlink Token                                                                                                                                                                                              |\r\n| Symbol         | LINK                                                                                                                                                                                                         |\r\n| Decimals       | 18                                                                                                                                                                                                           |\r\n| Network status | [bscscan.freshstatus.io](https://bscscan.freshstatus.io/)                                                                                                                                                    |\r\n\r\n### BNB Chain testnet\r\n\r\nTestnet LINK is available at [faucets.chain.link](https://faucets.chain.link/chapel). Testnet BNB is availalbe at [testnet.binance.org/faucet-smart](https://testnet.binance.org/faucet-smart).\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                  |\r\n| :------------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `97`                                                                                                                                                                                                                   |\r\n| Address        | <a class=\"erc-token-address\" id=\"97_0x84b9B910527Ad5C03A9Ca831909E21e236EA7b06\" href=\"https://testnet.bscscan.com/address/0x84b9B910527Ad5C03A9Ca831909E21e236EA7b06\">`0x84b9B910527Ad5C03A9Ca831909E21e236EA7b06`</a> |\r\n| Name           | Chainlink Token                                                                                                                                                                                                        |\r\n| Symbol         | LINK                                                                                                                                                                                                                   |\r\n| Decimals       | 18                                                                                                                                                                                                                     |\r\n\r\n## Polygon (Matic)\r\n\r\n### Polygon mainnet\r\n\r\nMATIC is used to pay for transactions on Polygon. You can use the [Polygon Bridge](https://wallet.polygon.technology/bridge) to transfer tokens to Polygon mainnet and then use [Polygon Gas Swap](https://wallet.polygon.technology/gas-swap/) to swap supported tokens to MATIC.\r\n\r\n:::caution[ ERC-677 LINK on Polygon]\r\n\r\nThe LINK provided by the [Polygon (Matic) Bridge](https://wallet.polygon.technology/bridge) is not ERC-677 compatible, so you cannot use it with Chainlink services or oracle nodes. Use the [**Chainlink PegSwap service**](https://pegswap.chain.link/) to convert bridged LINK to the official ERC-677 LINK token on Polygon.\r\n\r\nWatch the [Moving Chainlink Cross-Chains](https://www.youtube.com/watch?v=WKvIGkBWRUA) video to learn more.\r\n\r\n:::\r\n\r\n| Parameter      | Value                                                                                                                                                                                                               |\r\n| :------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\r\n| `ETH_CHAIN_ID` | `137`                                                                                                                                                                                                               |\r\n| Address        | <a class=\"erc-token-address\" id=\"137_0xb0897686c545045aFc77CF20eC7A532E3120E0F1\" href=\"https://polygonscan.com/address/0xb0897686c545045aFc77CF20eC7A532E3120E0F1\">`0xb0897686c545045aFc77CF20eC7A532E3120E0F1`</a> |\r\n| Name           | Chainlink Token                                                                                                                                                                                                     |\r\n| Symbol         | LINK                                                                                                                                                                                                                |\r\n| Decimals       | 18                                                                                                                                                                                                                  |\r\n| Network status | [polygon.io/system](https://polygon.io/system)                                                                                                                                                                      |\r\n\r\n### Mumbai testnet\r\n\r\nTestnet LINK is available at [faucets.chain.link](https://faucets.chain.link/mumbai). Testnet MATIC is available at the [Polygon faucet](https://faucet.polygon.technology/).\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                         |\r\n| :------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `80001`                                                                                                                                                                                                                       |\r\n| Address        | <a class=\"erc-token-address\" id=\"80001_0x326C977E6efc84E512bB9C30f76E30c160eD06FB\" href=\"https://mumbai.polygonscan.com/address/0x326C977E6efc84E512bB9C30f76E30c160eD06FB\">`0x326C977E6efc84E512bB9C30f76E30c160eD06FB `</a> |\r\n| Name           | Chainlink Token                                                                                                                                                                                                               |\r\n| Symbol         | LINK                                                                                                                                                                                                                          |\r\n| Decimals       | 18                                                                                                                                                                                                                            |\r\n\r\n## RSK\r\n\r\n### RSK mainnet\r\n\r\nRBTC is used to pay for transactions on RSK mainnet. Use [RSK’s built in PowPeg](https://developers.rsk.co/guides/get-crypto-on-rsk/powpeg-btc-rbtc/) to transfer BTC to RSK mainnet as RBTC. You can use the [RSK bridge](https://tokenbridge.rsk.co/) to send LINK from Ethereum Mainnet to RSK.\r\n\r\n| Parameter      | Value                                                                                                                                                                                                              |\r\n| :------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `30`                                                                                                                                                                                                               |\r\n| Address        | <a class=\"erc-token-address\" id=\"30_0x14ADAE34beF7Ca957ce2DDe5AdD97EA050123827\" href=\"https://explorer.rsk.co/address/0x14ADAE34beF7Ca957ce2DDe5AdD97EA050123827\">`0x14ADAE34beF7Ca957ce2DDe5AdD97EA050123827`</a> |\r\n| Name           | rLINK                                                                                                                                                                                                              |\r\n| Symbol         | rLINK                                                                                                                                                                                                              |\r\n| Decimals       | 18                                                                                                                                                                                                                 |\r\n\r\n## Gnosis Chain (xDai)\r\n\r\n### Gnosis Chain mainnet\r\n\r\nxDAI is used to pay for transactions on Gnosis Chain mainnet. Use the [xDai Bridge](https://bridge.gnosischain.com/) to send DAI from Ethereum Mainnet to Gnosis Chain and convert it to xDAI. Use [OmniBridge](https://omni.gnosischain.com/bridge) to send LINK from Ethereum Mainnet to Gnosis Chain.\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                       |\r\n| :------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `100`                                                                                                                                                                                                                       |\r\n| Address        | <a class=\"erc-token-address\" id=\"100_0xE2e73A1c69ecF83F464EFCE6A5be353a37cA09b2\" href=\"https://gnosisscan.io/address/0xE2e73A1c69ecF83F464EFCE6A5be353a37cA09b2\">`0xE2e73A1c69ecF83F464EFCE6A5be353a37cA09b2`</a> |\r\n| Name           | Chainlink Token on Gnosis Chain (xDai)                                                                                                                                                                                      |\r\n| Symbol         | LINK                                                                                                                                                                                                                        |\r\n| Decimals       | 18                                                                                                                                                                                                                          |\r\n| Network status | [gnosisscan.io/](https://gnosisscan.io/)                                                                                                                                                         |\r\n\r\n## Avalanche\r\n\r\n### Avalanche mainnet\r\n\r\nAVAX is the token you use to pay for transactions on Avalanche mainnet. Use the [Avalanche Bridge](https://bridge.avax.network/) to transfer LINK from Ethereum Mainnet to Avalanche.\r\n\r\n| Parameter      | Value                                                                                                                                                                                                              |\r\n| :------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `43114`                                                                                                                                                                                                            |\r\n| Address        | <a class=\"erc-token-address\" id=\"43114_0x5947BB275c521040051D82396192181b413227A3\" href=\"https://snowtrace.io/address/0x5947BB275c521040051D82396192181b413227A3\">`0x5947BB275c521040051D82396192181b413227A3`</a> |\r\n| Name           | Chainlink Token on Avalanche                                                                                                                                                                                       |\r\n| Symbol         | LINK                                                                                                                                                                                                               |\r\n| Decimals       | 18                                                                                                                                                                                                                 |\r\n| Network status | [status.avax.network](https://status.avax.network/)                                                                                                                                                                |\r\n\r\n### Fuji testnet\r\n\r\nTestnet LINK is available at [faucets.chain.link](https://faucets.chain.link/fuji). Testnet AVAX is available at [faucet.avax.network](https://faucet.avax.network/).\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                      |\r\n| :------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `43113`                                                                                                                                                                                                                    |\r\n| Address        | <a class=\"erc-token-address\" id=\"43113_0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846\" href=\"https://testnet.snowtrace.io/address/0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846\">`0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846`</a> |\r\n| Name           | Chainlink Token on Avalanche                                                                                                                                                                                               |\r\n| Symbol         | LINK                                                                                                                                                                                                                       |\r\n| Decimals       | 18                                                                                                                                                                                                                         |\r\n\r\n## Fantom\r\n\r\n### Fantom mainnet\r\n\r\nFTM is used to pay for transactions on Fantom Mainnet. Use [bridge.multichain.org](https://bridge.multichain.org/#/router) to transfer FTM and LINK to Fantom mainnet.\r\n\r\n:::caution[ ERC-677 LINK on Fantom]\r\n\r\nYou must use ERC-677 LINK on Fantom. ERC-20 LINK will not work with Chainlink services.\r\nWhen you use [bridge.multichain.org](https://bridge.multichain.org/#/router) to send LINK to the Fantom network, be sure to select LINK-ERC677 as the token you will receive on Fantom mainnet.\r\n\r\n:::\r\n\r\n| Parameter      | Value                                                                                                                                                                                                           |\r\n| :------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `250`                                                                                                                                                                                                           |\r\n| Address        | <a class=\"erc-token-address\" id=\"250_0x6F43FF82CCA38001B6699a8AC47A2d0E66939407\" href=\"https://ftmscan.com/address/0x6F43FF82CCA38001B6699a8AC47A2d0E66939407\">`0x6F43FF82CCA38001B6699a8AC47A2d0E66939407`</a> |\r\n| Name           | Chainlink Token on Fantom                                                                                                                                                                                       |\r\n| Symbol         | LINK                                                                                                                                                                                                            |\r\n| Decimals       | 18                                                                                                                                                                                                              |\r\n| Network status | [ftmscan.com](https://ftmscan.com/)                                                                                                                                                                             |\r\n\r\n### Fantom testnet\r\n\r\nTestnet LINK is available at [faucets.chain.link](https://faucets.chain.link/fantom-testnet). Testnet FTM is available at [faucet.fantom.network](https://faucet.fantom.network/).\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                    |\r\n| :------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `4002`                                                                                                                                                                                                                   |\r\n| Address        | <a class=\"erc-token-address\" id=\"4002_0xfaFedb041c0DD4fA2Dc0d87a6B0979Ee6FA7af5F\" href=\"https://testnet.ftmscan.com/address/0xfaFedb041c0DD4fA2Dc0d87a6B0979Ee6FA7af5F\">`0xfaFedb041c0DD4fA2Dc0d87a6B0979Ee6FA7af5F`</a> |\r\n| Name           | Chainlink Token on Fantom                                                                                                                                                                                                |\r\n| Symbol         | LINK                                                                                                                                                                                                                     |\r\n| Decimals       | 18                                                                                                                                                                                                                       |\r\n\r\n## Arbitrum\r\n\r\n### Arbitrum mainnet\r\n\r\nETH is used to pay for transactions on the Arbitrum mainnet. You can use the [Arbitrum Bridge](https://bridge.arbitrum.io/) to transfer ETH and LINK to from Ethereum Mainnet to Arbitrum.\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                      |\r\n| :------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `42161`                                                                                                                                                                                                                    |\r\n| Address        | <a class=\"erc-token-address\" id=\"42161_0xf97f4df75117a78c1A5a0DBb814Af92458539FB4\" href=\"https://explorer.arbitrum.io/address/0xf97f4df75117a78c1A5a0DBb814Af92458539FB4\">`0xf97f4df75117a78c1A5a0DBb814Af92458539FB4`</a> |\r\n| Name           | Chainlink Token on Arbitrum Mainnet                                                                                                                                                                                        |\r\n| Symbol         | LINK                                                                                                                                                                                                                       |\r\n| Decimals       | 18                                                                                                                                                                                                                         |\r\n| Network status | [arbiscan.freshstatus.io](https://arbiscan.freshstatus.io/)                                                                                                                                                                |\r\n\r\n### Arbitrum Goerli testnet\r\n\r\nTestnet ETH is used to pay for transactions on Arbitrum Goerli. Use the [Arbitrum Bridge](https://bridge.arbitrum.io/) to transfer testnet ETH and LINK from Ethereum Goerli to Arbitrum Goerli.\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                              |\r\n| :------------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `421613`                                                                                                                                                                                                                           |\r\n| Address        | <a class=\"erc-token-address\" id=\"0xd14838A68E8AFBAdE5efb411d5871ea0011AFd28\" href=\"https://goerli-rollup-explorer.arbitrum.io/address/0xd14838A68E8AFBAdE5efb411d5871ea0011AFd28\">`0xd14838A68E8AFBAdE5efb411d5871ea0011AFd28`</a> |\r\n| Name           | Chainlink Token on Arbitrum Rinkeby                                                                                                                                                                                                |\r\n| Symbol         | LINK                                                                                                                                                                                                                               |\r\n| Decimals       | 18                                                                                                                                                                                                                                 |\r\n\r\n## HECO Chain\r\n\r\n### HECO Chain mainnet\r\n\r\n| Parameter      | Value                                                                                                                                                                                                            |\r\n| :------------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `128`                                                                                                                                                                                                            |\r\n| Address        | <a class=\"erc-token-address\" id=\"128_0x9e004545c59D359F6B7BFB06a26390b087717b42\" href=\"https://hecoinfo.com/address/0x9e004545c59D359F6B7BFB06a26390b087717b42\">`0x9e004545c59D359F6B7BFB06a26390b087717b42`</a> |\r\n| Name           | Heco-Peg LINK Token                                                                                                                                                                                              |\r\n| Symbol         | LINK                                                                                                                                                                                                             |\r\n| Decimals       | 18                                                                                                                                                                                                               |\r\n| Network status | [hecoinfo.com](https://hecoinfo.com/)                                                                                                                                                                            |\r\n\r\n## Optimism\r\n\r\n### Optimism mainnet\r\n\r\nETH is used to pay for transactions on Optimism. Use the [Optimism Bridge](https://app.optimism.io/bridge) to transfer ETH and LINK from Ethereum Mainnet to Optimism mainnet.\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                      |\r\n| :------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `10`                                                                                                                                                                                                                       |\r\n| Address        | <a class=\"erc-token-address\" id=\"10_0x350a791Bfc2C21F9Ed5d10980Dad2e2638ffa7f6\" href=\"https://optimistic.etherscan.io/address/0x350a791Bfc2C21F9Ed5d10980Dad2e2638ffa7f6\">`0x350a791Bfc2C21F9Ed5d10980Dad2e2638ffa7f6`</a> |\r\n| Name           | Chainlink Token on Optimism Mainnet                                                                                                                                                                                        |\r\n| Symbol         | LINK                                                                                                                                                                                                                       |\r\n| Decimals       | 18                                                                                                                                                                                                                         |\r\n| Network status | [status.optimism.io](https://status.optimism.io/)                                                                                                                                                                          |\r\n\r\n### Optimism Goerli testnet\r\n\r\nTestnet ETH is used to pay for transactions on Optimism. Use the [Optimism Bridge](https://app.optimism.io/bridge) to transfer testnet ETH and LINK from Ethereum Goerli to Optimistim Goerli. Select Optimism Goerli in your wallet to access the Optimism Goerli bridge.\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                          |\r\n| :------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `420`                                                                                                                                                                                                                          |\r\n| Address        | <a class=\"erc-token-address\" id=\"420_0xdc2CC710e42857672E7907CF474a69B63B93089f\" href=\"https://goerli-optimism.etherscan.io/token/0xdc2CC710e42857672E7907CF474a69B63B93089f\">`0xdc2CC710e42857672E7907CF474a69B63B93089f`</a> |\r\n| Name           | Chainlink Token on Optimism Goerli                                                                                                                                                                                             |\r\n| Symbol         | LINK                                                                                                                                                                                                                           |\r\n| Decimals       | 18                                                                                                                                                                                                                             |\r\n\r\n## Harmony\r\n\r\n### Harmony mainnet\r\n\r\nONE is used to pay for transactions on Harmony mainnet. You can use the [Harmony Bridge](https://bridge.harmony.one/) to transfer ONE and LINK token from Ethereum Mainnet to Harmony mainnet.\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                           |\r\n| :------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\r\n| `ETH_CHAIN_ID` | `1666600000`                                                                                                                                                                                                                    |\r\n| Address        | <a class=\"erc-token-address\" id=\"1666600000_0x218532a12a389a4a92fC0C5Fb22901D1c19198aA\" href=\"https://explorer.harmony.one/address/0x218532a12a389a4a92fC0C5Fb22901D1c19198aA\">`0x218532a12a389a4a92fC0C5Fb22901D1c19198aA`</a> |\r\n| Name           | Chainlink Token on Harmony Mainnet                                                                                                                                                                                              |\r\n| Symbol         | LINK                                                                                                                                                                                                                            |\r\n| Decimals       | 18                                                                                                                                                                                                                              |\r\n| Network status | [status.harmony.one](https://status.harmony.one/)                                                                                                                                                                               |\r\n\r\n## Moonriver\r\n\r\n### Moonriver mainnet\r\n\r\nMOVR is used to pay transaction fees on Moonriver mainnet. You can use [bridge.multichain.org](https://bridge.multichain.org/#/router) to transfer LINK to Moonriver mainnet.\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                      |\r\n| :------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `1285`                                                                                                                                                                                                                     |\r\n| Address        | <a class=\"erc-token-address\" id=\"1285_0x8b12Ac23BFe11cAb03a634C1F117D64a7f2cFD3e\" href=\"https://moonriver.moonscan.io/address/0x8b12Ac23BFe11cAb03a634C1F117D64a7f2cFD3e\">`0x8b12Ac23BFe11cAb03a634C1F117D64a7f2cFD3e`</a> |\r\n| Name           | Chainlink Token on Moonriver Mainnet                                                                                                                                                                                       |\r\n| Symbol         | LINK                                                                                                                                                                                                                       |\r\n| Decimals       | 18                                                                                                                                                                                                                         |\r\n| Network status | [moonscan.freshstatus.io](https://moonscan.freshstatus.io/)                                                                                                                                                                |\r\n\r\n## Moonbeam\r\n\r\n### Moonbeam mainnet\r\n\r\nGLMR is used to pay transaction fees on Moonbeam mainnet.\r\n\r\n| Parameter      | Value                                                                                                                                                                                                            |\r\n| :------------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `1284`                                                                                                                                                                                                           |\r\n| Address        | <a class=\"erc-token-address\" id=\"1284_0x012414A392F9FA442a3109f1320c439C45518aC3\" href=\"https://moonscan.io/address/0x012414A392F9FA442a3109f1320c439C45518aC3\">`0x012414A392F9FA442a3109f1320c439C45518aC3`</a> |\r\n| Name           | Chainlink Token on Moonbeam Mainnet                                                                                                                                                                              |\r\n| Symbol         | LINK                                                                                                                                                                                                             |\r\n| Decimals       | 18                                                                                                                                                                                                               |\r\n| Network status | [moonscan.freshstatus.io](https://moonscan.freshstatus.io/)                                                                                                                                                      |\r\n\r\n## Metis\r\n\r\n### Andromeda mainnet\r\n\r\nMETIS is the currency that you use to pay for transactions on Metis mainnet. You can use the [Metis Bridge](https://bridge.metis.io/) to transfer METIS and LINK from Ethereum Mainnet to Metis mainnet.\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                             |\r\n| :------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `1088`                                                                                                                                                                                                                            |\r\n| Address        | <a class=\"erc-token-address\" id=\"1088_0x79892E8A3Aea66C8F6893fa49eC6208ef07EC046\"  href=\"https://andromeda-explorer.metis.io/address/0x79892E8A3Aea66C8F6893fa49eC6208ef07EC046\">`0x79892E8A3Aea66C8F6893fa49eC6208ef07EC046`</a> |\r\n| Name           | Chainlink Token on Metis Mainnet                                                                                                                                                                                                  |\r\n| Symbol         | LINK                                                                                                                                                                                                                              |\r\n| Decimals       | 18                                                                                                                                                                                                                                |\r\n| Network status | [andromeda-explorer.metis.io](https://andromeda-explorer.metis.io/)                                                                                                                                                               |\r\n\r\n## Klaytn\r\n\r\n### Baobab testnet\r\n\r\nKLAY is the currency that you use to pay for transactions on Klaytn testnet. Testnet LINK is available from [faucets.chain.link](https://faucets.chain.link/klaytn-testnet). Use the [KLAY Faucet](https://baobab.wallet.klaytn.foundation/faucet) to obtain testnet KLAY.\r\n\r\n| Parameter      | Value                                                                                                                                                                                                                       |\r\n| :------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `ETH_CHAIN_ID` | `1001`                                                                                                                                                                                                                      |\r\n| Address        | <a class=\"erc-token-address\" id=\"1001_0x04c5046A1f4E3fFf094c26dFCAA75eF293932f18\"  href=\"https://baobab.scope.klaytn.com/token/0x04c5046A1f4E3fFf094c26dFCAA75eF293932f18\">`0x04c5046A1f4E3fFf094c26dFCAA75eF293932f18`</a> |\r\n| Name           | Chainlink Token on the Klaytn testnet                                                                                                                                                                                       |\r\n| Symbol         | LINK                                                                                                                                                                                                                        |\r\n| Decimals       | 18                                                                                                                                                                                                                          |\r\n| Network status | [status.klaytnapi.com](https://status.klaytnapi.com/)                                                                                                                                                                       |\r\n"
    },
    {
      "title": "Solana Data Feeds Addresses",
      "headings": [],
      "url": "/solana/data-feeds/data-feeds-solana",
      "section": "solana",
      "content": "\r\n<FeedPage initialNetwork=\"solana\"  ecosystem=\"solana\" />\r\n"
    },
    {
      "title": "Using Data Feeds Off-Chain (Solana)",
      "headings": [
        {
          "depth": 2,
          "slug": "the-chainlink-data-feeds-store-program",
          "text": "The Chainlink Data Feeds Store Program"
        },
        {
          "depth": 2,
          "slug": "adding-data-feeds-to-an-existing-off-chain-project",
          "text": "Adding Data Feeds to an existing off-chain project"
        },
        {
          "depth": 2,
          "slug": "using-the-solana-starter-kit",
          "text": "Using the Solana Starter Kit"
        },
        {
          "depth": 3,
          "slug": "install-the-required-tools",
          "text": "Install the required tools"
        },
        {
          "depth": 3,
          "slug": "run-the-example-program",
          "text": "Run the example program"
        }
      ],
      "url": "/solana/data-feeds/using-data-feeds-off-chain",
      "section": "solana",
      "description": "How to use Chainlink Data Feeds in your off-chain applications.",
      "content": "\r\nChainlink Data Feeds are the quickest way to access market prices for real-world assets. This guide demonstrates how to read Chainlink Data Feeds on the Solana Devnet using off-chain examples in the [Chainlink Solana Starter Kit](https://github.com/smartcontractkit/solana-starter-kit). To learn how to use Data Feeds in your on-chain Solana programs, see the [Using Data Feeds On-Chain](/solana/data-feeds/using-data-feeds-solana/) guide.\r\n\r\nTo get the full list of Chainlink Data Feeds on Solana, see the [Solana Feeds](/solana/data-feeds/data-feeds-solana/) page.\r\n\r\n:::warn[Select quality data feeds]\r\n\r\nBe aware of the quality of the data that you use. [Learn more about making responsible data quality decisions.](/data-feeds/selecting-data-feeds/)\r\n:::\r\n\r\n**Topics**\r\n\r\n- [The Chainlink Data Feeds Store Program](#the-chainlink-data-feeds-store-program)\r\n- [Adding data feeds to an existing off-chain project](#adding-data-feeds-to-an-existing-off-chain-project)\r\n- [Using the Solana Starter Kit](#using-the-solana-starter-kit)\r\n\r\n## The Chainlink Data Feeds Store Program\r\n\r\nThe program that contains the logic required for the storing and retrieval of Chainlink Data Feeds data on both Devnet and Mainnet is [cjg3oHmg9uuPsP8D6g29NWvhySJkdYdAo9D25PRbKXJ](https://solscan.io/account/cjg3oHmg9uuPsP8D6g29NWvhySJkdYdAo9D25PRbKXJ?cluster=devnet). This is the program ID that you use to read price data from off-chain. You can find the source code for this program in the [smartcontractkit/chainlink-solana](https://github.com/smartcontractkit/chainlink-solana/tree/develop/contracts/programs/store/src) on GitHub.\r\n\r\nYou can [add data feeds to an existing off-chain project](#adding-data-feeds-to-an-existing-off-chain-project) or [use the Solana Starter Kit](#using-the-solana-starter-kit).\r\n\r\n## Adding Data Feeds to an existing off-chain project\r\n\r\nYou can read Chainlink Data Feeds off-chain in your existing project by using the [Chainlink Solana NPM library](https://www.npmjs.com/package/@chainlink/solana-sdk).\r\n\r\n:::caution[ Reading feed data]\r\n\r\nAlthough you can directly query the data feed accounts, you should not rely on the memory layout always being the same as it currently is. Based on this, the recommendation is to always use the consumer library.\r\n\r\n:::\r\n\r\nInstall the necessary components and include the example code in your project. Optionally, you can run the example code by itself to learn how it works before you integrate it with your project.\r\n\r\n1. Install the latest Mainnet version of [the Solana CLI](https://github.com/solana-labs/solana/releases) and export the path to the CLI:\r\n\r\n   ```shell\r\n   sh -c \"$(curl -sSfL https://release.solana.com/v1.9.28/install)\" &&\r\n   export PATH=\"~/.local/share/solana/install/active_release/bin:$PATH\"\r\n   ```\r\n\r\n   Run `solana --version` to make sure the Solana CLI is installed correctly.\r\n\r\n   ```shell\r\n   solana --version\r\n   ```\r\n\r\n1. Install [Node.js 14 or higher](https://nodejs.org/en/download/). Run `node --version` to verify which version you have installed:\r\n\r\n   ```shell\r\n   node --version\r\n   ```\r\n\r\n1. Change to your project directory or create a new directory.\r\n\r\n   ```shell\r\n   mkdir off-chain-project && cd off-chain-project\r\n   ```\r\n\r\n1. Optionally [install Yarn](https://classic.yarnpkg.com/lang/en/docs/install/) to use as a package manager and initialize yarn if your project does not already have a `package.json` file:\r\n\r\n   ```shell\r\n   npm install -g yarn && yarn init\r\n   ```\r\n\r\n1. Add the [Anchor library](https://www.npmjs.com/package/@project-serum/anchor) to your project:\r\n   <PackageManagerTabs>\r\n   <Fragment slot=\"yarn\">\r\n\r\n   ```shell yarn\r\n   yarn add @project-serum/anchor\r\n   ```\r\n\r\n    </Fragment>\r\n    <Fragment slot=\"npm\">\r\n    ```shell npm\r\n    npm i @project-serum/anchor\r\n    ```\r\n    </Fragment>\r\n   </PackageManagerTabs>\r\n\r\n1. Add the [Chainlink Solana NPM library](https://www.npmjs.com/package/@chainlink/solana-sdk) to your project:\r\n   <PackageManagerTabs>\r\n   <Fragment slot=\"yarn\">\r\n\r\n   ```shell yarn\r\n   yarn add @chainlink/solana-sdk\r\n   ```\r\n\r\n    </Fragment>\r\n    <Fragment slot=\"npm\">\r\n    ```shell npm\r\n   npm i -g @chainlink/solana-sdk\r\n    ```\r\n    </Fragment>\r\n   </PackageManagerTabs>\r\n\r\n1. Create a temporary Solana wallet to use for this example. Alternatively, if you have an existing wallet that you want to use, locate the path to your [keypair](https://docs.solana.com/terminology#keypair) file and use it as the keypair for the rest of this guide.\r\n\r\n   ```shell\r\n   solana-keygen new --outfile ./id.json\r\n   ```\r\n\r\n1. Set the [Anchor environment variables](https://www.twilio.com/blog/2017/01/how-to-set-environment-variables.html). Anchor uses these to determine which wallet to use and how to get a connection to a Solana cluster. Because this example does not generate or sign any transactions, no lamports are required. The wallet is required only by the Anchor library. For a list of available networks and endpoints, see the [Solana Cluster RPC Endpoints](https://docs.solana.com/cluster/rpc-endpoints) documentation.\r\n\r\n   ```shell\r\n   export ANCHOR_PROVIDER_URL=https://api.devnet.solana.com &&\r\n   export ANCHOR_WALLET=./id.json\r\n   ```\r\n\r\n1. Copy the sample code into your project. This example queries price data off-chain. By default, the script reads the SOL/USD feed, but you can change the `CHAINLINK_FEED_ADDRESS` variable to point to the [feed account addresses](/solana/data-feeds/data-feeds-solana/) that you want to query. You can take the components of these code samples and integrate them with your existing project. Because these examples read data feeds without making any on-chain changes, no lamports are required to run them.\r\n\r\n::solidity-remix[samples/Solana/PriceFeeds/off-chain-read.js]\r\n\r\n::solidity-remix[samples/Solana/PriceFeeds/off-chain-read.ts]\r\n\r\nYou can run these examples using the following commands:\r\n\r\n<Tabs client:visible>\r\n    <Fragment slot=\"tab.js\">Javascript</Fragment>\r\n    <Fragment slot=\"tab.ts\">Typescript</Fragment>\r\n    <Fragment slot=\"panel.js\">\r\n    ```shell JavaScript\r\n    node javascript-example.js\r\n    ```\r\n    </Fragment>\r\n    <Fragment slot=\"panel.ts\">\r\n    ```shell TypeScript\r\n    yarn add ts-node typescript && yarn ts-node typescript-example.ts\r\n    ```\r\n    </Fragment>\r\n</Tabs>\r\n\r\nTo learn more about Solana and Anchor, see the [Solana Documentation](https://docs.solana.com/) and the [Anchor Documentation](https://book.anchor-lang.com/).\r\n\r\n## Using the Solana Starter Kit\r\n\r\nThis example reads price data from an off-chain client using the [Solana Starter Kit](https://github.com/smartcontractkit/solana-starter-kit).\r\n\r\n### Install the required tools\r\n\r\nBefore you begin, set up your environment for development on Solana:\r\n\r\n1. Install [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) if it is not already configured on your system.\r\n\r\n1. Install the latest Mainnet version of [the Solana CLI](https://github.com/solana-labs/solana/releases) and export the path to the CLI:\r\n\r\n   ```shell\r\n   sh -c \"$(curl -sSfL https://release.solana.com/v1.9.28/install)\" &&\r\n   export PATH=\"~/.local/share/solana/install/active_release/bin:$PATH\"\r\n   ```\r\n\r\n   Run `solana --version` to make sure the Solana CLI is installed correctly.\r\n\r\n   ```shell\r\n   solana --version\r\n   ```\r\n\r\n1. Install [Node.js 14 or higher](https://nodejs.org/en/download/). Run `node --version` to verify which version you have installed:\r\n\r\n   ```shell\r\n   node --version\r\n   ```\r\n\r\n1. [Install Anchor](https://book.anchor-lang.com/getting_started/installation.html). On some operating systems, you might need to build and install Anchor locally. See the [Anchor documentation](https://book.anchor-lang.com/getting_started/installation.html#build-from-source-for-other-operating-systems-without-avm) for instructions.\r\n\r\n1. Install [Yarn](https://classic.yarnpkg.com/lang/en/docs/install/) to simplify package management and run code samples in the Starter Kit.\r\n\r\n   ```shell\r\n   npm install -g yarn\r\n   ```\r\n\r\n### Run the example program\r\n\r\nAfter you install the required tools, clone the example code from the [solana-starter-kit](https://github.com/smartcontractkit/solana-starter-kit) repository.\r\n\r\n1. In a terminal, clone the [solana-starter-kit](https://github.com/smartcontractkit/solana-starter-kit) repository and change to the `solana-starter-kit` directory:\r\n\r\n   ```shell\r\n   git clone https://github.com/smartcontractkit/solana-starter-kit &&\r\n   cd ./solana-starter-kit\r\n   ```\r\n\r\n   You can see the complete code for the example on [GitHub](https://github.com/smartcontractkit/solana-starter-kit/).\r\n\r\n1. In the `./solana-starter-kit` directory, install Node.js dependencies defined in the `package.json` file:\r\n\r\n   ```shell\r\n   yarn install\r\n   ```\r\n\r\n1. Create a temporary Solana wallet file to use for this example. Because your application runs off-chain and does not run any functions or alter data on-chain, the wallet does not require any SOL tokens to function.\r\n\r\n   ```shell\r\n   solana-keygen new --outfile ./id.json\r\n   ```\r\n\r\n1. Set the [Anchor environment variables](https://www.twilio.com/blog/2017/01/how-to-set-environment-variables.html). Anchor uses these to determine which wallet to use and Solana cluster to use. Take note that because we are not generating or signing any transactions, the wallet isn't used, it's just required by the Anchor library. For a list of available networks and endpoints, see the [Solana Cluster RPC Endpoints](https://docs.solana.com/cluster/rpc-endpoints) documentation.\r\n\r\n   ```shell Solana Devnet\r\n   export ANCHOR_PROVIDER_URL=https://api.devnet.solana.com &&\r\n   export ANCHOR_WALLET=./id.json\r\n   ```\r\n\r\n1. Run the example:\r\n\r\n   ```shell JavaScript\r\n   node read-data.js\r\n   ```\r\n\r\n   ```shell TypeScript\r\n   yarn run read-data\r\n   ```\r\n\r\n   The example code retrieves and prints the current price feed data until you close the application:\r\n\r\n   ```\r\n   4027000000\r\n   4026439929\r\n   4026476542\r\n   4023000000\r\n   ```\r\n\r\nTo learn more about Solana and Anchor, see the [Solana Documentation](https://docs.solana.com/) and the [Anchor Documentation](https://book.anchor-lang.com/).\r\n"
    },
    {
      "title": "Using Data Feeds On-Chain (Solana)",
      "headings": [
        {
          "depth": 2,
          "slug": "the-chainlink-data-feeds-ocr2-program",
          "text": "The Chainlink Data Feeds OCR2 Program"
        },
        {
          "depth": 2,
          "slug": "adding-data-feeds-on-chain-in-an-existing-project",
          "text": "Adding Data Feeds On-Chain In An Existing Project"
        },
        {
          "depth": 2,
          "slug": "using-the-solana-starter-kit",
          "text": "Using the Solana Starter Kit"
        },
        {
          "depth": 3,
          "slug": "install-the-required-tools",
          "text": "Install the required tools"
        },
        {
          "depth": 3,
          "slug": "deploy-the-example-program",
          "text": "Deploy the example program"
        },
        {
          "depth": 3,
          "slug": "call-the-deployed-program",
          "text": "Call the deployed program"
        },
        {
          "depth": 3,
          "slug": "clean-up",
          "text": "Clean up"
        }
      ],
      "url": "/solana/data-feeds/using-data-feeds-solana",
      "section": "solana",
      "description": "How to use Chainlink Data Feeds in your on-chain Solana programs.",
      "content": "\r\nChainlink Data Feeds are the quickest way to connect your smart contracts to the real-world market prices of assets. This guide demonstrates how to deploy a program to the Solana Devnet cluster and access Data Feeds on-chain using the [Chainlink Solana Starter Kit](https://github.com/smartcontractkit/solana-starter-kit). To learn how to read price feed data using off-chain applications, see the [Using Data Feeds Off-Chain](/solana/using-data-feeds-off-chain/) guide.\r\n\r\nTo get the full list of available Chainlink Data Feeds on Solana, see the [Solana Feeds](/solana/data-feeds/data-feeds-solana/) page. View the program that owns the Chainlink Data Feeds in the [Solana Devnet Explorer](https://solscan.io/account/HEvSKofvBgfaexv23kMabbYqxasxU3mQ4ibBMEmJWHny?cluster=devnet), or the [Solana Mainnet Explorer](https://solscan.io/account/HEvSKofvBgfaexv23kMabbYqxasxU3mQ4ibBMEmJWHny).\r\n\r\n> 🚧 Select quality data feeds\r\n>\r\n> Be aware of the quality of the data that you use. [Learn more about making responsible data quality decisions.](/data-feeds/selecting-data-feeds/)\r\n\r\n## The Chainlink Data Feeds OCR2 Program\r\n\r\nThe program that owns the data feeds on both Devnet and Mainnet is [HEvSKofvBgfaexv23kMabbYqxasxU3mQ4ibBMEmJWHny](https://solscan.io/account/HEvSKofvBgfaexv23kMabbYqxasxU3mQ4ibBMEmJWHny?cluster=devnet). This is the program ID that you use to retrieve Chainlink Price Data on-chain in your program. The source code for this program is available in the [smartcontractkit/chainlink-solana](https://github.com/smartcontractkit/chainlink-solana/tree/develop/contracts/programs/ocr2) repository on GitHub.\r\n\r\nYou can [add data feeds to an existing project](#adding-data-feeds-on-chain-in-an-existing-project) or [use the Solana Starter Kit](#using-the-solana-starter-kit).\r\n\r\n## Adding Data Feeds On-Chain In An Existing Project\r\n\r\nYou can read Chainlink Data Feed data on-chain in your existing project using the [Chainlink Solana Crate](https://crates.io/crates/chainlink_solana).\r\n\r\n:::caution[ Reading feed data]\r\n\r\nAlthough you can directly query the data feed accounts, you should not rely on the memory layout always being the same as it currently is. Based on this, the recommendation is to always use the consumer library queries below.\r\n\r\n:::\r\n\r\nImport the Chainlink Solana Crate into your project and use the code sample to make function calls.\r\n\r\n1. Add the Chainlink Solana Crate as an entry in your `Cargo.toml` file dependencies section, as shown in the [starter kit Cargo.toml example](https://github.com/smartcontractkit/solana-starter-kit/blob/main/programs/chainlink_solana_demo/Cargo.toml).\r\n\r\n   ```toml\r\n   [dependencies]\r\n   chainlink_solana = \"1.0.0\"\r\n   ```\r\n\r\n1. Use the following code sample to query price data. Each function call to the Chainlink Solana library takes two parameters:\r\n\r\n   - The [feed account](/solana/data-feeds/data-feeds-solana/) that you want to query.\r\n   - The [Chainlink Data Feeds OCR2 Program](#the-chainlink-data-feeds-ocr2-program) for the network. This is a static value that never changes.\r\n\r\nThe code sample has the following components:\r\n\r\n- `latest_round_data`: Returns the latest round information for the specified price pair including the latest price\r\n- `description`: Returns a price pair description such as SOL/USD\r\n- `decimals`: Returns the precision of the price, as in how many numbers the price is padded out to\r\n- `Display`: A helper function that formats the padded out price data into a human-readable price\r\n\r\n::solidity-remix[samples/Solana/PriceFeeds/on-chain-read.rs]\r\n\r\n::solidity-remix[samples/Solana/PriceFeeds/on-chain-read-anchor.rs]\r\n\r\nProgram Transaction logs:\r\n\r\n<Tabs client:visible>\r\n    <Fragment slot=\"tab.rust\">Rust</Fragment>\r\n    <Fragment slot=\"tab.rustAnchor\">Rust with Anchor</Fragment>\r\n    <Fragment slot=\"panel.rust\">\r\n   ```shell Rust\r\n   > Program logged: \"Chainlink Price Feed Consumer entrypoint\"\r\n   > Program logged: \"SOL / USD price is 83.99000000\"\r\n   > Program consumed: 95953 of 1400000 compute units\r\n   > Program return: HNYSbr77Jc9LhHeb9tx53SrWbWfNBnQzQrM4b3BB3PCR CA==\r\n   ```\r\n    </Fragment>\r\n    <Fragment slot=\"panel.rustAnchor\">\r\n   ```shell Rust with Anchor\r\n   Fetching transaction logs...\r\n   [\r\n   'Program HEvSKofvBgfaexv23kMabbYqxasxU3mQ4ibBMEmJWHny consumed 1826 of 1306895 compute units',\r\n   'Program return: HEvSKofvBgfaexv23kMabbYqxasxU3mQ4ibBMEmJWHny CA==',\r\n   'Program HEvSKofvBgfaexv23kMabbYqxasxU3mQ4ibBMEmJWHny success',\r\n   'Program log: SOL / USD price is 93.76988029',\r\n   ]\r\n   ```\r\n    </Fragment>\r\n</Tabs>\r\n\r\nTo learn more about Solana and Anchor, see the [Solana Documentation](https://docs.solana.com/) and the [Anchor Documentation](https://project-serum.github.io/anchor/).\r\n\r\n## Using the Solana Starter Kit\r\n\r\nThis guide demonstrates the following tasks:\r\n\r\n- Write and deploy programs to the [Solana Devnet](https://solscan.io/?cluster=devnet) cluster using Anchor.\r\n- Retrieve price data data using the [Solana Web3 JavaScript API](https://www.npmjs.com/package/@solana/web3.js) with Node.js.\r\n\r\nThis example shows a full end to end example of using Chainlink Price Feeds on Solana. It includes an on-chain program written in rust, as well as an off-chain client written in JavaScript. The client passes in an account to the program, the program then looks up the latest price of the specified price feed account, and then stores the result in the passed in account. The off-chain client then reads the value stored in the account.\r\n\r\n### Install the required tools\r\n\r\nBefore you begin, set up your environment for development on Solana:\r\n\r\n1. Install [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) if it is not already configured on your system.\r\n\r\n1. Install [Node.js 14 or higher](https://nodejs.org/en/download/). Run `node --version` to verify which version you have installed:\r\n\r\n   ```shell\r\n   node --version\r\n   ```\r\n\r\n1. Install [Yarn](https://classic.yarnpkg.com/lang/en/docs/install/) to simplify package management and run code samples.\r\n\r\n1. Install a C compiler such as the one included in [GCC](https://gcc.gnu.org/install/). Some of the dependencies require a C compiler.\r\n\r\n1. Install [Rust](https://www.rust-lang.org/tools/install):\r\n\r\n   ```shell\r\n   curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh &&\r\n   source $HOME/.cargo/env\r\n   ```\r\n\r\n1. Install the latest Mainnet version of [the Solana CLI](https://github.com/solana-labs/solana/releases) and export the path to the CLI:\r\n\r\n   ```shell\r\n   sh -c \"$(curl -sSfL https://release.solana.com/v1.9.28/install)\" &&\r\n   export PATH=\"~/.local/share/solana/install/active_release/bin:$PATH\"\r\n   ```\r\n\r\n   Run `solana --version` to make sure the Solana CLI is installed correctly.\r\n\r\n   ```shell\r\n   solana --version\r\n   ```\r\n\r\n1. [Install Anchor](https://book.anchor-lang.com/getting_started/installation.html). On some operating systems, you might need to build and install Anchor locally. See the [Anchor documentation](https://book.anchor-lang.com/getting_started/installation.html#build-from-source-for-other-operating-systems-without-avm) for instructions.\r\n\r\nAfter you install the required tools, build and deploy the example program from the [solana-starter-kit](https://github.com/smartcontractkit/solana-starter-kit) repository.\r\n\r\n### Deploy the example program\r\n\r\nThis example includes a contract written in Rust. Deploy the contract to the Solana Devnet cluster.\r\n\r\n1. In a terminal, clone the [solana-starter-kit](https://github.com/smartcontractkit/solana-starter-kit) repository and change to the `solana-starter-kit` directory:\r\n\r\n   ```shell\r\n   git clone https://github.com/smartcontractkit/solana-starter-kit &&\r\n   cd ./solana-starter-kit\r\n   ```\r\n\r\n   You can see the complete code for the example on [GitHub](https://github.com/smartcontractkit/solana-starter-kit/).\r\n\r\n1. In the `./solana-starter-kit` directory, install Node.js dependencies defined in the `package.json` file:\r\n\r\n   ```shell\r\n   yarn install\r\n   ```\r\n\r\n1. Create a temporary Solana wallet to use for this example. Use a temporary wallet to isolate development from your other wallets and prevent you from unintentionally using lamports on the Solana Mainnet. Alternatively, if you have an existing wallet that you want to use, locate the path to your [keypair](https://docs.solana.com/terminology#keypair) file and use it as the keypair for the rest of this guide.\r\n\r\n   ```shell\r\n   solana-keygen new --outfile ./id.json\r\n   ```\r\n\r\n   When you build your production applications and deploy Solana programs to the Mainnet cluster, always follow the security best practices in the [Solana Wallet Guide](https://docs.solana.com/wallet-guide) for managing your wallets and keypairs.\r\n\r\n1. Fund your Solana wallet. On Devnet, use `solana airdrop` to add tokens to your account. The contract requires at least 4 SOL to deploy and the faucet limits each request to 2 SOL, so you must make two requests to get a total of 4 SOL on your wallet:\r\n\r\n   ```shell\r\n   solana airdrop 2 --keypair ./id.json --url devnet &&\r\n   solana airdrop 2 --keypair ./id.json --url devnet\r\n   ```\r\n\r\n   - If the command line faucet does not work, run `solana address` on the temporary wallet to print the public key value for the wallet and request tokens from [SolFaucet](https://solfaucet.com/):\r\n\r\n     ```shell\r\n     solana address -k ./id.json\r\n     ```\r\n\r\n1. Run `anchor build` to build the example program. If you receive the `no such subcommand: 'build-bpf'` error, restart your terminal session and run `anchor build` again:\r\n\r\n   ```shell\r\n   anchor build\r\n   ```\r\n\r\n1. The build process generates the keypair for your program's account. Before you deploy your program, you must add this public key to the `lib.rs` file:\r\n\r\n   1. Get the keypair from the `./target/deploy/chainlink_solana_demo-keypair.json` file that Anchor generated:\r\n\r\n      ```shell\r\n      solana address -k ./target/deploy/chainlink_solana_demo-keypair.json\r\n      ```\r\n\r\n   1. Edit the `./programs/chainlink_solana_demo/src/lib.rs` file and replace the keypair in the `declare_id!()` definition:\r\n\r\n      ```shell\r\n      vi ./programs/chainlink_solana_demo/src/lib.rs\r\n      ```\r\n\r\n      ```shell\r\n      declare_id!(\"JC16qi56dgcLoaTVe4BvnCoDL6FhH5NtahA7jmWZFdqm\");\r\n      ```\r\n\r\n1. With the new program ID added, run `anchor build` again. This recreates the necessary program files with the correct program ID:\r\n\r\n   ```shell\r\n   anchor build\r\n   ```\r\n\r\n1. Run `anchor deploy` to deploy the program to the Solana Devnet. Remember to specify the keypair file for your wallet and override the default. This wallet is the [account owner](https://docs.solana.com/terminology#account-owner) (authority) for the program:\r\n\r\n   ```shell\r\n   anchor deploy --provider.wallet ./id.json --provider.cluster devnet\r\n   ```\r\n\r\n1. To confirm that the program deployed correctly, run `solana program show --programs` to get a list of deployed programs that your wallet owns. For this example, check the list of deployed programs for the `id.json` wallet on the Solana Devnet:\r\n\r\n   ```shell\r\n   solana program show --programs --keypair ./id.json --url devnet\r\n   ```\r\n\r\n   The command prints the program ID, slot number, the wallet address that owns the program, and the program balance:\r\n\r\n   ```shell\r\n   Program Id                                   | Slot      | Authority                                    | Balance\r\n   GRt21UnJFHZvcaWLbcUrXaTCFMREewDrm1DweDYBak3Z | 110801571 | FsQPnANKDhqpoayxCL3oDHFCBmrhP34NrfbDR34qbQUt | 3.07874904 SOL\r\n   ```\r\n\r\n   To see additional details of your deployed program, copy the program ID and look it up in the [Solana Devnet Explorer](https://solscan.io/?cluster=devnet).\r\n\r\nNow that the program is on-chain, you can call it using the [Anchor Web3 module](https://project-serum.github.io/anchor/ts/modules/web3.html).\r\n\r\n### Call the deployed program\r\n\r\nUse your deployed program to retrieve price data from a Chainlink data feed on Solana Devnet. For this example, call your deployed program using the [Anchor Web3 module](https://project-serum.github.io/anchor/ts/modules/web3.html) and the [`client.js` example](https://github.com/smartcontractkit/solana-starter-kit/blob/main/client.js) code.\r\n\r\n1. Set the [Anchor environment variables](https://www.twilio.com/blog/2017/01/how-to-set-environment-variables.html). Anchor uses these to determine which wallet to use and Solana cluster to use.\r\n\r\n   ```shell\r\n   export ANCHOR_PROVIDER_URL=https://api.devnet.solana.com &&\r\n   export ANCHOR_WALLET=./id.json\r\n   ```\r\n\r\n1. Run the `client.js` example and pass the program address in using the `--program` flag:\r\n\r\n   ```shell\r\n   node client.js --program $(solana address -k ./target/deploy/chainlink_solana_demo-keypair.json)\r\n   ```\r\n\r\n   If the script executes correctly, you will see output with the current price of SOL / USD.\r\n\r\n   ```shell\r\n   ⋮\r\n   Price Is: 96.79778375\r\n   Success\r\n   ⋮\r\n   ```\r\n\r\n1. Each request costs an amount of SOL that is subtracted from the `id.json` wallet. Run `solana balance` to check the remaining balance for your temporary wallet on Devnet.\r\n\r\n   ```shell\r\n   solana balance --keypair ./id.json --url devnet\r\n   ```\r\n\r\n1. To get prices for a different asset pair, run `client.js` again and add the `--feed` flag with one of the available [Chainlink data feeds](/solana/data-feeds/data-feeds-solana/). For example, to get the price of BTC / USD on Devnet, use the following command:\r\n\r\n   ```shell\r\n   node client.js \\\r\n   --program $(solana address -k ./target/deploy/chainlink_solana_demo-keypair.json) \\\r\n   --feed CzZQBrJCLqjXRfMjRN3fhbxur2QYHUzkpaRwkWsiPqbz\r\n   ```\r\n\r\n   ```shell\r\n   Price Is: 12.4215826\r\n   Success\r\n   ```\r\n\r\nThe program that owns the data feeds is [HEvSKofvBgfaexv23kMabbYqxasxU3mQ4ibBMEmJWHny](https://solscan.io/account/HEvSKofvBgfaexv23kMabbYqxasxU3mQ4ibBMEmJWHny?cluster=devnet), which you can see defined for `const CHAINLINK_PROGRAM_ID` in the `client.js` file.\r\n\r\n### Clean up\r\n\r\nAfter you are done with your deployed contract and no longer need it, it is nice to close the program and withdraw the Devnet SOL tokens for future use. In a production environment, you will want to withdraw unused SOL tokens from any Solana program that you no longer plan to use, so it is good to practice the process when you are done with programs on Devnet.\r\n\r\n1. Run `solana program show` to see the list of deployed programs that your wallet owns and the balances for each of those programs:\r\n\r\n   ```shell\r\n   solana program show --programs --keypair ./id.json --url devnet\r\n   ```\r\n\r\n   ```shell\r\n   Program Id                                   | Slot      | Authority                                    | Balance\r\n   GRt21UnJFHZvcaWLbcUrXaTCFMREewDrm1DweDYBak3Z | 110801571 | FsQPnANKDhqpoayxCL3oDHFCBmrhP34NrfbDR34qbQUt | 3.07874904 SOL\r\n   ```\r\n\r\n1. Run `solana program close` and specify the program that you want to close:\r\n\r\n   ```shell\r\n   solana program close [YOUR_PROGRAM_ID] --keypair ./id.json --url devnet\r\n   ```\r\n\r\n   The program closes and the remaining SOL is transferred to your temporary wallet.\r\n\r\n1. If you have deployments that failed, they might still be in the buffer holding SOL tokens. Run `solana program show` again with the `--buffers` flag:\r\n\r\n   ```shell\r\n   solana program show --buffers --keypair ./id.json --url devnet\r\n   ```\r\n\r\n   If you have open buffers, they will appear in the list.\r\n\r\n   ```shell\r\n   Buffer Address                               | Authority                                    | Balance\r\n   CSc9hnBqYJoYtBgsryJAmrjAE6vZ918qaFhL6N6BdEmB | FsQPnANKDhqpoayxCL3oDHFCBmrhP34NrfbDR34qbQUt | 1.28936088 SOL\r\n   ```\r\n\r\n1. If you have any buffers that you do not plan to finish deploying, run the same `solana program close` command to close them and retrieve the unused SOL tokens:\r\n\r\n   ```shell\r\n   solana program close [YOUR_PROGRAM_ID] --keypair ./id.json --url devnet\r\n   ```\r\n\r\n1. Check the balance on your temporary wallet.\r\n\r\n   ```shell\r\n   solana balance --keypair ./id.json --url devnet\r\n   ```\r\n\r\n1. If you are done using this wallet for examples and testing, you can use [`solana transfer`](https://docs.solana.com/cli/transfer-tokens) to send the remaining SOL tokens to your default wallet or another Solana wallet that you use. For example, if your default wallet keypair is at `~/.config/solana/id.json`, you can send `ALL` of the temporary wallet's balance with the following command:\r\n\r\n   ```shell\r\n   solana transfer ~/.config/solana/id.json ALL --keypair ./id.json --url devnet\r\n   ```\r\n\r\n   Alternatively, you can send the remaining balance to a web wallet. Specify the public key for your wallet instead of the path the default wallet keypair. Now you can use those Devnet funds for other examples and development.\r\n\r\nTo learn more about Solana and Anchor, see the [Solana Documentation](https://docs.solana.com/) and the [Anchor Documentation](https://project-serum.github.io/anchor/).\r\n"
    },
    {
      "title": "Overview",
      "headings": [
        {
          "depth": 2,
          "slug": "chainlink-products-and-solana-clusters",
          "text": "Chainlink products and Solana clusters"
        },
        {
          "depth": 2,
          "slug": "languages-tools-and-frameworks",
          "text": "Languages, tools, and frameworks"
        },
        {
          "depth": 2,
          "slug": "solana-wallets",
          "text": "Solana Wallets"
        }
      ],
      "url": "/solana/overview",
      "section": "solana",
      "content": "\r\nChainlink provides data feeds on the [Solana](https://solana.com/) network. Chainlink data feeds on Solana employ [Off-Chain Reporting (OCR)](/architecture-overview/off-chain-reporting/) to aggregate data from data providers who pull from both centralized and decentralized exchanges. Chainlink’s Solana deployment has no dependencies on external blockchain networks such as Ethereum. In Solana, storage and smart contract logic are separate. Programs store all the logic similar to an EVM (Ethereum) smart contract. The accounts store all the data. Compared to Solidity, the combination of an account and a program is equivalent to a smart contract on an EVM chain. State and logic are separate in Solana.\r\n\r\nSolana programs are stateless, so you don't always need to deploy your program to the network to test it. You can deploy and test your programs on a [Solana Test Validator](https://docs.solana.com/developing/test-validator). However, to use Chainlink products on Solana, you must deploy your contract on-chain to one of the [supported Solana clusters](#chainlink-products-and-solana-clusters).\r\n\r\n:::note\r\nPlease note that Price Feeds performance relies on the chains they are deployed on. Periods of high network congestion may impact the frequency of Chainlink Price Feeds. Subscribe to [Solana status](https://status.solana.com/) notifications to stay updated on system performance.\r\n:::\r\n\r\nTo learn how to mitigate risk to your applications, read the [Selecting Quality Data Feeds](/data-feeds/selecting-data-feeds/) page.\r\n\r\n## Chainlink products and Solana clusters\r\n\r\n[Data Feeds](/solana/data-feeds/data-feeds-solana/) are available on the following Solana clusters:\r\n\r\n- [Solana Mainnet](https://solscan.io/)\r\n- [Solana Devnet](https://solscan.io/?cluster=devnet)\r\n\r\nSolana provides a [Testnet cluster](https://docs.solana.com/clusters#testnet) that runs newer [Solana releases](https://github.com/solana-labs/solana/releases), but Chainlink Data Feeds are not available on this cluster.\r\n\r\nSee the [Solana Data Feeds](/solana/data-feeds/data-feeds-solana/) page for a full list of Chainlink data feeds that are available on Solana.\r\n\r\nTo learn when more Chainlink services become available, follow us on [Twitter](https://twitter.com/chainlink) or sign up for our [mailing list](/resources/developer-communications/).\r\n\r\n## Languages, tools, and frameworks\r\n\r\nThe examples in the Chainlink documentation use the following languages, tools, and frameworks:\r\n\r\n- [Node.js 14 or higher](https://nodejs.org/en/download/): Used to run client code\r\n- [Rust](https://docs.solana.com/developing/on-chain-programs/developing-rust): A general-purpose programming language designed for performance and memory safety\r\n- [Anchor](https://project-serum.github.io/anchor/getting-started/introduction.html): A framework for the [Solana Sealevel runtime](https://github.com/solana-labs/sealevel) that provides several developer tools\r\n- [Chainlink Solana Starter Kit](https://github.com/smartcontractkit/solana-starter-kit): An Anchor based program and client that shows developers how to use and interact with Chainlink Data Feeds on Solana\r\n- [Solana CLI](https://docs.solana.com/cli): The Solana command line interface\r\n- [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git): Used to clone the example code repository\r\n\r\nWhen developing applications to use Chainlink products on Solana, always use a [Mainnet release](https://github.com/solana-labs/solana/releases) version of the Solana CLI that is equal to or greater than the version currently running on your target cluster. Use `solana --version` and `solana cluster-version` to check CLI and cluster versions:\r\n\r\n```shell\r\nsolana --version\r\nsolana-cli 1.9.28 (src:b576e9cc; feat:320703611)\r\n\r\nsolana cluster-version --url devnet\r\n1.9.25\r\n\r\nsolana cluster-version --url mainnet-beta\r\n1.9.28\r\n```\r\n\r\nThe examples in this documentation use Solana programs in [Rust](https://docs.solana.com/developing/on-chain-programs/developing-rust), but you can also write Solana programs in [C](https://docs.solana.com/developing/on-chain-programs/developing-c). To learn more about the Solana programming model, see the [Solana Documentation](https://docs.solana.com/developing/programming-model/overview).\r\n\r\n## Solana Wallets\r\n\r\nWhen you use Chainlink on Solana, you need a [Solana wallet](https://docs.solana.com/wallet-guide/). The Chainlink documentation uses [file system wallets](https://docs.solana.com/wallet-guide/file-system-wallet) and free Devnet SOL tokens to demonstrate examples. When you deploy your programs to the Solana Mainnet, you must use wallets with mainnet lamports.\r\n\r\nIf you have existing wallets that you want to use for the guides in the Chainlink documentation, find your wallet keypair and make it available in your development environment as a file. You can point [Anchor](https://project-serum.github.io/anchor/getting-started/introduction.html) and the [Solana CLI](https://docs.solana.com/cli) to a specific keypair when you deploy or manage your Solana programs.\r\n\r\n```shell\r\nanchor build\r\n⋮\r\n\r\nanchor deploy --provider.wallet ~/.config/solana/id.json --provider.cluster devnet\r\n⋮\r\n\r\nsolana program show --programs --keypair ~/.config/solana/id.json --url devnet\r\n\r\nProgram Id                                   | Slot      | Authority                                    | Balance\r\n6U4suTp55kiJRKqV7HGAQvFgcLaStLnUA4myg5DRqsKw | 109609728 | E6gKKToCJPgf4zEL1GRLL6T99g2WcfAzJAMvtma1KijT | 2.57751768 SOL\r\n```\r\n\r\nWhen you build your production applications and deploy Solana programs to the Mainnet cluster, always follow the security best practices in the [Solana Wallet Guide](https://docs.solana.com/wallet-guide) for managing your wallets and keypairs.\r\n"
    },
    {
      "title": "Chainlink VRF API Reference [v1]",
      "headings": [
        {
          "depth": 2,
          "slug": "index",
          "text": "Index"
        },
        {
          "depth": 3,
          "slug": "constructors",
          "text": "Constructors"
        },
        {
          "depth": 3,
          "slug": "functions",
          "text": "Functions"
        },
        {
          "depth": 2,
          "slug": "constructor",
          "text": "Constructor"
        },
        {
          "depth": 2,
          "slug": "functions-1",
          "text": "Functions"
        },
        {
          "depth": 3,
          "slug": "requestrandomness",
          "text": "requestRandomness"
        },
        {
          "depth": 3,
          "slug": "fulfillrandomness",
          "text": "fulfillRandomness"
        },
        {
          "depth": 2,
          "slug": "reference",
          "text": "Reference"
        },
        {
          "depth": 3,
          "slug": "maximizing-security",
          "text": "Maximizing security"
        }
      ],
      "url": "/vrf/v1/api-reference",
      "section": "legacy",
      "description": "API reference for VRFConsumerBase.",
      "content": "\n<VrfCommon />\n\nAPI reference for [`VRFConsumerBase`](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/VRFConsumerBase.sol).\n\n## Index\n\n### Constructors\n\n| Name                        | Description                         |\n| --------------------------- | ----------------------------------- |\n| [constructor](#constructor) | Initialize your consuming contract. |\n\n### Functions\n\n| Name                                    | Description                                                  |\n| --------------------------------------- | ------------------------------------------------------------ |\n| [requestRandomness](#requestrandomness) | Make a request to the VRFCoordinator.                        |\n| [fulfillRandomness](#fulfillrandomness) | Called by VRFCoordinator when it receives a valid VRF proof. |\n\n---\n\n## Constructor\n\nInitialize your consuming contract.\n\n```solidity\nconstructor(address _vrfCoordinator, address _link)\n```\n\n- `_vrfCoordinator`: Address of the Chainlink VRF Coordinator. See [Chainlink VRF Addresses](/vrf/v1/supported-networks/) for details.\n- `_link`: Address of the LINK token. See [LINK Token Addresses](/resources/link-token-contracts/) for details.\n\n---\n\n> Note: `_seed` has recently been deprecated.\n\n## Functions\n\n### requestRandomness\n\nMake a request to the VRF coordinator.\n\n```solidity\nfunction requestRandomness(bytes32 _keyHash, uint256 _fee)\n    public returns (bytes32 requestId)\n```\n\n- `_keyHash`: The public key against which randomness is generated. See [Chainlink VRF supported networks](/vrf/v1/supported-networks) for details.\n- `_fee`: The fee, in LINK, for the request. Specified by the oracle.\n- `RETURN`: The ID unique to a single request.\n\n### fulfillRandomness\n\nCalled by VRFCoordinator when it receives a valid VRF proof. Override this function to act upon the random number generated by Chainlink VRF.\n\n```solidity\nfunction fulfillRandomness(bytes32 requestId, uint256 randomness)\n    internal virtual;\n```\n\n- `requestId`: The ID initially returned by `requestRandomness`.\n- `randomness`: The random number generated by Chainlink VRF.\n\n## Reference\n\n### Maximizing security\n\nChainlink VRF provides powerful security guarantees and is easy to integrate. However, smart contract security is a nuanced topic. You can read about the [top security considerations for VRF](/vrf/v1/security).\n"
    },
    {
      "title": "VRF Best Practices [v1]",
      "headings": [
        {
          "depth": 2,
          "slug": "getting-a-random-number-within-a-range",
          "text": "Getting a random number within a range"
        },
        {
          "depth": 2,
          "slug": "getting-multiple-random-numbers",
          "text": "Getting multiple random numbers"
        },
        {
          "depth": 2,
          "slug": "having-multiple-vrf-requests-in-flight",
          "text": "Having multiple VRF requests in flight"
        }
      ],
      "url": "/vrf/v1/best-practices",
      "section": "legacy",
      "description": "Best pracices for using Chainlink VRF.",
      "content": "\n<VrfCommon />\n\nBest are the practices for using Chainlink VRF.\n\n## Getting a random number within a range\n\nIf you need to generate a random number within a given range, you use [modulo](https://docs.soliditylang.org/en/v0.8.17/types.html#modulo) to define the limits of your range. Below you can see how to get a random number between 1 and 50.\n\n```solidity\nuint256 public randomResult;\n\nfunction fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\n    randomResult = (randomness % 50) + 1;\n}\n```\n\n## Getting multiple random numbers\n\nIf you want to get multiple random numbers from a single VRF response, you should create an array where the `randomValue` is your original returned VRF number and `n` is the desired number of random numbers.\n\n```solidity\nfunction expand(uint256 randomValue, uint256 n) public pure returns (uint256[] memory expandedValues) {\n  expandedValues = new uint256[](n);\n  for (uint256 i = 0; i < n; i++) {\n    expandedValues[i] = uint256(keccak256(abi.encode(randomValue, i)));\n  }\n  return expandedValues;\n}\n\n```\n\n## Having multiple VRF requests in flight\n\nIf you want to have multiple VRF requests in flight, you might want to create a mapping between the `requestId` and the address of the requester.\n\n```solidity\nmapping(bytes32 => address) public requestIdToAddress;\n\nfunction getRandomNumber() public returns (bytes32 requestId) {\n    require(LINK.balanceOf(address(this)) >= fee, \"Not enough LINK - fill contract with faucet\");\n    bytes32 requestId =  requestRandomness(keyHash, fee);\n    requestIdToAddress[requestId] = msg.sender;\n}\n\nfunction fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\n    address requestAddress = requestIdToAddress[requestId];\n}\n```\n\nIf you want to keep order when a request was made, you might want to use a mapping of `requestId` to the index/order of this request.\n\n```solidity\nmapping(bytes32 => uint256) public requestIdToRequestNumberIndex;\nuint256 public requestCounter;\n\nfunction getRandomNumber() public returns (bytes32 requestId) {\n    require(LINK.balanceOf(address(this)) >= fee, \"Not enough LINK - fill contract with faucet\");\n    bytes32 requestId =  requestRandomness(keyHash, fee);\n    requestIdToRequestNumberIndex[requestId] = requestCounter;\n    requestCounter += 1;\n}\n\nfunction fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\n    uint256 requestNumber = requestIdToRequestNumberIndex[requestId];\n}\n```\n\nIf you want to keep generated random numbers of several VRF requests, you might want to use a mapping of `requestId` to the returned random number.\n\n```solidity\nmapping(bytes32 => uint256) public requestIdToRandomNumber;\n\nfunction getRandomNumber() public returns (bytes32 requestId) {\n    require(LINK.balanceOf(address(this)) >= fee, \"Not enough LINK - fill contract with faucet\");\n    return requestRandomness(keyHash, fee);\n}\n\nfunction fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\n    requestIdToRandomNumber[requestId] = randomness;\n}\n```\n\nFeel free to use whatever data structure you prefer.\n"
    },
    {
      "title": "Get a Random Number [v1]",
      "headings": [
        {
          "depth": 2,
          "slug": "random-number-consumer",
          "text": "Random Number Consumer"
        },
        {
          "depth": 2,
          "slug": "getting-more-randomness",
          "text": "Getting More Randomness"
        },
        {
          "depth": 2,
          "slug": "network-congestion-and-responsiveness",
          "text": "Network Congestion and Responsiveness"
        }
      ],
      "url": "/vrf/v1/examples/get-a-random-number",
      "section": "legacy",
      "description": "How to generate a random number inside a smart contract using Chainlink VRF.",
      "content": "\n<VrfCommon />\n\nThis page explains how to get a random number inside a smart contract using Chainlink VRF.\n\n## Random Number Consumer\n\nChainlink VRF follows the [Request & Receive Data](/any-api/introduction/) cycle. To consume randomness, your contract should inherit from [VRFConsumerBase](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/VRFConsumerBase.sol) and define two required functions:\n\n- `requestRandomness`, which makes the initial request for randomness.\n- `fulfillRandomness`, which is the function that receives and does something with verified randomness.\n\nThe contract should own enough LINK to pay the specified fee. The beginner walkthrough explains how to [fund your contract](/resources/fund-your-contract/).\n\nNote, the below values have to be configured correctly for VRF requests to work. You can find the respective values for your network in the [VRF Contracts page](/vrf/v1/supported-networks).\n\n- `LINK Token` - LINK token address on the corresponding network (Ethereum, Polygon, BSC, etc)\n- `VRF Coordinator` - address of the Chainlink VRF Coordinator\n- `Key Hash` - public key against which randomness is generated\n- `Fee` - fee required to fulfill a VRF request\n\n:::tip[Security Considerations]\nBe sure to look your contract over with [these security considerations](/vrf/v1/security) in mind!\n:::\n\n:::note[Remember to fund your contract with LINK!]\nRequesting randomness will fail unless your deployed contract has enough LINK to pay for it. **Learn how to [Acquire testnet LINK](/resources/acquire-link/) and [Fund your contract](/resources/fund-your-contract/)**.\n:::\n\n::solidity-remix[/samples/VRF/RandomNumberConsumer.sol]\n\n:::note[Maximum Gas for Callback]\nIf your `fulfillRandomness` function uses more than 200k gas, the transaction will fail.\n:::\n\n## Getting More Randomness\n\nIf you are looking for how to turn a single result into multiple random numbers, check out our guide on [Randomness Expansion](/vrf/v1/best-practices/#getting-multiple-random-numbers).\n\n## Network Congestion and Responsiveness\n\nNetwork congestion can occur on all blockchains from time to time, which may result in transactions taking longer to get included in a block. During times of network congestion, the VRF service will continue responding to randomness requests, but fulfillment response times will corresponding increase based on the level of congestion. It is important you account for this in your use case and set expectations accordingly.\n"
    },
    {
      "title": "Introduction to Chainlink VRF [v1]",
      "headings": [
        {
          "depth": 2,
          "slug": "generate-random-numbers-in-your-smart-contracts",
          "text": "Generate Random Numbers in your Smart Contracts"
        },
        {
          "depth": 2,
          "slug": "on-chain-verification-of-randomness",
          "text": "On-chain Verification of Randomness"
        }
      ],
      "url": "/vrf/v1/introduction",
      "section": "legacy",
      "description": "Learn how to securely generate random numbers for your smart contract with Chainlink VRF (an RNG). This guide uses Solidity code examples.",
      "content": "\n![Chainlink Abstract Banner](/files/a4c6c80-85d09b6-19facd8-banner.png)\n\n<VrfCommon />\n\n## Generate Random Numbers in your Smart Contracts\n\nChainlink VRF (Verifiable Random Function) is a provably-fair and verifiable source of randomness designed for smart contracts. Smart contract developers can use Chainlink VRF as a tamper-proof random number generator (RNG) to build reliable smart contracts for any applications which rely on unpredictable outcomes:\n\n- Blockchain games and NFTs\n- Random assignment of duties and resources (e.g. randomly assigning judges to cases)\n- Choosing a representative sample for consensus mechanisms\n\nLearn how to write smart contracts that consume random numbers: [Get a Random Number](/vrf/v1/examples/get-a-random-number/).\n\n## On-chain Verification of Randomness\n\nChainlink VRF enables smart contracts to access randomness without compromising on security or usability. With every new request for randomness, Chainlink VRF generates a random number and cryptographic proof of how that number was determined. The proof is published and verified on-chain before it can be used by any consuming applications. This process ensures that the results cannot be tampered with nor manipulated by anyone, including oracle operators, miners, users and even smart contract developers.\n\nRead more about Chainlink VRF in [our announcement post](https://blog.chain.link/verifiable-random-functions-vrf-random-number-generation-rng-feature/).\n"
    },
    {
      "title": "VRF Security Considerations [v1]",
      "headings": [
        {
          "depth": 2,
          "slug": "use-requestid-to-match-randomness-requests-with-their-fulfillment-in-order",
          "text": "Use requestId to match randomness requests with their fulfillment in order"
        },
        {
          "depth": 2,
          "slug": "choose-a-safe-block-confirmation-time-which-will-vary-between-blockchains",
          "text": "Choose a safe block confirmation time, which will vary between blockchains"
        },
        {
          "depth": 2,
          "slug": "do-not-re-request-randomness-even-if-you-dont-get-an-answer-right-away",
          "text": "Do not re-request randomness, even if you don’t get an answer right away"
        },
        {
          "depth": 2,
          "slug": "dont-accept-bidsbetsinputs-after-you-have-made-a-randomness-request",
          "text": "Don’t accept bids/bets/inputs after you have made a randomness request"
        },
        {
          "depth": 2,
          "slug": "fulfillrandomness-must-not-revert",
          "text": "fulfillRandomness must not revert"
        },
        {
          "depth": 2,
          "slug": "use-vrfconsumerbase-in-your-contract-to-interact-with-the-vrf-service",
          "text": "Use VRFConsumerBase in your contract, to interact with the VRF service"
        }
      ],
      "url": "/vrf/v1/security",
      "section": "legacy",
      "content": "\n<VrfCommon />\n\nGaining access to high quality randomness on-chain requires a solution like Chainlink's VRF, but it also requires you to understand some of the ways that randonmess generation can be manipulated by miners/validators. Here are some of the top security considerations you should review in your project.\n\n- [Use `requestId` to match randomness requests with their fulfillment in order](#use-requestid-to-match-randomness-requests-with-their-fulfillment-in-order)\n- [Choose a safe block confirmation time, which will vary between blockchains](#choose-a-safe-block-confirmation-time-which-will-vary-between-blockchains)\n- [Do not re-request randomness, even if you don't get an answer right away](#do-not-re-request-randomness-even-if-you-dont-get-an-answer-right-away)\n- [Don't accept bids/bets/inputs after you have made a randomness request](#dont-accept-bidsbetsinputs-after-you-have-made-a-randomness-request)\n- [`fulfillRandomness` must not revert](#fulfillrandomness-must-not-revert)\n- [Use `VRFConsumerBase` in your contract, to interact with the VRF service](#use-vrfconsumerbase-in-your-contract-to-interact-with-the-vrf-service)\n\n## Use `requestId` to match randomness requests with their fulfillment in order\n\nIf your contract could have multiple VRF requests in flight simultaneously, you must ensure that the order in which the VRF fulfillments arrive cannot be used to manipulate your contract's user-significant behavior.\n\nBlockchain miners/validators can control the order in which your requests appear on-chain, and hence the order in which your contract responds to them.\n\nFor example, if you made randomness requests `A`, `B`, `C` in short succession, there is no guarantee that the associated randomness fulfillments will also be in order `A`, `B`, `C`. The randomness fulfillments might just as well arrive at your contract in order `C`, `A`, `B` or any other order.\n\nWe recommend using the `requestID` to match randomness requests with their corresponding fulfillments.\n\n## Choose a safe block confirmation time, which will vary between blockchains\n\n:::note[Customizing block confirmation time]\n[Reach out to customize your VRF block confirmation time](https://chainlinkcommunity.typeform.com/to/OYQO67EF) as this configuration must be done on the VRF service, and cannot be configured as part of a VRF request.\n:::\n\nIn principle, miners and validators of your underlying blockchain could rewrite the chain's history to put a randomness request from your contract into a different block, which would result in a different VRF output. Note that this does not enable a miner to determine the random value in advance. It only enables them to get a fresh random value that may or not be to their advantage. By way of analogy, they can only re-roll the dice, not predetermine or predict which side it will land on.\n\nYou must choose an appropriate confirmation time for the randomness requests you make (i.e. how many blocks the the VRF service waits before writing a fulfillment to the chain) to make such rewrite attacks unprofitable in the context of your application and its value-at-risk.\n\nOn proof-of-stake blockchains (e.g. BSC, Polygon), what block confirmation time is considered secure depends on the specifics of their consensus mechanism and whether you're willing to trust any underlying assumptions of (partial) honesty of validators.\n\nFor further details, take a look at the consensus documentation for the chain you want to use:\n\n- [Ethereum Consensus Mechanisms](https://ethereum.org/en/developers/docs/consensus-mechanisms/)\n- [BNB Chain Consensus Docs](https://docs.binance.org/smart-chain/guides/concepts/consensus.html)\n- [Polygon Consensus Docs](https://docs.matic.network/docs/contribute/bor/consensus/)\n\nUnderstanding the blockchains you build your application on is very important. You should take time to understand [chain reorganization](https://blog.ethereum.org/2015/08/08/chain-reorganisation-depth-expectations/) which will also result in a different VRF output, which could be exploited.\n\n## Do not re-request randomness, even if you don't get an answer right away\n\nDoing so would give the VRF service provider the option to withhold a VRF fulfillment, if it doesn't like the outcome, and wait for the re-request in the hopes that it gets a better outcome, similar to the considerations with block confirmation time.\n\n## Don't accept bids/bets/inputs after you have made a randomness request\n\nConsider the example of a contract that mints a random NFT in response to a users' actions.\n\nThe contract should:\n\n1. record whatever actions of the user may affect the generated NFT\n1. **stop accepting further user actions that may affect the generated NFT** and issue a randomness request\n1. on randomness fulfillment, mint the NFT\n\nGenerally speaking, whenever an outcome in your contract depends on some user-supplied inputs and randomness, the contract should not accept any additional user-supplied inputs once the randomness request has been issued.\n\nOtherwise, the cryptoeconomic security properties may be violated by an attacker that can rewrite the chain.\n\n## `fulfillRandomness` must not revert\n\nIf your fulfillRandomness implementation reverts, the VRF service will not attempt to call it a second time. Make sure your contract logic does not revert. Consider simply storing the randomness and taking more complex follow-on actions in separate contract calls made by you or your users.\n\n## Use `VRFConsumerBase` in your contract, to interact with the VRF service\n\n`VRFConsumerBase` tracks important state which needs to be synchronized with the `VRFCoordinator` state. Some users fold `VRFConsumerBase` into their own contracts, but this means taking on significant extra complexity, so we advise against doing so.\n\nAlong the same lines, don't override `rawFulfillRandomness`.\n"
    },
    {
      "title": "Chainlink VRF Supported Networks [v1]",
      "headings": [
        {
          "depth": 2,
          "slug": "polygon-matic-mainnet",
          "text": "Polygon (Matic) Mainnet"
        },
        {
          "depth": 2,
          "slug": "polygon-matic-mumbai-testnet",
          "text": "Polygon (Matic) Mumbai Testnet"
        },
        {
          "depth": 2,
          "slug": "bnb-chain-mainnet",
          "text": "BNB Chain Mainnet"
        },
        {
          "depth": 2,
          "slug": "bnb-chain-testnet",
          "text": "BNB Chain Testnet"
        },
        {
          "depth": 2,
          "slug": "ethereum-mainnet",
          "text": "Ethereum Mainnet"
        },
        {
          "depth": 2,
          "slug": "goerli",
          "text": "Goerli"
        }
      ],
      "url": "/vrf/v1/supported-networks",
      "section": "legacy",
      "content": "\n<VrfCommon />\n\nChainlink VRF allows you to integrate provably-fair and verifiably random data in your smart contract.\n\nFor implementation details, read [Introduction to Chainlink VRF](/vrf/v1/introduction).\n\n## Polygon (Matic) Mainnet\n\n:::tip[Important]\nThe LINK provided by the [Polygon (Matic) Bridge](https://wallet.polygon.technology/bridge) is not ERC-677 compatible, so cannot be used with Chainlink oracles. However, it can be [**converted to the official LINK token on Polygon (Matic) using Chainlink's PegSwap service**](https://pegswap.chain.link/)\n:::\n\n| Item            | Value                                                                |\n| --------------- | -------------------------------------------------------------------- |\n| LINK Token      | `0xb0897686c545045aFc77CF20eC7A532E3120E0F1`                         |\n| VRF Coordinator | `0x3d2341ADb2D31f1c5530cDC622016af293177AE0`                         |\n| Key Hash        | `0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da` |\n| Fee             | 0.0001 LINK                                                          |\n\n:::note[VRF Response Times on Polygon]\nVRF responses are generated after 10 block confirmations on Polygon by default. Please [get in touch with us](https://chainlinkcommunity.typeform.com/to/OYQO67EF?page=docs-VRF) if you require VRF responses to be generated after a higher number of block confirmations, based on what you feel is best for achieving secure finality times on Polygon.\n:::\n\n## Polygon (Matic) Mumbai Testnet\n\n:::note[Mumbai Faucet]\nTestnet LINK and MATIC are available from [the official Matic faucet](https://faucet.polygon.technology/) and https://faucets.chain.link/mumbai.\n:::\n\n| Item            | Value                                                                |\n| --------------- | -------------------------------------------------------------------- |\n| LINK Token      | `0x326C977E6efc84E512bB9C30f76E30c160eD06FB`                         |\n| VRF Coordinator | `0x8C7382F9D8f56b33781fE506E897a4F1e2d17255`                         |\n| Key Hash        | `0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4` |\n| Fee             | 0.0001 LINK                                                          |\n\n## BNB Chain Mainnet\n\n:::tip[Important]\nThe LINK provided by the [BNB Chain Bridge](https://www.bnbchain.world/en/bridge) is not ERC-677 compatible, so cannot be used with Chainlink oracles. However, it can be [**converted to the official LINK token on BNB Chain using Chainlink's PegSwap service**](https://pegswap.chain.link/).\n:::\n\n| Item            | Value                                                                                                                                                                                                    |\n| --------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| LINK Token      | `0x404460C6A5EdE2D891e8297795264fDe62ADBB75`                                                                                                                                                             |\n| VRF Coordinator | `0x747973a5A2a4Ae1D3a8fDF5479f1514F65Db9C31`                                                                                                                                                             |\n| Key Hash        | `0xc251acd21ec4fb7f31bb8868288bfdbaeb4fbfec2df3735ddbd4f7dc8d60103c`                                                                                                                                     |\n| Fee             | 0.2 LINK - initial fees on BNB Chain are meant to cover the highest gas cost prices. To use VRF more efficiently, please [contact us](https://chainlinkcommunity.typeform.com/to/OYQO67EF?page=docs-VRF) |\n\n:::note[Early Access]\nFor the most efficient consumption of Chainlink VRF on BNB Chain, please contact us using [this form](https://chainlinkcommunity.typeform.com/to/OYQO67EF?page=docs-VRF) to create a payment channel, through which we can provide VRF to you at the cost of BNB Chain network gas fees. You will only be paying in LINK for the gas costs incurred by the Chainlink VRF service from calling your smart contract.\n:::\n\n## BNB Chain Testnet\n\n:::note[BNB Chain Faucet]\nTestnet LINK is available from https://faucets.chain.link/chapel\n:::\n\n| Item            | Value                                                                 |\n| --------------- | --------------------------------------------------------------------- |\n| LINK            | `0x84b9B910527Ad5C03A9Ca831909E21e236EA7b06`                          |\n| VRF Coordinator | `0xa555fC018435bef5A13C6c6870a9d4C11DEC329C `                         |\n| Key Hash        | `0xcaf3c3727e033261d383b315559476f48034c13b18f8cafed4d871abe5049186 ` |\n| Fee             | 0.1 LINK                                                              |\n\n## Ethereum Mainnet\n\n| Item            | Value                                                                                                                                                                                                 |\n| --------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| LINK Token      | `0x514910771AF9Ca656af840dff83E8264EcF986CA`                                                                                                                                                          |\n| VRF Coordinator | `0xf0d54349aDdcf704F77AE15b96510dEA15cb7952`                                                                                                                                                          |\n| Key Hash        | `0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445`                                                                                                                                  |\n| Fee             | 2 LINK - initial fees on Ethereum are meant to cover the highest gas cost prices. To use VRF more efficiently, please [contact us](https://chainlinkcommunity.typeform.com/to/OYQO67EF?page=docs-VRF) |\n\n:::note[Early Access]\nFor the most efficient consumption of Chainlink VRF on Ethereum, please contact us using [this form](https://chainlinkcommunity.typeform.com/to/OYQO67EF?page=docs-VRF) to create a payment channel, through which we can provide VRF to you at the cost of Ethereum network gas fees. You will only be paying in LINK for the gas costs incurred by the Chainlink VRF service from calling your smart contract.\n:::\n\n## Goerli\n\n:::note[Goerli Faucets]\nTestnet LINK is available from https://faucets.chain.link/goerli<br/>\nTestnet ETH is available from https://goerlifaucet.com/ or faucets listed at https://faucetlink.to/goerli\n:::\n\n| Item            | Value                                                                |\n| --------------- | -------------------------------------------------------------------- |\n| LINK            | `0x326C977E6efc84E512bB9C30f76E30c160eD06FB`                         |\n| VRF Coordinator | `0x2bce784e69d2Ff36c71edcB9F88358dB0DfB55b4`                         |\n| Key Hash        | `0x0476f9a745b61ea5c0ab224d3a6e4c99f0b02fce4da01143a4f70aa80ae76e8a` |\n| Fee             | 0.1 LINK                                                             |\n"
    },
    {
      "title": "VRF Best Practices",
      "headings": [
        {
          "depth": 2,
          "slug": "getting-a-random-number-within-a-range",
          "text": "Getting a random number within a range"
        },
        {
          "depth": 2,
          "slug": "getting-multiple-random-values",
          "text": "Getting multiple random values"
        },
        {
          "depth": 2,
          "slug": "processing-simultaneous-vrf-requests",
          "text": "Processing simultaneous VRF requests"
        },
        {
          "depth": 2,
          "slug": "processing-vrf-responses-through-different-execution-paths",
          "text": "Processing VRF responses through different execution paths"
        }
      ],
      "url": "/vrf/v2/best-practices",
      "section": "ethereum",
      "description": "Best pracices for using Chainlink VRF.",
      "content": "\n<VrfCommon callout=\"common\"/>\n\nThese are example best practices for using Chainlink VRF. To explore more applications of VRF, refer to our [blog](https://blog.chain.link/).\n\n## Getting a random number within a range\n\nIf you need to generate a random number within a given range, use [modulo](https://docs.soliditylang.org/en/v0.8.7/types.html#modulo) to define the limits of your range. Below you can see how to get a random number in a range from 1 to 50.\n\n```solidity\nfunction fulfillRandomWords(\n  uint256, /* requestId */\n  uint256[] memory randomWords\n) internal override {\n  // Assuming only one random word was requested.\n  s_randomRange = (randomWords[0] % 50) + 1;\n}\n\n```\n\n## Getting multiple random values\n\nIf you want to get multiple random values from a single VRF request, you can request this directly with the `numWords` argument:\n\n- If you are using the VRF v2 subscription method, see the [Get a Random Number](/vrf/v2/subscription/examples/get-a-random-number/) guide for an example where one request returns multiple random values.\n- If you are using the VRF v2 direct funding method, see the [Get a Random Number](/vrf/v2/direct-funding/examples/get-a-random-number/) guide for an example where one request returns multiple random values.\n\n## Processing simultaneous VRF requests\n\nIf you want to have multiple VRF requests processing simultaneously, create a mapping between `requestId` and the response. You might also create a mapping between the `requestId` and the address of the requester to track which address made each request.\n\n```solidity\nmapping(uint256 => uint256[]) public s_requestIdToRandomWords;\nmapping(uint256 => address) public s_requestIdToAddress;\nuint256 public s_requestId;\n\nfunction requestRandomWords() external onlyOwner returns (uint256) {\n  uint256 requestId = COORDINATOR.requestRandomWords(\n    keyHash,\n    s_subscriptionId,\n    requestConfirmations,\n    callbackGasLimit,\n    numWords\n  );\n  s_requestIdToAddress[requestId] = msg.sender;\n\n  // Store the latest requestId for this example.\n  s_requestId = requestId;\n\n  // Return the requestId to the requester.\n  return requestId;\n}\n\nfunction fulfillRandomWords(\n    uint256 requestId,\n    uint256[] memory randomWords\n  ) internal override {\n  // You can return the value to the requester,\n  // but this example simply stores it.\n  s_requestIdToRandomWords[requestId] = randomWords;\n}\n```\n\nYou could also map the `requestId` to an index to keep track of the order in which a request was made.\n\n```solidity\nmapping(uint256 => uint256) s_requestIdToRequestIndex;\nmapping(uint256 => uint256[]) public s_requestIndexToRandomWords;\nuint256 public requestCounter;\n\nfunction requestRandomWords() external onlyOwner {\n  uint256 requestId = COORDINATOR.requestRandomWords(\n    keyHash,\n    s_subscriptionId,\n    requestConfirmations,\n    callbackGasLimit,\n    numWords\n  );\n  s_requestIdToRequestIndex[requestId] = requestCounter;\n  requestCounter += 1;\n}\n\nfunction fulfillRandomWords(\n    uint256 requestId,\n    uint256[] memory randomWords\n  ) internal override {\n  uint256 requestNumber = s_requestIdToRequestIndex[requestId];\n  s_requestIndexToRandomWords[requestNumber] = randomWords;\n}\n```\n\n## Processing VRF responses through different execution paths\n\nIf you want to process VRF responses depending on predetermined conditions, you can create an `enum`. When requesting for randomness, map each `requestId` to an enum. This way, you can handle different execution paths in `fulfillRandomWords`. See the following example:\n\n::solidity-remix[samples/VRF/VRFv2MultiplePaths.sol]\n"
    },
    {
      "title": "Get a Random Number",
      "headings": [
        {
          "depth": 2,
          "slug": "requirements",
          "text": "Requirements"
        },
        {
          "depth": 2,
          "slug": "create-and-deploy-a-vrf-v2-compatible-contract",
          "text": "Create and deploy a VRF v2 compatible contract"
        },
        {
          "depth": 2,
          "slug": "fund-your-contract",
          "text": "Fund Your Contract"
        },
        {
          "depth": 2,
          "slug": "request-random-values",
          "text": "Request random values"
        },
        {
          "depth": 2,
          "slug": "analyzing-the-contract",
          "text": "Analyzing the contract"
        },
        {
          "depth": 2,
          "slug": "clean-up",
          "text": "Clean up"
        }
      ],
      "url": "/vrf/v2/direct-funding/examples/get-a-random-number",
      "section": "ethereum",
      "description": "How to generate a random number inside a smart contract using Chainlink VRF v2 - Direct funding method.",
      "content": "\n<VrfCommon callout=\"directFunding\"/>\n\nThis guide explains how to get random values using a simple contract to request and receive random values from Chainlink VRF v2 without managing a subscription. To explore more applications of VRF, refer to our [blog](https://blog.chain.link/).\n\n**Topics**\n\n- [Requirements](#requirements)\n- [Create and deploy a VRF v2 compatible contract](#create-and-deploy-a-vrf-v2-compatible-contract)\n- [Fund your contract](#fund-your-contract)\n- [Request random values](#request-random-values)\n- [Analyzing the contract](#analyzing-the-contract)\n- [Clean up](#clean-up)\n\n## Requirements\n\nThis guide assumes that you know how to create and deploy smart contracts on Ethereum testnets using the following tools:\n\n- [The Remix IDE](https://remix.ethereum.org/)\n- [MetaMask](https://metamask.io/)\n- [Goerli testnet ETH](/resources/link-token-contracts/#goerli-testnet)\n\nIf you are new to developing smart contracts on Ethereum, see the [Getting Started](/getting-started/conceptual-overview/) guide to learn the basics.\n\n## Create and deploy a VRF v2 compatible contract\n\nFor this example, use the [VRFv2DirectFundingConsumer.sol](https://remix.ethereum.org/#url=https://docs.chain.link/samples/VRF/VRFv2DirectFundingConsumer.sol) sample contract. This contract imports the following dependencies:\n\n- `VRFV2WrapperConsumerBase.sol`[(link)](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/VRFV2WrapperConsumerBase.sol)\n- `ConfirmedOwner.sol`[(link)](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/ConfirmedOwner.sol)\n\nThe contract also includes pre-configured values for the necessary request parameters such as `callbackGasLimit`, `requestConfirmations`, the number of random words `numWords`, the VRF v2 Wrapper address `wrapperAddress`, and the LINK token address `linkAddress`. You can change these parameters if you want to experiment on different testnets.\n\nBuild and deploy the contract on Goerli.\n\n1. Open the [`VRFv2DirectFundingConsumer.sol` contract](https://remix.ethereum.org/#url=https://docs.chain.link/samples/VRF/VRFv2DirectFundingConsumer.sol) in Remix.\n\n   <!-- prettier-ignore -->\n   <CodeSample src=\"samples/VRF/VRFv2DirectFundingConsumer.sol\" showButtonOnly/>\n\n1. On the **Compile** tab in Remix, compile the `VRFv2DirectFundingConsumer` contract.\n\n1. Configure your deployment. On the **Deploy** tab in Remix, select the **Injected Web3 Environment** and select the `VRFv2DirectFundingConsumer` contract from the contract list.\n\n1. Click the **Deploy** button to deploy your contract on-chain. MetaMask opens and asks you to confirm the transaction.\n\n1. After you deploy your contract, copy the address from the **Deployed Contracts** list in Remix. Before you can request randomness from VRF v2, you must fund your consuming contract with enough LINK tokens in order to request for randomness. Next, [fund your contract](#fund-your-contract).\n\n## Fund Your Contract\n\nRequests for randomness will fail unless your consuming contract has enough LINK. Learn how to [Acquire testnet LINK](/resources/acquire-link/) and [Fund your contract](/resources/fund-your-contract/). For this example, funding with 2 LINK should be sufficient.\n\n## Request random values\n\nThe deployed contract requests random values from Chainlink VRF, receives those values, builds a struct `RequestStatus` containing them, and stores the struct in a mapping `s_requests`. Run the `requestRandomWords()` function on your contract to start the request.\n\n1. Return to Remix and view your deployed contract functions in the **Deployed Contracts** list.\n\n1. Click the `requestRandomWords()` function to send the request for random values to Chainlink VRF. MetaMask opens and asks you to confirm the transaction. **Note** Remix IDE doesn't set the right gas limit. For this example to work, set a gas limit of _400,000_ as explained [here](https://metamask.zendesk.com/hc/en-us/articles/360022895972). After you approve the transaction, Chainlink VRF processes your request. Chainlink VRF fulfills the request and returns the random values to your contract in a callback to the `fulfillRandomWords()` function. At this point, a new key `requestId` is added to the mapping `s_requests`.\n\n   Depending on current testnet conditions, it might take a few minutes for the callback to return the requested random values to your contract.\n\n1. To fetch the request ID of your request, call `lastRequestId()`.\n\n1. After the oracle returns the random values to your contract, the mapping `s_requests` is updated. The received random values are stored in `s_requests[_requestId].randomWords`.\n\n1. Call `getRequestStatus()` and specify the `requestId` to display the random words.\n\n:::note[Note on Requesting Randomness]\nDo not re-request randomness even if you do **not** receive an answer right away. Doing so would give the VRF service provider the option to withhold a VRF fulfillment, if it doesn't like the outcome, and wait for the re-request in the hopes that it gets a better outcome. This is similar to the considerations with block confirmation time. For more information, see the [VRF Security Considerations](/vrf/v2/security/) page.\n:::\n\n## Analyzing the contract\n\nIn this example, the consuming contract uses static configuration parameters.\n\n::solidity-remix[samples/VRF/VRFv2DirectFundingConsumer.sol]\n\nThe parameters define how your requests will be processed. You can find the values for your network in the [Supported networks](/vrf/v2/direct-funding/supported-networks/) page.\n\n- `uint32 callbackGasLimit`: The limit for how much gas to use for the callback request to your contract's `fulfillRandomWords()` function. It must be less than the `maxGasLimit` limit on the coordinator contract minus the `wrapperGasOverhead`. See the [VRF v2 Direct funding limits](/vrf/v2/direct-funding/#limits) for more details. Adjust this value for larger requests depending on how your `fulfillRandomWords()` function processes and stores the received random values. If your `callbackGasLimit` is not sufficient, the callback will fail and your consuming contract is still charged for the work done to generate your requested random values.\n\n- `uint16 requestConfirmations`: How many confirmations the Chainlink node should wait before responding. The longer the node waits, the more secure the random value is. It must be greater than the `minimumRequestBlockConfirmations` limit on the coordinator contract.\n\n- `uint32 numWords`: How many random values to request. If you can use several random values in a single callback, you can reduce the amount of gas that you spend per random value. The total cost of the callback request depends on how your `fulfillRandomWords()` function processes and stores the received random values, so adjust your `callbackGasLimit` accordingly.\n\nThe contract includes the following functions:\n\n- `requestRandomWords()`: Takes your specified parameters and submits the request to the VRF v2 Wrapper contract.\n\n- `fulfillRandomWords()`: Receives random values and stores them with your contract.\n\n- `getRequestStatus()`: Retrive request details for a given `_requestId`.\n\n- `withdrawLink()`: At any time, the owner of the contract can withdraw outstanding LINK balance from it.\n\n:::note[Security Considerations]\nBe sure to review your contracts to make sure they follow the best practices on the [security considerations](/vrf/v2/security/) page.\n:::\n\n## Clean up\n\nAfter you are done with this contract, you can retrieve the remaining testnet LINK to use with other examples.\n\n1. Call `withdrawLink()` function. MetaMask opens and asks you to confirm the transaction. After you approve the transaction, the remaining LINK will be transfered from your consuming contract to your wallet address.\n"
    },
    {
      "title": "Direct Funding Method",
      "headings": [
        {
          "depth": 2,
          "slug": "vrf-direct-funding",
          "text": "VRF Direct funding"
        },
        {
          "depth": 2,
          "slug": "request-and-receive-data",
          "text": "Request and Receive Data"
        },
        {
          "depth": 3,
          "slug": "end-to-end-diagram",
          "text": "End To End Diagram"
        },
        {
          "depth": 3,
          "slug": "explanation",
          "text": "Explanation"
        },
        {
          "depth": 2,
          "slug": "limits",
          "text": "Limits"
        }
      ],
      "url": "/vrf/v2/direct-funding",
      "section": "ethereum",
      "description": "Learn how to securely generate random numbers for your smart contract with Chainlink VRF v2. This guide uses the Direct funding method.",
      "content": "\n<VrfCommon callout=\"directFunding\"/>\n\nThis guide explains how to generate random numbers using the Direct funding method. This method doesn't require a subscription and is optimal for one-off requests for randomness. This method also works best for applications where your end-users must pay the fees for VRF because the cost of the request is determined at request time.\n\n**Topics**\n\n- [VRF Direct funding](#vrf-direct-funding)\n- [Request and Receive Data](#request-and-receive-data)\n  - [End To End Diagram](#end-to-end-diagram)\n  - [Explanation](#explanation)\n- [Limits](#limits)\n\n## VRF Direct funding\n\nUnlike the [subscription method](/vrf/v2/subscription/), the Direct funding method does not require you to create subscriptions and pre-fund them. Instead, you must directly fund consuming contracts with LINK tokens before they request randomness.\n\nFor Chainlink VRF v2 to fulfill your requests, you must have a sufficient amount of LINK in your consuming contract. Gas cost calculation includes the following variables:\n\n- **Gas price:** The current gas price, which fluctuates depending on network conditions.\n\n- **Callback gas:** The amount of gas used for the callback request that returns your requested random values.\n\n- **Verification gas:** The amount of gas used to verify randomness on-chain.\n\n- **Wrapper overhead gas:** The amount of gas used by the VRF Wrapper contract. See the [Request and Receive Data](#request-and-receive-data) section for details about the VRF v2 Wrapper contract design.\n\nThe gas price depends on current network conditions. The callback gas depends on your callback function and the number of random values in your request. You define the limits that you are willing to spend for the request with the following variable:\n\n- **Callback gas limit:** Specifies the maximum amount of gas you are willing to spend on the callback request. Define this limit by specifying the `callbackGasLimit` value in your request.\n\n:::note[Note on transaction costs]\n\nBecause the consuming contract directly pays the LINK for the request, the cost is calculated during the request and not during the callback when the randomness is fulfilled. Test your callback function to learn how to correctly estimate the callback gas limit.\n\n- If the gas limit is underestimated, the callback fails and the consuming contract is still charged for the work done to generate the requested random values.\n- If the gas limit is overestimated, the callback function will be executed but your contract is not refunded for the excess gas amount that you paid.\n\nMake sure that your consuming contracts are funded with enough LINK tokens to cover the transaction costs. If the consuming contract doesn't have enough LINK tokens, your request will revert.\n:::\n\n## Request and Receive Data\n\n### End To End Diagram\n\n![Vrf v2 Direct funding method end to end diagram](/images/vrf/v2-direct-funding-e2e.webp)\n\nTwo types of accounts exist in the Ethereum ecosystem:\n\n- EOA (Externally Owned Account): An externally owned account that has a private key and can control a smart contract. Transactions can be initiated only by EOAs.\n- Smart contract: A smart contract that does not have a private key and executes what it has been designed for as a decentralized application.\n\nThe Chainlink VRF v2 solution uses both off-chain and on-chain components:\n\n- [VRF v2 Wrapper (on-chain component)](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/VRFV2Wrapper.sol): A wrapper for the VRF Coordinator that provides an interface for consuming contracts.\n- [VRF v2 Coordinator (on-chain component)](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/VRFCoordinatorV2.sol): A contract designed to interact with the VRF service. It emits an event when a request for randomness is made, and then verifies the random number and proof of how it was generated by the VRF service.\n- VRF service (off-chain component): Listens for requests by subscribing to the VRF Coordinator event logs and calculates a random number based on the block hash and nonce. The VRF service then sends a transaction to the `VRFCoordinator` including the random number and a proof of how it was generated.\n\n### Explanation\n\nRequests to Chainlink VRF v2 follow the [Request & Receive Data](#request-and-receive-data) cycle. The VRF wrapper calls the coordinator to process the request using the following steps:\n\n1. The consuming contract must inherit [VRFV2WrapperConsumerBase](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/VRFV2WrapperConsumerBase.sol) and implement the `fulfillRandomWords` function, which is the _callback VRF function_. Submit your VRF request by calling the `requestRandomness` function in the [VRFV2WrapperConsumerBase](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/VRFV2WrapperConsumerBase.sol) contract. Include the following parameters in your request:\n\n   - `requestConfirmations`: The number of block confirmations the VRF service will wait to respond. The minimum and maximum confirmations for your network can be found [here](/vrf/v2/direct-funding/supported-networks/#configurations).\n   - `callbackGasLimit`: The maximum amount of gas to pay for completing the callback VRF function.\n   - `numWords`: The number of random numbers to request. You can find the maximum number of random values per request for your network in the [Supported networks](/vrf/v2/direct-funding/supported-networks/#configurations) page.\n\n1. The consuming contract calls the [VRFV2Wrapper](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/VRFV2Wrapper.sol) `calculateRequestPrice` function to estimate the total transaction cost to fulfill randomness. Then the consuming contract calls the [LinkToken](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.4/LinkToken.sol) `transferAndCall` function to pay the wrapper with the calculated request price. This method sends LINK tokens and executes the [VRFV2Wrapper](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/VRFV2Wrapper.sol) `onTokenTransfer` logic. This triggers the VRF [VRF Coordinator](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/VRFCoordinatorV2.sol) `requestRandomWords` function to request randomness.\n   The final gas cost to fulfill randomness is estimated based on how much gas is expected for the verification and callback. The total gas cost in wei uses the following formula:\n\n   ```\n   (Gas price * (Verification gas + Callback gas limit + Wrapper gas Overhead)) = total gas cost\n   ```\n\n   The total gas cost is converted to LINK using the ETH/LINK data feed. In the unlikely event that the data feed is unavailable, the VRF Wrapper uses the `fallbackWeiPerUnitLink` value for the conversion instead. The `fallbackWeiPerUnitLink` value is defined in the [VRF v2 Wrapper contract](/vrf/v2/direct-funding/supported-networks/#configurations) for your selected network.\n\n   A LINK premium is then added to the total gas cost. The premium is divided in two parts:\n\n   - Wrapper premium: The premium percentage. You can find the percentage for your network in the [Supported networks](/vrf/v2/direct-funding/supported-networks/#configurations) page.\n   - Coordinator premium: A flat fee. This premium is defined in the `fulfillmentFlatFeeLinkPPMTier1` parameter in millionths of LINK. You can find the flat fee of the coordinator for your network in the [Supported networks](/vrf/v2/direct-funding/supported-networks/#configurations) page.\n\n   ```\n   ((total gas cost * Wrapper premium) + Coordinator premium) = total request cost\n   ```\n\n1. The VRF coordinator emits an event.\n\n1. The event is picked up by the VRF service and waits for the specified number of block confirmations to respond back to the VRF coordinator with the random values and a proof (`requestConfirmations`).\n\n1. The VRF coordinator verifies the proof on-chain. Then, it calls back the wrapper contract `fulfillRandomWords` function.\n\n1. Finally, the VRF Wrapper calls back your consuming contract.\n\n## Limits\n\nYou can see the configuration for each network on the [Supported networks](/vrf/v2/direct-funding/supported-networks/) page. You can also view the full configuration for each VRF v2 Wrapper contract directly in Etherscan. As an example, view the [Ethereum Mainnet VRF v2 Wrapper contract](https://etherscan.io/address/0x5A861794B927983406fCE1D062e00b9368d97Df6#readContract) configuration by calling `getConfig` function.\n\n- Each wrapper has a `maxNumWords` parameter that limits the maximum number of random values you can receive in each request.\n\n:::note[Note on maximum gas limit]\nThe maximum allowed `callbackGasLimit` value for your requests is defined in the [Coordinator contract supported networks](/vrf/v2/subscription/supported-networks/) page. Because the VRF v2 Wrapper adds an overhead, your `callbackGasLimit` must not exceed `maxGasLimit - wrapperGasOverhead`.\n:::\n"
    },
    {
      "title": "Migrating from VRF v1",
      "headings": [
        {
          "depth": 2,
          "slug": "comparison-between-vrf-v1-and-vrf-v2-direct-funding-method",
          "text": "Comparison between VRF v1 and VRF v2 (Direct funding method)"
        },
        {
          "depth": 2,
          "slug": "updating-your-applications-to-use-vrf-v2",
          "text": "Updating your applications to use VRF v2"
        }
      ],
      "url": "/vrf/v2/direct-funding/migration-from-v1",
      "section": "ethereum",
      "content": "\n<VrfCommon callout=\"directFunding\"/>\n\n**Topics**\n\n- [Comparison between VRF v1 and VRF v2 (Direct funding method)](#comparison-between-vrf-v1-and-vrf-v2-direct-funding-method)\n- [Updating your applications to use VRF v2](#updating-your-applications-to-use-vrf-v2)\n\n## Comparison between VRF v1 and VRF v2 (Direct funding method)\n\nThe main similarity between VRF v1 and VRF v2 Direct funding method is that consuming contracts must be funded with LINK to pay for requests. However, Chainlink VRF v2 includes several improvements.\n\n- **Variable Callback Gas Limit:** Chainlink VRF v2 lets you adjust the callback gas limit when your smart contract application receives verifiable randomness. Consuming contracts can execute more complex logic in the callback request function that receives the random values. Tasks involving the delivered randomness are handled during the response process. The new gas limits are higher than the VRF V1 limit, and vary depending on the underlying blockchain that you use. See the gas limits on the [Supported networks](/vrf/v2/direct-funding/supported-networks/) page.\n\n- **More configuration capability:** You can define how many block confirmations must pass before verifiable randomness is generated and delivered on-chain when your application makes a request transaction. The range is from 3 to 200 blocks. VRF V1 always waited 10 blocks on Ethereum before delivering on-chain randomness. Select a value that protects your application from block re-organizations while still providing sufficiently low latency from request to response. See the [Security Considerations](/vrf/v2/security/) page to learn more.\n\n- **Multiple Random Outputs in a Single Request:** The [VRF Wrapper contracts](/vrf/v2/direct-funding/supported-networks/) in VRF v2 allow you to request multiple random numbers (multi-word) in a single on-chain transaction, which reduces gas costs. The fulfillment is also a single transaction, which reduces the latency of responses.\n\n## Updating your applications to use VRF v2\n\nTo modify your existing smart contract code to work with VRF v2, complete the following changes. See the [Get a Random Number](/vrf/v2/direct-funding/examples/get-a-random-number/) guide for an example.\n\n1. Import and inherit the new [`VRFV2WrapperConsumerBase.sol` contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/VRFV2WrapperConsumerBase.sol) and remove the v1 `VRFConsumerBase.sol` import. This contract includes the `fulfillRandomWords` function.\n\n1. Add a `VRFV2WrapperConsumerBase` constructor as shown in the [Get a Random Number](/vrf/v2/direct-funding/examples/get-a-random-number/) example and use the correct VRF v2 Direct funding configuration.\n\n1. You can still call the `requestRandomness` function. However, the v2 `requestRandomness` function requires several different parameters (`callbackGasLimit` , `requestConfirmations` , `numWords`). See the [Supported networks](/vrf/v2/direct-funding/supported-networks/) page to adjust them for your own needs.\n\n1. Change `fulfillRandomness` function calls to `fulfillRandomWords`. Update the call to handle the returned `uint256[]` array instead of the single `uint256` variable.\n"
    },
    {
      "title": "Supported Networks",
      "headings": [
        {
          "depth": 2,
          "slug": "wrapper-parameters",
          "text": "Wrapper Parameters"
        },
        {
          "depth": 2,
          "slug": "coordinator-parameters",
          "text": "Coordinator Parameters"
        },
        {
          "depth": 2,
          "slug": "fee-parameters",
          "text": "Fee Parameters"
        },
        {
          "depth": 2,
          "slug": "configurations",
          "text": "Configurations"
        },
        {
          "depth": 3,
          "slug": "ethereum-mainnet",
          "text": "Ethereum Mainnet"
        },
        {
          "depth": 3,
          "slug": "goerli-testnet",
          "text": "Goerli testnet"
        },
        {
          "depth": 3,
          "slug": "bnb-chain",
          "text": "BNB Chain"
        },
        {
          "depth": 3,
          "slug": "bnb-chain-testnet",
          "text": "BNB Chain testnet"
        },
        {
          "depth": 3,
          "slug": "polygon-matic-mainnet",
          "text": "Polygon (Matic) Mainnet"
        },
        {
          "depth": 3,
          "slug": "polygon-matic-mumbai-testnet",
          "text": "Polygon (Matic) Mumbai Testnet"
        },
        {
          "depth": 3,
          "slug": "avalanche-mainnet",
          "text": "Avalanche Mainnet"
        },
        {
          "depth": 3,
          "slug": "avalanche-fuji-testnet",
          "text": "Avalanche Fuji Testnet"
        },
        {
          "depth": 3,
          "slug": "fantom-mainnet",
          "text": "Fantom Mainnet"
        },
        {
          "depth": 3,
          "slug": "fantom-testnet",
          "text": "Fantom Testnet"
        }
      ],
      "url": "/vrf/v2/direct-funding/supported-networks",
      "section": "ethereum",
      "content": "\n<VrfCommon callout=\"directFunding\"/>\n\nChainlink VRF allows you to integrate provably fair and verifiably random data in your smart contract.\n\nFor implementation details, read [Introduction to Chainlink VRF v2 Direct funding method](/vrf/v2/direct-funding/).\n\n## Wrapper Parameters\n\nThese parameters are configured in the VRF v2 Wrapper contract. You can view these values by running `getConfig` on the VRF v2 Wrapper or by viewing the VRF v2 Wrapper contract in a blockchain explorer.\n\n- `uint32 stalenessSeconds`: How long the VRF v2 Wrapper waits until we consider the ETH/LINK price used for converting gas costs to LINK is stale and use `fallbackWeiPerUnitLink`.\n- `uint32 wrapperGasOverhead`: The gas overhead of the VRF v2 Wrapper's `fulfillRandomWords` function.\n- `uint32 coordinatorGasOverhead`: The gas overhead of the coordinator's `fulfillRandomWords` function.\n- `uint8 maxNumWords`: Maximum number of words that can be requested in a single wrapped VRF request.\n\n## Coordinator Parameters\n\nSome parameters are important to know and are configured in the coordinator contract. You can view these values by running `getConfig` on the coordinator or by viewing the coordinator contract in a blockchain explorer.\n\n- `uint16 minimumRequestConfirmations`: The minimum number of confirmation blocks on VRF requests before oracles respond\n- `uint32 maxGasLimit`: The maximum gas limit supported for a `fulfillRandomWords` callback. Note that you still need to substract the `wrapperGasOverhead` for the accurate limit, as explained in [Direct funding limits](/vrf/v2/direct-funding/#limits).\n\n## Fee Parameters\n\nFee parameters are configured in the VRF v2 Wrapper and the VRF v2 Coordinator contracts and specify the premium you pay per request in addition to the gas cost for the transaction. You can view them by running `getConfig` on the VRF v2 Wrapper:\n\n- The `uint32 fulfillmentFlatFeeLinkPPM` parameter is a flat fee and defines the fees per request specified in millionths of LINK.\n- The `uint8 wrapperPremiumPercentage` parameter defines the premium ratio in percentage. For example, a value of _0_ indicates no premium. A value of _15_ indicates a _15%_ premium.\n\nThe details for calculating the total transaction cost can be found [here](/vrf/v2/direct-funding/#request-and-receive-data).\n\n## Configurations\n\n- [Ethereum Mainnet](#ethereum-mainnet)\n- [Goerli testnet](#goerli-testnet)\n- [BNB Chain](#bnb-chain)\n- [BNB Chain testnet](#bnb-chain-testnet)\n- [Polygon Mainnet](#polygon-matic-mainnet)\n- [Polygon Mumbai Testnet](#polygon-matic-mumbai-testnet)\n- [Avalanche Mainnet](#avalanche-mainnet)\n- [Avalanche Fuji Testnet](#avalanche-fuji-testnet)\n- [Fantom Mainnet](#fantom-mainnet)\n- [Fantom Testnet](#fantom-testnet)\n\n### Ethereum Mainnet\n\n| Item                       | Value                                                                                                                                                                                                        |\n| -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| LINK Token                 | <a class=\"erc-token-address\" id=\"1_0x514910771AF9Ca656af840dff83E8264EcF986CA\" href=\"https://etherscan.io/token/0x514910771AF9Ca656af840dff83E8264EcF986CA\">`0x514910771AF9Ca656af840dff83E8264EcF986CA`</a> |\n| VRF Wrapper                | [`0x5A861794B927983406fCE1D062e00b9368d97Df6`](https://etherscan.io/address/0x5A861794B927983406fCE1D062e00b9368d97Df6)                                                                                      |\n| VRF Coordinator            | [`0x271682DEB8C4E0901D1a1550aD2e64D568E69909`](https://etherscan.io/address/0x271682DEB8C4E0901D1a1550aD2e64D568E69909)                                                                                      |\n| Wrapper Premium Percentage | 0                                                                                                                                                                                                            |\n| Coordinator Flat Fee       | 0.25 LINK                                                                                                                                                                                                    |\n| Maximum Confirmations      | 200                                                                                                                                                                                                          |\n| Maximum Random Values      | 10                                                                                                                                                                                                           |\n| Wrapper Gas overhead       | 40000                                                                                                                                                                                                        |\n| Coordinator Gas Overhead   | 90000                                                                                                                                                                                                        |\n\n### Goerli testnet\n\n:::note[Goerli Faucets]\nTestnet LINK is available from https://faucets.chain.link/goerli<br/>\nTestnet ETH is available from https://goerlifaucet.com/ or faucets listed at https://faucetlink.to/goerli\n:::\n\n| Item                       | Value                                                                                                                                                                                                               |\n| -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| LINK Token                 | <a class=\"erc-token-address\" id=\"5_0x326C977E6efc84E512bB9C30f76E30c160eD06FB\" href=\"https://goerli.etherscan.io/token/0x326C977E6efc84E512bB9C30f76E30c160eD06FB\">`0x326C977E6efc84E512bB9C30f76E30c160eD06FB`</a> |\n| VRF Wrapper                | [`0x708701a1DfF4f478de54383E49a627eD4852C816`](https://goerli.etherscan.io/address/0x708701a1DfF4f478de54383E49a627eD4852C816)                                                                                      |\n| VRF Coordinator            | [`0x2ca8e0c643bde4c2e08ab1fa0da3401adad7734d`](https://goerli.etherscan.io/address/0x2ca8e0c643bde4c2e08ab1fa0da3401adad7734d)                                                                                      |\n| Wrapper Premium Percentage | 0                                                                                                                                                                                                                   |\n| Coordinator Flat Fee       | 0.25 LINK                                                                                                                                                                                                           |\n| Maximum Confirmations      | 200                                                                                                                                                                                                                 |\n| Maximum Random Values      | 10                                                                                                                                                                                                                  |\n| Wrapper Gas overhead       | 40000                                                                                                                                                                                                               |\n| Coordinator Gas Overhead   | 90000                                                                                                                                                                                                               |\n\n### BNB Chain\n\n:::tip[Important]\nThe LINK provided by the [BNB Chain Bridge](https://www.bnbchain.world/en/bridge) is not ERC-677 compatible, so cannot be used with Chainlink oracles. However, it can be [**converted to the official LINK token on BNB Chain using Chainlink's PegSwap service**](https://pegswap.chain.link/).\n:::\n\n| Item                       | Value                                                                                                                                                                                                        |\n| -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| LINK Token                 | <a class=\"erc-token-address\" id=\"56_0x404460C6A5EdE2D891e8297795264fDe62ADBB75\" href=\"https://bscscan.com/token/0x404460C6A5EdE2D891e8297795264fDe62ADBB75\">`0x404460C6A5EdE2D891e8297795264fDe62ADBB75`</a> |\n| VRF Wrapper                | [`0x721DFbc5Cfe53d32ab00A9bdFa605d3b8E1f3f42`](https://bscscan.com/address/0x721DFbc5Cfe53d32ab00A9bdFa605d3b8E1f3f42)                                                                                       |\n| VRF Coordinator            | [`0xc587d9053cd1118f25F645F9E08BB98c9712A4EE`](https://bscscan.com/address/0xc587d9053cd1118f25F645F9E08BB98c9712A4EE)                                                                                       |\n| Wrapper Premium Percentage | 0                                                                                                                                                                                                            |\n| Coordinator Flat Fee       | 0.005 LINK                                                                                                                                                                                                   |\n| Maximum Confirmations      | 200                                                                                                                                                                                                          |\n| Maximum Random Values      | 10                                                                                                                                                                                                           |\n| Wrapper Gas overhead       | 40000                                                                                                                                                                                                        |\n| Coordinator Gas Overhead   | 90000                                                                                                                                                                                                        |\n\n### BNB Chain testnet\n\n:::note[BNB Chain Faucet]\nTestnet LINK is available from https://faucets.chain.link/chapel\n:::\n\n| Item                       | Value                                                                                                                                                                                                                  |\n| -------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| LINK Token                 | <a class=\"erc-token-address\" id=\"97_0x84b9B910527Ad5C03A9Ca831909E21e236EA7b06\" href=\"https://testnet.bscscan.com/address/0x84b9B910527Ad5C03A9Ca831909E21e236EA7b06\">`0x84b9B910527Ad5C03A9Ca831909E21e236EA7b06`</a> |\n| VRF Wrapper                | [`0x699d428ee890d55D56d5FC6e26290f3247A762bd`](https://testnet.bscscan.com/address/0x699d428ee890d55D56d5FC6e26290f3247A762bd)                                                                                         |\n| VRF Coordinator            | [`0x6A2AAd07396B36Fe02a22b33cf443582f682c82f`](https://testnet.bscscan.com/address/0x6A2AAd07396B36Fe02a22b33cf443582f682c82f)                                                                                         |\n| Wrapper Premium Percentage | 0                                                                                                                                                                                                                      |\n| Coordinator Flat Fee       | 0.005 LINK                                                                                                                                                                                                             |\n| Maximum Confirmations      | 200                                                                                                                                                                                                                    |\n| Maximum Random Values      | 10                                                                                                                                                                                                                     |\n| Wrapper Gas overhead       | 40000                                                                                                                                                                                                                  |\n| Coordinator Gas Overhead   | 90000                                                                                                                                                                                                                  |\n\n### Polygon (Matic) Mainnet\n\n:::tip[Important]\nThe LINK provided by the [Polygon (Matic) Bridge](https://wallet.polygon.technology/bridge) is not ERC-677 compatible, so cannot be used with Chainlink oracles. However, it can be [**converted to the official LINK token on Polygon (Matic) using Chainlink's PegSwap service**](https://pegswap.chain.link/)\n:::\n\n| Item                       | Value                                                                                                                                                                                                               |\n| -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| LINK Token                 | <a class=\"erc-token-address\" id=\"137_0xb0897686c545045aFc77CF20eC7A532E3120E0F1\" href=\"https://polygonscan.com/address/0xb0897686c545045aFc77CF20eC7A532E3120E0F1\">`0xb0897686c545045aFc77CF20eC7A532E3120E0F1`</a> |\n| VRF Wrapper                | [`0x4e42f0adEB69203ef7AaA4B7c414e5b1331c14dc`](https://polygonscan.com/address/0x4e42f0adEB69203ef7AaA4B7c414e5b1331c14dc)                                                                                          |\n| VRF Coordinator            | [`0xAE975071Be8F8eE67addBC1A82488F1C24858067`](https://polygonscan.com/address/0xAE975071Be8F8eE67addBC1A82488F1C24858067)                                                                                          |\n| Wrapper Premium Percentage | 0                                                                                                                                                                                                                   |\n| Coordinator Flat Fee       | 0.0005 LINK                                                                                                                                                                                                         |\n| Maximum Confirmations      | 200                                                                                                                                                                                                                 |\n| Maximum Random Values      | 10                                                                                                                                                                                                                  |\n| Wrapper Gas overhead       | 40000                                                                                                                                                                                                               |\n| Coordinator Gas Overhead   | 90000                                                                                                                                                                                                               |\n\n### Polygon (Matic) Mumbai Testnet\n\n:::note[Mumbai Faucet]\nTestnet LINK and MATIC are available from [the Polygon faucet](https://faucet.polygon.technology/) and https://faucets.chain.link/mumbai.\n:::\n\n| Item                       | Value                                                                                                                                                                                                                         |\n| -------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| LINK Token                 | <a class=\"erc-token-address\" id=\"80001_0x326C977E6efc84E512bB9C30f76E30c160eD06FB\" href=\"https://mumbai.polygonscan.com/address/0x326C977E6efc84E512bB9C30f76E30c160eD06FB\">`0x326C977E6efc84E512bB9C30f76E30c160eD06FB `</a> |\n| VRF Wrapper                | [`0x99aFAf084eBA697E584501b8Ed2c0B37Dd136693`](https://mumbai.polygonscan.com/address/0x99aFAf084eBA697E584501b8Ed2c0B37Dd136693)                                                                                             |\n| VRF Coordinator            | [`0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed`](https://mumbai.polygonscan.com/address/0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed)                                                                                             |\n| Wrapper Premium Percentage | 0                                                                                                                                                                                                                             |\n| Coordinator Flat Fee       | 0.0005 LINK                                                                                                                                                                                                                   |\n| Maximum Confirmations      | 200                                                                                                                                                                                                                           |\n| Maximum Random Values      | 10                                                                                                                                                                                                                            |\n| Wrapper Gas overhead       | 40000                                                                                                                                                                                                                         |\n| Coordinator Gas Overhead   | 90000                                                                                                                                                                                                                         |\n\n### Avalanche Mainnet\n\n| Item                       | Value                                                                                                                                                                                                              |\n| -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| LINK Token                 | <a class=\"erc-token-address\" id=\"43114_0x5947BB275c521040051D82396192181b413227A3\" href=\"https://snowtrace.io/address/0x5947BB275c521040051D82396192181b413227A3\">`0x5947BB275c521040051D82396192181b413227A3`</a> |\n| VRF Wrapper                | [`0x721DFbc5Cfe53d32ab00A9bdFa605d3b8E1f3f42`](https://snowtrace.io/address/0x721DFbc5Cfe53d32ab00A9bdFa605d3b8E1f3f42)                                                                                            |\n| VRF Coordinator            | [`0xd5D517aBE5cF79B7e95eC98dB0f0277788aFF634`](https://snowtrace.io/address/0xd5D517aBE5cF79B7e95eC98dB0f0277788aFF634)                                                                                            |\n| Wrapper Premium Percentage | 0                                                                                                                                                                                                                  |\n| Coordinator Flat Fee       | 0.005 LINK                                                                                                                                                                                                         |\n| Maximum Confirmations      | 200                                                                                                                                                                                                                |\n| Maximum Random Values      | 10                                                                                                                                                                                                                 |\n| Wrapper Gas overhead       | 40000                                                                                                                                                                                                              |\n| Coordinator Gas Overhead   | 90000                                                                                                                                                                                                              |\n\n### Avalanche Fuji Testnet\n\n:::note[Avax Fuji Faucet]\nTestnet LINK is available from https://faucets.chain.link/fuji\n:::\n\n| Item                       | Value                                                                                                                                                                                                                      |\n| -------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| LINK Token                 | <a class=\"erc-token-address\" id=\"43113_0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846\" href=\"https://testnet.snowtrace.io/address/0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846\">`0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846`</a> |\n| VRF Wrapper                | [`0x9345AC54dA4D0B5Cda8CB749d8ef37e5F02BBb21`](https://testnet.snowtrace.io/address/0x9345AC54dA4D0B5Cda8CB749d8ef37e5F02BBb21)                                                                                            |\n| VRF Coordinator            | [`0x2eD832Ba664535e5886b75D64C46EB9a228C2610`](https://testnet.snowtrace.io/address/0x2eD832Ba664535e5886b75D64C46EB9a228C2610)                                                                                            |\n| Wrapper Premium Percentage | 0                                                                                                                                                                                                                          |\n| Coordinator Flat Fee       | 0.005 LINK                                                                                                                                                                                                                 |\n| Maximum Confirmations      | 200                                                                                                                                                                                                                        |\n| Maximum Random Values      | 10                                                                                                                                                                                                                         |\n| Wrapper Gas overhead       | 40000                                                                                                                                                                                                                      |\n| Coordinator Gas Overhead   | 90000                                                                                                                                                                                                                      |\n\n### Fantom Mainnet\n\n:::tip[Important]\nYou must use ERC-677 LINK on Fantom. ERC-20 LINK will not work with Chainlink services.<br/>\nUse [bridge.multichain.org](https://bridge.multichain.org/#/router) to send LINK to the Fantom network and be sure to select LINK-ERC677 as the token you will receive on the Fantom mainnet.\n:::\n\n| Item                       | Value                                                                                                                                                                                                         |\n| -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| LINK Token                 | <a class=\"erc-token-address\" id=\"250_0x6F43FF82CCA38001B6699a8AC47A2d0E66939407\" href=\"https://ftmscan.com/token/0x6F43FF82CCA38001B6699a8AC47A2d0E66939407\">`0x6F43FF82CCA38001B6699a8AC47A2d0E66939407`</a> |\n| VRF Wrapper                | [`0xeDA5B00fB33B13c730D004Cf5D1aDa1ac191Ddc2`](https://ftmscan.com/address/0xeDA5B00fB33B13c730D004Cf5D1aDa1ac191Ddc2)                                                                                        |\n| VRF Coordinator            | [`0xd5D517aBE5cF79B7e95eC98dB0f0277788aFF634`](https://ftmscan.com/address/0xd5d517abe5cf79b7e95ec98db0f0277788aff634)                                                                                        |\n| Wrapper Premium Percentage | 0                                                                                                                                                                                                             |\n| Coordinator Flat Fee       | 0.0005 LINK                                                                                                                                                                                                   |\n| Maximum Confirmations      | 200                                                                                                                                                                                                           |\n| Maximum Random Values      | 10                                                                                                                                                                                                            |\n| Wrapper Gas overhead       | 40000                                                                                                                                                                                                         |\n| Coordinator Gas Overhead   | 90000                                                                                                                                                                                                         |\n\n### Fantom Testnet\n\n:::note[Fantom Testnet Faucet]\nTestnet LINK is available from https://faucets.chain.link/fantom-testnet\n:::\n\n| Item                       | Value                                                                                                                                                                                                                    |\n| -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| LINK Token                 | <a class=\"erc-token-address\" id=\"4002_0xfaFedb041c0DD4fA2Dc0d87a6B0979Ee6FA7af5F\" href=\"https://testnet.ftmscan.com/address/0xfaFedb041c0DD4fA2Dc0d87a6B0979Ee6FA7af5F\">`0xfaFedb041c0DD4fA2Dc0d87a6B0979Ee6FA7af5F`</a> |\n| VRF Wrapper                | [`0x38336BDaE79747a1d2c4e6C67BBF382244287ca6`](https://testnet.ftmscan.com/address/0x38336BDaE79747a1d2c4e6C67BBF382244287ca6)                                                                                           |\n| VRF Coordinator            | [`0xbd13f08b8352A3635218ab9418E340c60d6Eb418`](https://testnet.ftmscan.com/address/0xbd13f08b8352a3635218ab9418e340c60d6eb418)                                                                                           |\n| Wrapper Premium Percentage | 0                                                                                                                                                                                                                        |\n| Coordinator Flat Fee       | 0.0005 LINK                                                                                                                                                                                                              |\n| Maximum Confirmations      | 200                                                                                                                                                                                                                      |\n| Maximum Random Values      | 10                                                                                                                                                                                                                       |\n| Wrapper Gas overhead       | 40000                                                                                                                                                                                                                    |\n| Coordinator Gas Overhead   | 90000                                                                                                                                                                                                                    |\n"
    },
    {
      "title": "Introduction to Chainlink VRF",
      "headings": [
        {
          "depth": 2,
          "slug": "two-methods-to-request-randomness",
          "text": "Two methods to request randomness"
        },
        {
          "depth": 2,
          "slug": "choosing-the-correct-method",
          "text": "Choosing the correct method"
        },
        {
          "depth": 2,
          "slug": "supported-networks",
          "text": "Supported networks"
        }
      ],
      "url": "/vrf/v2/introduction",
      "section": "ethereum",
      "description": "Learn how to securely generate random numbers for your smart contract with Chainlink VRF (an RNG). This guide uses Solidity code examples.",
      "content": "\n![Chainlink](/files/a4c6c80-85d09b6-19facd8-banner.png)\n\n<VrfCommon callout=\"common\"/>\n\n**Chainlink VRF (Verifiable Random Function)** is a provably fair and verifiable random number generator (RNG) that enables smart contracts to access random values without compromising security or usability. For each request, Chainlink VRF generates one or more random values and cryptographic proof of how those values were determined. The proof is published and verified on-chain before any consuming applications can use it. This process ensures that results cannot be tampered with or manipulated by any single entity including oracle operators, miners, users, or smart contract developers.\n\nUse Chainlink VRF to build reliable smart contracts for any applications that rely on unpredictable outcomes:\n\n- Building blockchain games and NFTs.\n- Random assignment of duties and resources. For example, randomly assigning judges to cases.\n- Choosing a representative sample for consensus mechanisms.\n\nTo learn more about the benefits of Chainlink VRF v2, see our blog post [Chainlink VRF v2 Is Now Live on Mainnet](https://blog.chain.link/vrf-v2-mainnet-launch/). For help with your specific use case, [contact us](https://chainlinkcommunity.typeform.com/to/OYQO67EF?page=docs-footer) to connect with one of our Solutions Architects. You can also ask questions about Chainlink VRF on [Stack Overflow](https://stackoverflow.com/questions/ask?tags=chainlink).\n\n**Topics**\n\n- [Two methods to request randomness](#two-methods-to-request-randomness)\n- [Choosing the correct method](#choosing-the-correct-method)\n- [Supported networks](#supported-networks)\n\n## Two methods to request randomness\n\nChainlink VRF v2 offers two methods for requesting randomness:\n\n- [Subscription](/vrf/v2/subscription/): Create a subscription account and fund its balance with LINK tokens. Users can then connect multiple consuming contracts to the subscription account. When the consuming contracts request randomness, the transaction costs are calculated after the randomness requests are fulfilled and the subscription balance is deducted accordingly. This method allows you to fund requests for multiple consumer contracts from a single subscription.\n- [Direct funding](/vrf/v2/direct-funding/): Consuming contracts directly pay with LINK when they request random values. You must directly fund your consumer contracts and ensure that there are enough LINK tokens to pay for randomness requests.\n\n## Choosing the correct method\n\nDepending on your use case, one method might be more suitable than another. Consider the following recommendations when you choose a method:\n\n- If your use case requires regular requests for randomness, choose the subscription method to simplify funding and reduce the overall cost. Otherwise, choose the direct funding method. The direct funding method is more suitable for infrequent one-off requests.\n- If you have several VRF consuming contracts, choose the subscription method.\n- To reduce gas overhead and have more control over the maximum gas price for requests, choose the Subscription method. Read the [Subscription Method](/vrf/v2/subscription/) and [Direct Funding Method](/vrf/v2/direct-funding/) pages to understand how the transaction costs are calculated.\n- Because the direct funding method has higher overhead, it cannot return as many random words in a single request as the subscription method. You can compare the maximum number of words per request and per method on the [Subscription supported networks](/vrf/v2/subscription/supported-networks/#configurations) and [Direct Funding supported networks](/vrf/v2/direct-funding/supported-networks/#configurations) pages.\n- If you want to transfer the cost of VRF to the end user, the direct funding method may be more suitable as the cost is known and charged at request time.\n\n## Supported networks\n\nThe contract addresses and gas price limits are different depending on which method you use to get randomness. You can find the configuration, addresses, and limits for each method on the following pages:\n\n- [Subscription Supported networks](/vrf/v2/subscription/supported-networks/)\n- [Direct Funding Supported networks](/vrf/v2/direct-funding/supported-networks/)\n\nChainlink VRF v2 is currently available on the following networks:\n\n- Ethereum:\n  - Mainnet\n  - Goerli testnet\n- BNB Chain:\n  - Mainnet\n  - Testnet\n- Polygon (Matic):\n  - Mainnet\n  - Mumbai Testnet\n- Avalanche:\n  - Avalanche Mainnet\n  - Avalanche Fuji Testnet\n- Fantom:\n  - Fantom Mainnet\n  - Fantom Testnet\n\nTo learn when VRF v2 becomes available on more networks, follow us on [Twitter](https://twitter.com/chainlink) or sign up for our [mailing list](/resources/developer-communications/).\n"
    },
    {
      "title": "VRF Security Considerations",
      "headings": [
        {
          "depth": 2,
          "slug": "use-requestid-to-match-randomness-requests-with-their-fulfillment-in-order",
          "text": "Use requestId to match randomness requests with their fulfillment in order"
        },
        {
          "depth": 2,
          "slug": "choose-a-safe-block-confirmation-time-which-will-vary-between-blockchains",
          "text": "Choose a safe block confirmation time, which will vary between blockchains"
        },
        {
          "depth": 2,
          "slug": "do-not-re-request-randomness-even-if-you-dont-get-an-answer-right-away",
          "text": "Do not re-request randomness, even if you don’t get an answer right away"
        },
        {
          "depth": 2,
          "slug": "dont-accept-bidsbetsinputs-after-you-have-made-a-randomness-request",
          "text": "Don’t accept bids/bets/inputs after you have made a randomness request"
        },
        {
          "depth": 2,
          "slug": "fulfillrandomwords-must-not-revert",
          "text": "fulfillRandomWords must not revert"
        },
        {
          "depth": 2,
          "slug": "use-vrfconsumerbasev2-in-your-contract-to-interact-with-the-vrf-service",
          "text": "Use VRFConsumerBaseV2 in your contract, to interact with the VRF service"
        },
        {
          "depth": 2,
          "slug": "use-vrfv2wrapperconsumersol-in-your-contract-to-interact-with-the-vrf-service",
          "text": "Use VRFv2WrapperConsumer.sol in your contract, to interact with the VRF service"
        }
      ],
      "url": "/vrf/v2/security",
      "section": "ethereum",
      "content": "\n<VrfCommon callout=\"common\"/>\n\nGaining access to high quality randomness on-chain requires a solution like Chainlink's VRF, but it also requires you to understand some of the ways that miners or validators can potentially manipulate randomness generation. Here are some of the top security considerations you should review in your project.\n\n- [Use `requestId` to match randomness requests with their fulfillment in order](#use-requestid-to-match-randomness-requests-with-their-fulfillment-in-order)\n- [Choose a safe block confirmation time, which will vary between blockchains](#choose-a-safe-block-confirmation-time-which-will-vary-between-blockchains)\n- [Do not re-request randomness, even if you don't get an answer right away](#do-not-re-request-randomness-even-if-you-dont-get-an-answer-right-away)\n- [Don't accept bids/bets/inputs after you have made a randomness request](#dont-accept-bidsbetsinputs-after-you-have-made-a-randomness-request)\n- [The `fulfillRandomWords` function must not revert](#fulfillrandomwords-must-not-revert)\n- [Use `VRFConsumerBaseV2` in your contract to interact with the VRF service](#use-vrfconsumerbasev2-in-your-contract-to-interact-with-the-vrf-service)\n\n## Use `requestId` to match randomness requests with their fulfillment in order\n\nIf your contract could have multiple VRF requests in flight simultaneously, you must ensure that the order in which the VRF fulfillments arrive cannot be used to manipulate your contract's user-significant behavior.\n\nBlockchain miners/validators can control the order in which your requests appear on-chain, and hence the order in which your contract responds to them.\n\nFor example, if you made randomness requests `A`, `B`, `C` in short succession, there is no guarantee that the associated randomness fulfillments will also be in order `A`, `B`, `C`. The randomness fulfillments might just as well arrive at your contract in order `C`, `A`, `B` or any other order.\n\nWe recommend using the `requestID` to match randomness requests with their corresponding fulfillments.\n\n## Choose a safe block confirmation time, which will vary between blockchains\n\nIn principle, miners/validators of your underlying blockchain could rewrite the chain's history to put a randomness request from your contract into a different block, which would result in a different VRF output. Note that this does not enable a miner to determine the random value in advance. It only enables them to get a fresh random value that might or might not be to their advantage. By way of analogy, they can only re-roll the dice, not predetermine or predict which side it will land on.\n\nYou must choose an appropriate confirmation time for the randomness requests you make. Confirmation time is how many blocks the VRF service waits before writing a fulfillment to the chain to make potential rewrite attacks unprofitable in the context of your application and its value-at-risk.\n\n## Do not re-request randomness, even if you don't get an answer right away\n\nDoing so would give the VRF service provider the option to withhold a VRF fulfillment, if it doesn't like the outcome, and wait for the re-request in the hopes that it gets a better outcome, similar to the considerations with block confirmation time.\n\n## Don't accept bids/bets/inputs after you have made a randomness request\n\nConsider the example of a contract that mints a random NFT in response to a user's actions.\n\nThe contract should:\n\n1. Record whatever actions of the user may affect the generated NFT.\n1. **Stop accepting further user actions that might affect the generated NFT** and issue a randomness request.\n1. On randomness fulfillment, mint the NFT.\n\nGenerally speaking, whenever an outcome in your contract depends on some user-supplied inputs and randomness, the contract should not accept any additional user-supplied inputs after it submits the randomness request.\n\nOtherwise, the cryptoeconomic security properties may be violated by an attacker that can rewrite the chain.\n\n## `fulfillRandomWords` must not revert\n\nIf your `fulfillRandomWords()` implementation reverts, the VRF service will not attempt to call it a second time. Make sure your contract logic does not revert. Consider simply storing the randomness and taking more complex follow-on actions in separate contract calls made by you, your users, or an [Automation Node](/chainlink-automation/introduction/).\n\n## Use `VRFConsumerBaseV2` in your contract, to interact with the VRF service\n\nIf you implement the [subscription method](/vrf/v2/subscription/), use `VRFConsumerBaseV2`. It includes a check to ensure the randomness is fulfilled by `VRFCoordinatorV2`. For this reason, it is a best practice to inherit from `VRFConsumerBaseV2`. Similarly, don't override `rawFulfillRandomness`.\n\n## Use `VRFv2WrapperConsumer.sol` in your contract, to interact with the VRF service\n\nIf you implement the [direct funding method](/vrf/v2/direct-funding/), use `VRFv2WrapperConsumer`. It includes a check to ensure the randomness is fulfilled by the `VRFV2Wrapper`. For this reason, it is a best practice to inherit from `VRFv2WrapperConsumer`. Similarly, don't override `rawFulfillRandomWords`.\n"
    },
    {
      "title": "Get a Random Number",
      "headings": [
        {
          "depth": 2,
          "slug": "requirements",
          "text": "Requirements"
        },
        {
          "depth": 2,
          "slug": "create-and-fund-a-subscription",
          "text": "Create and fund a subscription"
        },
        {
          "depth": 2,
          "slug": "create-and-deploy-a-vrf-v2-compatible-contract",
          "text": "Create and deploy a VRF v2 compatible contract"
        },
        {
          "depth": 2,
          "slug": "request-random-values",
          "text": "Request random values"
        },
        {
          "depth": 2,
          "slug": "analyzing-the-contract",
          "text": "Analyzing the contract"
        },
        {
          "depth": 2,
          "slug": "clean-up",
          "text": "Clean up"
        },
        {
          "depth": 2,
          "slug": "vyper-example",
          "text": "Vyper example"
        }
      ],
      "url": "/vrf/v2/subscription/examples/get-a-random-number",
      "section": "ethereum",
      "description": "How to generate a random number inside a smart contract using Chainlink VRF.",
      "content": "\n<VrfCommon callout=\"subscription\"/>\n\nThis guide explains how to get random values using a simple contract to request and receive random values from Chainlink VRF v2. For more advanced examples with programmatic subscription configuration, see the [Programmatic Subscription](/vrf/v2/subscription/examples/programmatic-subscription/) page. To explore more applications of VRF, refer to our [blog](https://blog.chain.link/).\n\n<VrfCommon callout=\"ui\"/>\n\n**Topics**\n\n- [Requirements](#requirements)\n- [Create and fund a subscription](#create-and-fund-a-subscription)\n- [Create and deploy a VRF v2 compatible contract](#create-and-deploy-a-vrf-v2-compatible-contract)\n- [Request random values](#request-random-values)\n- [Analyzing the contract](#analyzing-the-contract)\n- [Clean up](#clean-up)\n- [Vyper Example](#vyper-example)\n\n## Requirements\n\nThis guide assumes that you know how to create and deploy smart contracts on Ethereum testnets using the following tools:\n\n- [The Remix IDE](https://remix.ethereum.org/)\n- [MetaMask](https://metamask.io/)\n- [Goerli testnet ETH](/resources/link-token-contracts/#goerli-testnet)\n\nIf you are new to developing smart contracts on Ethereum, see the [Getting Started](/getting-started/conceptual-overview/) guide to learn the basics.\n\n## Create and fund a subscription\n\nFor this example, create a new subscription on the Goerli testnet.\n\n1. Open MetaMask and set it to use the Goerli testnet. The [Subscription Manager](/vrf/v2/subscription/ui/) detects your network based on the active network in MetaMask.\n\n1. Check MetaMask to make sure you have testnet ETH and LINK on Goerli. You can get testnet ETH and LINK at one of the available [Goerli faucets](/resources/link-token-contracts/#goerli-testnet).\n\n1. Open the Subscription Manager at [vrf.chain.link](https://vrf.chain.link).\n   <!-- prettier-ignore -->\n   <div class=\"remix-callout\">\n          <a href=\"https://vrf.chain.link\">Open the Subscription Manager</a>\n    </div>\n\n1. Click **Create Subscription** and follow the instructions to create a new subscription account. MetaMask opens and asks you to confirm payment to create the account on-chain. After you approve the transaction, the network confirms the creation of your subscription account on-chain.\n\n1. After the subscription is created, click **Add funds** and follow the instructions to fund your subscription. For this example, a balance of 2 LINK is sufficient. MetaMask opens to confirm the LINK transfer to your subscription. After you approve the transaction, the network confirms the transfer of your LINK token to your subscription account.\n\n1. After you add funds, click **Add consumer**. A page opens with your account details and subscription ID.\n\n1. Record your subscription ID, which you need for your consuming contract. You will add the consuming contract to your subscription later.\n\nYou can always find your subscription IDs, balances, and consumers at [vrf.chain.link](https://vrf.chain.link/).\n\nNow that you have a funded subscription account and your subscription ID, [create and deploy a VRF v2 compatible contract](#create-and-deploy-a-vrf-v2-compatible-contract).\n\n## Create and deploy a VRF v2 compatible contract\n\nFor this example, use the [VRFv2Consumer.sol](https://remix.ethereum.org/#url=https://docs.chain.link/samples/VRF/VRFv2Consumer.sol) sample contract. This contract imports the following dependencies:\n\n- `VRFConsumerBaseV2.sol`[(link)](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/VRFConsumerBaseV2.sol)\n- `VRFCoordinatorV2Interface.sol`[(link)](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol)\n- `ConfirmedOwner.sol`[(link)](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/ConfirmedOwner.sol)\n\nThe contract also includes pre-configured values for the necessary request parameters such as `vrfCoordinator` address, gas lane `keyHash`, `callbackGasLimit`, `requestConfirmations` and number of random words `numWords`. You can change these parameters if you want to experiment on different testnets, but for this example you only need to specify `subscriptionId` when you deploy the contract.\n\nBuild and deploy the contract on Goerli.\n\n1. Open the [`VRFv2Consumer.sol` contract](https://remix.ethereum.org/#url=https://docs.chain.link/samples/VRF/VRFv2Consumer.sol) in Remix.\n\n   <!-- prettier-ignore -->\n   <CodeSample src=\"samples/VRF/VRFv2Consumer.sol\" showButtonOnly/>\n\n1. On the **Compile** tab in Remix, compile the `VRFv2Consumer.sol` contract.\n\n1. Configure your deployment. On the **Deploy** tab in Remix, select the **Injected Provider** environment, select the `VRFv2Consumer` contract from the contract list, and specify your `subscriptionId` so the constructor can set it.\n\n   ![Example showing the deploy button with the subscriptionID field filled in Remix](/images/vrf/deployWithSubscriptionId.png)\n\n1. Click the **Deploy** button to deploy your contract on-chain. MetaMask opens and asks you to confirm the transaction.\n\n1. After you deploy your contract, copy the address from the **Deployed Contracts** list in Remix. Before you can request randomness from VRF v2, you must add this address as an approved consuming contract on your subscription account.\n\n   ![Example showing the contract address listed under the Contracts list in Remix](/images/vrf/getContractAddress.png)\n\n1. Open the Subscription Manager at [vrf.chain.link](https://vrf.chain.link/) and click the ID of your new subscription under the **My Subscriptions** list. The subscription details page opens.\n\n1. Under the **Consumers** section, click **Add consumer**.\n\n1. Enter the address of your consuming contract that you just deployed and click **Add consumer**. MetaMask opens and asks you to confirm the transaction.\n\nYour example contract is deployed and approved to use your subscription balance to pay for VRF v2 requests. Next, [request random values](#request-random-values) from Chainlink VRF.\n\n## Request random values\n\nThe deployed contract requests random values from Chainlink VRF, receives those values, builds a struct `RequestStatus` containing them and stores the struct in a mapping `s_requests`. Run the `requestRandomWords()` function on your contract to start the request.\n\n1. Return to Remix and view your deployed contract functions in the **Deployed Contracts** list.\n\n1. Click the `requestRandomWords()` function to send the request for random values to Chainlink VRF. MetaMask opens and asks you to confirm the transaction. After you approve the transaction, Chainlink VRF processes your request. Chainlink VRF fulfills the request and returns the random values to your contract in a callback to the `fulfillRandomWords()` function. At this point, a new key `requestId` is added to the mapping `s_requests`.\n\n   Depending on current testnet conditions, it might take a few minutes for the callback to return the requested random values to your contract. You can see a list of pending requests for your subscription ID at [vrf.chain.link](https://vrf.chain.link/).\n\n1. To fetch the request ID of your request, call `lastRequestId()`.\n\n1. After the oracle returns the random values to your contract, the mapping `s_requests` is updated: The received random values are stored in `s_requests[_requestId].randomWords`.\n\n1. Call `getRequestStatus()` specifying the `requestId` to display the random words.\n\nYou deployed a simple contract that can request and receive random values from Chainlink VRF. To see more advanced examples where the contract can complete the entire process including subscription setup and management, see the [Programmatic Subscription](/vrf/v2/subscription/examples/programmatic-subscription/) page.\n\n:::note[Note on Requesting Randomness]\nDo not re-request randomness even if you do **not** receive an answer right away. Doing so would give the VRF service provider the option to withhold a VRF fulfillment, if it doesn't like the outcome, and wait for the re-request in the hopes that it gets a better outcome. This is similar to the considerations with block confirmation time. For more information, see the [VRF Security Considerations](/vrf/v2/security/) page.\n:::\n\n## Analyzing the contract\n\nIn this example, your MetaMask wallet is the subscription owner and you created a consuming contract to use that subscription. The consuming contract uses static configuration parameters.\n\n::solidity-remix[samples/VRF/VRFv2Consumer.sol]\n\nThe parameters define how your requests will be processed. You can find the values for your network in the [Configuration](/vrf/v2/subscription/supported-networks/) page.\n\n- `uint64 s_subscriptionId`: The subscription ID that this contract uses for funding requests.\n\n- `bytes32 keyHash`: The gas lane key hash value, which is the maximum gas price you are willing to pay for a request in wei. It functions as an ID of the off-chain VRF job that runs in response to requests.\n\n- `uint32 callbackGasLimit`: The limit for how much gas to use for the callback request to your contract's `fulfillRandomWords()` function. It must be less than the `maxGasLimit` limit on the coordinator contract. Adjust this value for larger requests depending on how your `fulfillRandomWords()` function processes and stores the received random values. If your `callbackGasLimit` is not sufficient, the callback will fail and your subscription is still charged for the work done to generate your requested random values.\n\n- `uint16 requestConfirmations`: How many confirmations the Chainlink node should wait before responding. The longer the node waits, the more secure the random value is. It must be greater than the `minimumRequestBlockConfirmations` limit on the coordinator contract.\n\n- `uint32 numWords`: How many random values to request. If you can use several random values in a single callback, you can reduce the amount of gas that you spend per random value. The total cost of the callback request depends on how your `fulfillRandomWords()` function processes and stores the received random values, so adjust your `callbackGasLimit` accordingly.\n\nThe contract includes the following functions:\n\n- `requestRandomWords()`: Takes your specified parameters and submits the request to the VRF coordinator contract.\n\n- `fulfillRandomWords()`: Receives random values and stores them with your contract.\n\n- `getRequestStatus()`: Retrive request details for a given `_requestId`.\n\n:::note[Security Considerations]\nBe sure to review your contracts to make sure they follow the best practices on the [security considerations](/vrf/v2/security/) page.\n:::\n\n## Clean up\n\nAfter you are done with this contract and the subscription, you can retrieve the remaining testnet LINK to use with other examples.\n\n1. Open the Subscription Manager at [vrf.chain.link](https://vrf.chain.link/) and click the ID of your new subscription under the **My Subscriptions** list. The subscription details page opens.\n\n1. Under your subscription details, click **Cancel subscription**. A field opens asking which wallet address you want to send the remaining funds to.\n\n1. Enter your wallet address and click **Cancel subscription**. MetaMask opens and asks you to confirm the transaction. After you approve the transaction, Chainlink VRF closes your subscription account and sends the remaining LINK to your wallet.\n\n## Vyper example\n\nYou must import the `VRFCoordinatorV2` Vyper interface. You can find it [here](https://github.com/smartcontractkit/apeworx-starter-kit/blob/main/contracts/interfaces/VRFCoordinatorV2.vy).\nYou can find a `VRFConsumerV2` example [here](https://github.com/smartcontractkit/apeworx-starter-kit/blob/main/contracts/VRFConsumerV2.vy). Read the _**apeworx-starter-kit**_ [README](https://github.com/smartcontractkit/apeworx-starter-kit) to learn how to run the example.\n"
    },
    {
      "title": "Programmatic Subscription",
      "headings": [
        {
          "depth": 2,
          "slug": "modifying-subscriptions-and-configurations",
          "text": "Modifying subscriptions and configurations"
        },
        {
          "depth": 2,
          "slug": "subscription-manager-contract",
          "text": "Subscription manager contract"
        },
        {
          "depth": 2,
          "slug": "funding-and-requesting-simultaneously",
          "text": "Funding and requesting simultaneously"
        }
      ],
      "url": "/vrf/v2/subscription/examples/programmatic-subscription",
      "section": "ethereum",
      "description": "Example contracts for generating a random number inside a smart contract using Chainlink VRF v2.",
      "content": "\n<VrfCommon callout=\"subscription\"/>\n\nHow you manage the subscription depends on your randomness needs. You can configure your subscriptions using the [Subscription Manager](/vrf/v2/subscription/ui/), but these examples demonstrate how to create your subscription and add your consumer contracts programmatically. For these examples, the contract owns and manages the subscription. Any wallet can provide funding to those subscriptions.\n\nYou can view and monitor your subscriptions in the [Subscription Manager](/vrf/v2/subscription/ui/) even if you create them programmatically. Go to [vrf.chain.link](https://vrf.chain.link) to open the Subscription Manager.\n\n**Topics**\n\n- [Modifying subscriptions and configurations](#modifying-subscriptions-and-configurations)\n- [Subscription manager contract](#subscription-manager-contract)\n- [Funding and requesting simultaneously](#funding-and-requesting-simultaneously)\n\n## Modifying subscriptions and configurations\n\nSubscription configurations do not have to be static. You can change your subscription configuration dynamically by calling the following functions using the [VRFCoordinatorV2Interface](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol):\n\n- Change the list of approved subscription consumers with:\n  - `addConsumer(uint64 subId, address consumer)`.\n  - `removeConsumer(uint64 subId, address consumer)`.\n- Transfer the subscription ownership with:\n  - `requestSubscriptionOwnerTransfer(uint64 subId, address newOwner)`.\n  - `acceptSubscriptionOwnerTransfer(uint64 subId)`.\n- View the subscription with `getSubscription(uint64 subId)`.\n- Cancel the subscription with `cancelSubscription(uint64 subId)`.\n\nTo send LINK to the subscription balance, use the LINK token interface with `LINKTOKEN.transferAndCall(address(COORDINATOR), amount, abi.encode(subId))`. Any wallet can fund a subscription.\n\nSee the example in the [Subscription manager contract](#subscription-manager-contract) section to learn how to create a contract that can change your subscription configuration.\n\n## Subscription manager contract\n\nIn this example, the contract operates as a subscription owner and can run functions to add consuming contracts to the subscription. The consuming contracts must include the `requestRandomWords()` function with the correct coordinator parameters and the correct subscription ID to request random values and use the subscription balance. The consuming contracts must also include the `fulfillRandomWords()` function to receive the random values.\n\nSubscription owners and consumers do not have to be separate. This contract not only allows adding consumers with `addConsumer(address consumerAddress)` but can also act as a consumer by running its own `requestRandomWords()` function. This example contract includes a `createNewSubscription()` function in the `constructor()` that creates the subscription and adds itself as a consumer automatically when you deploy it.\n\n::solidity-remix[samples/VRF/VRFv2SubscriptionManager.sol]\n\nTo use this contract, compile and deploy it in Remix.\n\n1. Open the contract in [Remix](https://remix.ethereum.org/#url=https://docs.chain.link/samples/VRF/VRFv2SubscriptionManager.sol).\n\n1. Compile and deploy the contract using the Injected Provider environment. The contract includes all of the configuration variables that you need, but you can edit them if necessary. For a full list of available configuration variables, see the [Supported Networks](/vrf/v2/subscription/supported-networks/) page.\n\n   This contract automatically creates a new subscription when you deploy it. Read the `s_subscriptionId` variable to find your subscription ID. You can use this value to find the subscription at [vrf.chain.link](https://vrf.chain.link).\n\n1. In this example, the `topUpSubscription()` function sends LINK from your contract to the subscription. Fund your contract with at least three testnet LINK. Alternatively, you can send LINK directly to the subscription at [vrf.chain.link](https://vrf.chain.link). Any address can provide funding to a subscription balance. If you need testnet LINK, you can get it from the [Chainlink faucet](https://faucets.chain.link/goerli).\n\n1. Run the `topUpSubscription()` function to send LINK from your contract to your subscription balance. For this example, specify a value of `3000000000000000000`, which is equivalent to three LINK.\n\n1. Run the `requestRandomWords()` function. The request might take several minutes to process. Track the pending request status at [vrf.chain.link](https://vrf.chain.link).\n\n1. You can also add and test consumer contracts using the same programmatic subscription process:\n\n   1. Create and deploy a consumer contract that includes the following components:\n\n      - The `requestRandomWords()` function and the required variables and your subscription ID.\n      - The `fulfillRandomWords()` callback function.\n\n      You can use the example from the [Get a Random Number](/vrf/v2/subscription/examples/get-a-random-number/#analyzing-the-contract) guide.\n\n   1. After you deploy the consumer contract, add it to the subscription as an approved consumer using the `addConsumer()` function on your subscription manager contract. Specify the address of your consumer contract.\n\n   1. On the consumer contract, run the `requestRandomWords()` function to request and receive random values. The request might take several minutes to process. Track the pending request status at [vrf.chain.link](https://vrf.chain.link).\n\n      The consumer contract can continue to make requests until your subscription balance runs out. The subscription manager contract must maintain sufficient balance in the subscription so that the consumers can continue to operate.\n\n   1. If you need to remove consumer contracts from the subscription, use the `removeConsumer()` function. Specify the address of the consumer contract to be removed.\n\n1. When you are done with your contracts and the subscription, run the `cancelSubscription()` function to close the subscription and send the remaining LINK to your wallet address. Specify the address of the receiving wallet.\n\n## Funding and requesting simultaneously\n\nYou can fund a subscription and request randomness in a single transaction. You must estimate how much the transaction might cost and determine the amount of funding to send to the subscription yourself. See the [Subscription billing](/vrf/v2/subscription/#subscription-limits) page to learn how to estimate request costs.\n\n<CodeSample src=\"snippets/VRF/VRFv2FundAndRequestFunction.sol\" />\n\nAdd this function to your contracts if you need to provide funding simultaneously with your requests. The `transferAndCall()` function sends LINK from your contract to the subscription, and the `requestRandomWords()` function requests the random words. Your contract still needs the `fulfillRandomWords()` callback function to receive the random values.\n"
    },
    {
      "title": "Subscription Method",
      "headings": [
        {
          "depth": 2,
          "slug": "subscriptions",
          "text": "Subscriptions"
        },
        {
          "depth": 2,
          "slug": "request-and-receive-data",
          "text": "Request and Receive Data"
        },
        {
          "depth": 3,
          "slug": "end-to-end-diagram",
          "text": "End To End Diagram"
        },
        {
          "depth": 3,
          "slug": "explanation",
          "text": "Explanation"
        },
        {
          "depth": 2,
          "slug": "limits",
          "text": "Limits"
        },
        {
          "depth": 3,
          "slug": "subscription-limits",
          "text": "Subscription limits"
        },
        {
          "depth": 3,
          "slug": "coordinator-contract-limits",
          "text": "Coordinator contract limits"
        }
      ],
      "url": "/vrf/v2/subscription",
      "section": "ethereum",
      "description": "Learn how to securely generate random numbers for your smart contract with Chainlink VRF v2(an RNG). This guide uses the subscription method.",
      "content": "\n<VrfCommon callout=\"subscription\"/>\n\nThis section explains how to generate random numbers using the subscription method.\n\n<YouTube id=\"https://www.youtube.com/watch?v=rdJ5d8j1RCg\" />\n\n**Topics**\n\n- [Subscriptions](#subscriptions)\n- [Request and Receive Data](#request-and-receive-data)\n  - [End To End Diagram](#end-to-end-diagram)\n  - [Explanation](#explanation)\n- [Limits](#limits)\n  - [Subscription limits](#subscription-limits)\n  - [Coordinator contract limits](#coordinator-contract-limits)\n\n## Subscriptions\n\nVRF v2 requests receive funding from subscription accounts. The [Subscription Manager](/vrf/v2/subscription/ui/) lets you create an account and pre-pay for VRF v2, so you don't provide funding each time your application requests randomness. This reduces the total gas cost to use VRF v2. It also provides a simple way to fund your use of Chainlink products from a single location, so you don't have to manage multiple wallets across several different systems and applications.\n\n<VrfCommon callout=\"ui\"/>\n\nSubscriptions have the following core concepts:\n\n- **Subscription id:** 64-bit unsigned integer representing the unique identifier of the subscription.\n- **Subscription accounts:** An account that holds LINK tokens and makes them available to fund requests to Chainlink VRF v2 coordinators.\n- **Subscription owner:** The wallet address that creates and manages a subscription account. Any account can add LINK to the subscription balance, but only the owner can add approved consuming contracts or withdraw funds.\n- **Consumers:** Consuming contracts that are approved to use funding from your subscription account.\n- **Subscription balance:** The amount of LINK maintained on your subscription account. Requests from consuming contracts will continue to be funded until the balance runs out, so be sure to maintain sufficient funds in your subscription balance to pay for the requests and keep your applications running.\n\nFor Chainlink VRF v2 to fulfill your requests, you must maintain a sufficient amount of LINK in your subscription balance. Gas cost calculation includes the following variables:\n\n- **Gas price:** The current gas price, which fluctuates depending on network conditions.\n\n- **Callback gas:** The amount of gas used for the callback request that returns your requested random values.\n\n- **Verification gas:** The amount of gas used to verify randomness on-chain.\n\nThe gas price depends on current network conditions. The callback gas depends on your callback function, and the number of random values in your request. The cost of each request is final only after the transaction is complete, but you define the limits you are willing to spend for the request with the following variables:\n\n- **Gas lane:** The maximum gas price you are willing to pay for a request in wei. Define this limit by specifying the appropriate `keyHash` in your request. The limits of each gas lane are important for handling gas price spikes when Chainlink VRF bumps the gas price to fulfill your request quickly.\n\n- **Callback gas limit:** Specifies the maximum amount of gas you are willing to spend on the callback request. Define this limit by specifying the `callbackGasLimit` value in your request.\n\n## Request and Receive Data\n\n### End To End Diagram\n\n![VRF v2 subscription method end-to-end diagram](/images/vrf/v2-subscription-e2e.webp)\n\nTwo types of accounts exist in the Ethereum ecosystem:\n\n- EOA (Externally Owned Account): An externally owned account that has a private key and can control a smart contract. Transactions can only be initiated by EOAs.\n- Smart contract: A contract that does not have a private key and executes what it has been designed for as a decentralized application.\n\nThe Chainlink VRF v2 solution uses both off-chain and on-chain components:\n\n- [VRF v2 Coordinator (on-chain component)](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/VRFCoordinatorV2.sol): A contract designed to interact with the VRF service. It emits an event when a request for randomness is made, and then verifies the random number and proof of how it was generated by the VRF service.\n- VRF service (off-chain component): Listens for requests by subscribing to the VRF Coordinator event logs and calculates a random number based on the block hash and nonce. The VRF service then sends a transaction to the `VRFCoordinator` including the random number and a proof of how it was generated.\n\n### Explanation\n\nRequests to Chainlink VRF v2 follow the [Request & Receive Data](#request-and-receive-data) cycle. The VRF coordinator processes the request and determines the final charge to your subscription using the following steps:\n\n1. The consuming contract must inherit [VRFConsumerBaseV2](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/VRFConsumerBaseV2.sol) and implement the `fulfillRandomWords` function, which is the _callback VRF function_. Submit your VRF request by calling `requestRandomWords` of the [VRF Coordinator](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/VRFCoordinatorV2.sol) with:\n\n   - `keyHash`: Identifier that maps to a job and a private key on the VRF service and that represents a specified gas lane. If your request is urgent, specify a gas lane with a higher gas price limit. The configuration for your network can be found [here](/vrf/v2/subscription/supported-networks/#configurations).\n   - `s_subscriptionId`: The subscription ID that the consuming contract is registered to. LINK funds are deducted from this subscription.\n   - `requestConfirmations`: The number of block confirmations the VRF service will wait to respond. The minimum and maximum confirmations for your network can be found [here](/vrf/v2/subscription/supported-networks/#configurations).\n   - `callbackGasLimit`: The maximum amount of gas a user is willing to pay for completing the callback VRF function. Note that you cannot put a value larger than maxGasLimit of the VRF Coordinator contract (read [coordinator contract limits](#limits) for more details).\n   - `numWords`: The number of random numbers to request. The maximum random values that can be requested for your network can be found [here](/vrf/v2/subscription/supported-networks/#configurations).\n\n1. The VRF coordinator emits an event.\n\n1. The event is picked up by the VRF service and will wait for the specified number of block confirmations to respond back to the VRF coordinator with the random values and a proof (`requestConfirmations`).\n\n1. The VRF coordinator verifies the proof on-chain then calls back the consuming contract `fulfillRandomWords` function.\n   After the request is complete, the final gas cost is recorded based on how much gas is required for the verification and callback. The total gas cost in wei for your request uses the following formula:\n\n   ```\n   (Gas price * (Verification gas + Callback gas)) = total gas cost\n   ```\n\n   The total gas cost is converted to LINK using the ETH/LINK data feed. In the unlikely event that the data feed is unavailable, the VRF coordinator uses the `fallbackWeiPerUnitLink` value for the conversion instead. The `fallbackWeiPerUnitLink` value is defined in the [coordinator contract](/vrf/v2/subscription/supported-networks/#configurations) for your selected network.\n\n   The LINK premium is added to the total gas cost. The premium is defined in the [coordinator contract](/vrf/v2/subscription/supported-networks/#configurations) with the `fulfillmentFlatFeeLinkPPMTier1` parameter in millionths of LINK.\n\n   ```\n   (total gas cost + LINK premium) = total request cost\n   ```\n\n   The total request cost is charged to your subscription balance.\n\n## Limits\n\nChainlink VRF v2 has some [subscription limits](#subscription-limits) and [coordinator contract limits](#coordinator-contract-limits).\n\n### Subscription limits\n\nEach subscription has the following limits:\n\n- Each subscription must maintain a minimum balance to fund requests from consuming contracts. If your balance is below that minimum, your requests remain pending for up to 24 hours before they expire. After you add sufficient LINK to a subscription, pending requests automatically process as long as they have not expired.\n- The minimum subscription balance must be sufficient for each new consuming contract that you add to a subscription. The required size of the minimum balance depends on the gas lane and the size of the request that the consuming contract makes. For example, a consuming contract that requests one random value will require a smaller minimum balance than a consuming contract that requests 50 random values. In general, you can estimate the required minimum LINK balance using the following formula where max verification gas is always 200,000.\n\n  ```\n  (((Gas lane maximum * (Max verification gas + Callback gas limit)) / (1,000,000,000 Gwei/ETH)) / (ETH/LINK price)) + LINK premium = Minimum LINK\n  ```\n\n- Each subscription supports up to 100 consuming contracts. If you need more than 100 consuming contracts, create multiple subscriptions.\n\n### Coordinator contract limits\n\nYou can see the configuration for each network on the [Supported networks](/vrf/v2/subscription/supported-networks/) page. You can also view the full configuration for each coordinator contract directly in Etherscan. As an example, view the [Ethereum Mainnet VRF v2 coordinator contract](https://etherscan.io/token/0x271682DEB8C4E0901D1a1550aD2e64D568E69909#readContract) configuration.\n\n- Each coordinator has a `MAX_NUM_WORDS` parameter that limits the maximum number of random values you can receive in each request.\n- Each coordinator has a `maxGasLimit` parameter, which is the maximum allowed `callbackGasLimit` value for your requests. You must specify a sufficient `callbackGasLimit` to fund the callback request to your consuming contract. This depends on the number of random values you request and how you process them in your `fulfillRandomWords()` function. If your `callbackGasLimit` is not sufficient, the callback fails but your subscription is still charged for the work done to generate your requested random values.\n"
    },
    {
      "title": "Migrating from VRF v1",
      "headings": [
        {
          "depth": 2,
          "slug": "comparing-vrf-v1-to-the-vrf-v2-subscription-method",
          "text": "Comparing VRF v1 to the VRF v2 subscription method"
        },
        {
          "depth": 2,
          "slug": "updating-your-applications-to-use-vrf-v2",
          "text": "Updating your applications to use VRF v2"
        }
      ],
      "url": "/vrf/v2/subscription/migration-from-v1",
      "section": "ethereum",
      "content": "\n<VrfCommon callout=\"subscription\"/>\n\n**Table of contents**\n\n- [Comparing VRF v1 to the VRF v2 subscription method](#comparing-vrf-v1-to-the-vrf-v2-subscription-method)\n- [Updating your applications to use VRF v2](#updating-your-applications-to-use-vrf-v2)\n\n## Comparing VRF v1 to the VRF v2 subscription method\n\nChainlink VRF v2 includes several improvements and changes to the way you fund and request randomness for your smart contracts.\n\n- **Subscription management:** Chainlink VRF v2 introduces a [Subscription Manager](/vrf/v2/subscription/ui/) application that allows smart contract applications to pre-fund multiple requests for randomness using a single LINK token balance. This reduces the gas fees for VRF requests by eliminating the need to transfer LINK tokens for each individual request. You transfer LINK tokens to the subscription balance only when it requires additional funding. Read the [Subscription Manager](/vrf/v2/subscription/ui/) page to learn more.\n\n- **Variable Callback Gas Limit:** Chainlink VRF v2 lets you adjust the callback gas limit when your smart contract application receives verifiable randomness. Consuming contracts can execute more complex logic in the callback request function that receives the random values. Tasks involving the delivered randomness are handled during the response process. The new gas limits are higher than the VRF V1 limit, and vary depending on the underlying blockchain you use. See the gas limits on the [VRF Supported Networks](/vrf/v2/subscription/supported-networks/) page.\n\n- **More configuration capability:** You can define how many block confirmations must pass before verifiable randomness is generated and delivered on-chain when your application makes a request transaction. The range is from 3 to 200 blocks. VRF V1 always waited 10 blocks on Ethereum before delivering on-chain randomness. Select a value that protects your application from block re-organizations while still providing sufficiently low latency from request to response. See the [Security Considerations](/vrf/v2/security/) page to learn more.\n\n- **Multiple Random Outputs in a Single Request:** The [VRF Coordinator contracts](/vrf/v2/subscription/supported-networks/) in VRF v2 allow you to request multiple random numbers (multi-word) in a single on-chain transaction, which reduces gas costs. The fulfillment is also a single transaction, which reduces the latency of responses.\n\n- **Unified Billing - Delegate Subscription Balance to Multiple Addresses:** Chainlink VRF v2 allows up to 100 smart contract addresses to fund their requests for verifiable randomness from a single LINK subscription balance, which is managed by the subscription owner.\n\nRead the [Chainlink VRF v2 blog post](https://blog.chain.link/vrf-v2-mainnet-launch/) for a detailed explanation about the benefits and use cases for VRF v2.\n\n## Updating your applications to use VRF v2\n\n<VrfCommon callout=\"ui\"/>\n\nTo modify your existing smart contract code to work with VRF v2, complete the following changes. See the [Get a Random Number](/vrf/v2/subscription/examples/get-a-random-number/) guide for an example.\n\n1. Set up and fund a subscription in the Subscription Manager at [vrf.chain.link](https://vrf.chain.link).\n   <!-- prettier-ignore -->\n   <div class=\"remix-callout\">\n          <a href=\"https://vrf.chain.link\" target=\"_blank\" >Open the Subscription Manager</a>\n    </div>\n\n1. Import the new [`VRFConsumerBaseV2.sol` contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/VRFConsumerBaseV2.sol) and remove the v1 `VRFConsumerBase.sol` import. This contract includes the `fulfillRandomWords` function.\n\n1. Import the [`VRFCoordinatorV2Interface.sol` interface](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol). This interface includes the new `requestRandomWords` function.\n\n1. Add a `VRFConsumerBaseV2` constructor as shown in the [Get a Random Number](/vrf/v2/subscription/examples/get-a-random-number/) example.\n\n1. Change `requestRandomness` function calls to `requestRandomWords`. The `requestRandomWords` function requires several additional parameters.\n\n1. Change `fulfillRandomness` function calls to `fulfillRandomWords`. Update the call to handle the returned `uint256[]` array instead of the single `uint256` variable.\n"
    },
    {
      "title": "Configuration",
      "headings": [
        {
          "depth": 2,
          "slug": "coordinator-parameters",
          "text": "Coordinator Parameters"
        },
        {
          "depth": 2,
          "slug": "fee-parameters",
          "text": "Fee Parameters"
        },
        {
          "depth": 2,
          "slug": "configurations",
          "text": "Configurations"
        },
        {
          "depth": 3,
          "slug": "ethereum-mainnet",
          "text": "Ethereum Mainnet"
        },
        {
          "depth": 3,
          "slug": "goerli-testnet",
          "text": "Goerli testnet"
        },
        {
          "depth": 3,
          "slug": "bnb-chain",
          "text": "BNB Chain"
        },
        {
          "depth": 3,
          "slug": "bnb-chain-testnet",
          "text": "BNB Chain testnet"
        },
        {
          "depth": 3,
          "slug": "polygon-matic-mainnet",
          "text": "Polygon (Matic) mainnet"
        },
        {
          "depth": 3,
          "slug": "polygon-matic-mumbai-testnet",
          "text": "Polygon (Matic) Mumbai testnet"
        },
        {
          "depth": 3,
          "slug": "avalanche-mainnet",
          "text": "Avalanche mainnet"
        },
        {
          "depth": 3,
          "slug": "avalanche-fuji-testnet",
          "text": "Avalanche Fuji testnet"
        },
        {
          "depth": 3,
          "slug": "fantom-mainnet",
          "text": "Fantom mainnet"
        },
        {
          "depth": 3,
          "slug": "fantom-testnet",
          "text": "Fantom testnet"
        },
        {
          "depth": 3,
          "slug": "klaytn-baobab-testnet",
          "text": "Klaytn Baobab testnet"
        }
      ],
      "url": "/vrf/v2/subscription/supported-networks",
      "section": "ethereum",
      "content": "\n<VrfCommon callout=\"subscription\"/>\n\nChainlink VRF allows you to integrate provably fair and verifiably random data in your smart contract.\n\nFor implementation details, read [Introduction to Chainlink VRF](/vrf/v2/introduction/).\n\n## Coordinator Parameters\n\nThese parameters are configured in the coordinator contract. You can view these values by running `getConfig` on the coordinator or by viewing the coordinator contracts in a blockchain explorer.\n\n- `uint16 minimumRequestConfirmations`: The minimum number of confirmation blocks on VRF requests before oracles respond\n- `uint32 maxGasLimit`: The maximum gas limit supported for a `fulfillRandomWords` callback.\n- `uint32 stalenessSeconds`: How long the coordinator waits until we consider the ETH/LINK price used for converting gas costs to LINK is stale and use `fallbackWeiPerUnitLink`\n- `uint32 gasAfterPaymentCalculation`: How much gas is used outside of the payment calculation. This covers the additional operations required to decrement the subscription balance and increment the balance for the oracle that handled the request.\n\n## Fee Parameters\n\nFee parameters are configured in the coordinator contract and specify the premium you pay per request in addition to the gas cost for the transaction. You can view them by running `getFeeConfig` on the coordinator. The `uint32 fulfillmentFlatFeeLinkPPMTier1` parameter defines the fees per request specified in millionths of LINK.\nThe details for calculating the total transaction cost can be found [here](/vrf/v2/subscription/#request-and-receive-data).\n\n## Configurations\n\n- [Ethereum Mainnet](#ethereum-mainnet)\n- [Goerli testnet](#goerli-testnet)\n- [BNB Chain](#bnb-chain)\n- [BNB Chain testnet](#bnb-chain-testnet)\n- [Polygon mainnet](#polygon-matic-mainnet)\n- [Polygon Mumbai testnet](#polygon-matic-mumbai-testnet)\n- [Avalanche mainnet](#avalanche-mainnet)\n- [Avalanche Fuji testnet](#avalanche-fuji-testnet)\n- [Fantom mainnet](#fantom-mainnet)\n- [Fantom testnet](#fantom-testnet)\n- [Klaytn Baobab testnet](#klaytn-baobab-testnet)\n\n### Ethereum Mainnet\n\n| Item                  | Value                                                                                                                                                                                                        |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| LINK Token            | <a class=\"erc-token-address\" id=\"1_0x514910771AF9Ca656af840dff83E8264EcF986CA\" href=\"https://etherscan.io/token/0x514910771AF9Ca656af840dff83E8264EcF986CA\">`0x514910771AF9Ca656af840dff83E8264EcF986CA`</a> |\n| VRF Coordinator       | [`0x271682DEB8C4E0901D1a1550aD2e64D568E69909`](https://etherscan.io/address/0x271682DEB8C4E0901D1a1550aD2e64D568E69909)                                                                                      |\n| 200 gwei Key Hash     | `0x8af398995b04c28e9951adb9721ef74c74f93e6a478f39e7e0777be13527e7ef`                                                                                                                                         |\n| 500 gwei Key Hash     | `0xff8dedfbfa60af186cf3c830acbc32c05aae823045ae5ea7da1e45fbfaba4f92`                                                                                                                                         |\n| 1000 gwei Key Hash    | `0x9fe0eebf5e446e3c998ec9bb19951541aee00bb90ea201ae456421a2ded86805`                                                                                                                                         |\n| Premium               | 0.25 LINK                                                                                                                                                                                                    |\n| Max Gas Limit         | 2,500,000                                                                                                                                                                                                    |\n| Minimum Confirmations | 3                                                                                                                                                                                                            |\n| Maximum Confirmations | 200                                                                                                                                                                                                          |\n| Maximum Random Values | 500                                                                                                                                                                                                          |\n\n### Goerli testnet\n\n:::note[Goerli Faucets]\nTestnet LINK is available from https://faucets.chain.link/goerli<br/>\nTestnet ETH is available from https://goerlifaucet.com/ or faucets listed at https://faucetlink.to/goerli\n:::\n\n| Item                  | Value                                                                                                                                                                                                               |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| LINK Token            | <a class=\"erc-token-address\" id=\"5_0x326C977E6efc84E512bB9C30f76E30c160eD06FB\" href=\"https://goerli.etherscan.io/token/0x326C977E6efc84E512bB9C30f76E30c160eD06FB\">`0x326C977E6efc84E512bB9C30f76E30c160eD06FB`</a> |\n| VRF Coordinator       | [`0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D`](https://goerli.etherscan.io/address/0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D)                                                                                      |\n| 150 gwei Key Hash      | `0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15`                                                                                                                                                |\n| Premium               | 0.25 LINK                                                                                                                                                                                                           |\n| Max Gas Limit         | 2,500,000                                                                                                                                                                                                           |\n| Minimum Confirmations | 3                                                                                                                                                                                                                   |\n| Maximum Confirmations | 200                                                                                                                                                                                                                 |\n| Maximum Random Values | 500                                                                                                                                                                                                                 |\n\n### BNB Chain\n\n:::tip[Important]\nThe LINK provided by the [BNB Chain Bridge](https://www.bnbchain.world/en/bridge) is not ERC-677 compatible, so cannot be used with Chainlink oracles. However, it can be [**converted to the official LINK token on BNB Chain using Chainlink's PegSwap service**](https://pegswap.chain.link/).\n:::\n\n| Item                  | Value                                                                                                                                                                                                        |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| LINK Token            | <a class=\"erc-token-address\" id=\"56_0x404460C6A5EdE2D891e8297795264fDe62ADBB75\" href=\"https://bscscan.com/token/0x404460C6A5EdE2D891e8297795264fDe62ADBB75\">`0x404460C6A5EdE2D891e8297795264fDe62ADBB75`</a> |\n| VRF Coordinator       | [`0xc587d9053cd1118f25F645F9E08BB98c9712A4EE`](https://bscscan.com/address/0xc587d9053cd1118f25F645F9E08BB98c9712A4EE)                                                                                       |\n| 200 gwei Key Hash     | `0x114f3da0a805b6a67d6e9cd2ec746f7028f1b7376365af575cfea3550dd1aa04`                                                                                                                                         |\n| 500 gwei Key Hash     | `0xba6e730de88d94a5510ae6613898bfb0c3de5d16e609c5b7da808747125506f7`                                                                                                                                         |\n| 1000 gwei Key Hash    | `0x17cd473250a9a479dc7f234c64332ed4bc8af9e8ded7556aa6e66d83da49f470`                                                                                                                                         |\n| Premium               | 0.005 LINK                                                                                                                                                                                                   |\n| Max Gas Limit         | 2,500,000                                                                                                                                                                                                    |\n| Minimum Confirmations | 3                                                                                                                                                                                                            |\n| Maximum Confirmations | 200                                                                                                                                                                                                          |\n| Maximum Random Values | 500                                                                                                                                                                                                          |\n\n### BNB Chain testnet\n\n:::note[BNB Chain Faucet]\nTestnet LINK is available from https://faucets.chain.link/chapel\n:::\n\n| Item                  | Value                                                                                                                                                                                                                  |\n| --------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| LINK Token            | <a class=\"erc-token-address\" id=\"97_0x84b9B910527Ad5C03A9Ca831909E21e236EA7b06\" href=\"https://testnet.bscscan.com/address/0x84b9B910527Ad5C03A9Ca831909E21e236EA7b06\">`0x84b9B910527Ad5C03A9Ca831909E21e236EA7b06`</a> |\n| VRF Coordinator       | [`0x6A2AAd07396B36Fe02a22b33cf443582f682c82f`](https://testnet.bscscan.com/address/0x6A2AAd07396B36Fe02a22b33cf443582f682c82f)                                                                                         |\n| 50 gwei Key Hash      | `0xd4bb89654db74673a187bd804519e65e3f71a52bc55f11da7601a13dcf505314`                                                                                                                                                   |\n| Premium               | 0.005 LINK                                                                                                                                                                                                             |\n| Max Gas Limit         | 2,500,000                                                                                                                                                                                                              |\n| Minimum Confirmations | 3                                                                                                                                                                                                                      |\n| Maximum Confirmations | 200                                                                                                                                                                                                                    |\n| Maximum Random Values | 500                                                                                                                                                                                                                    |\n\n### Polygon (Matic) mainnet\n\n:::tip[Important]\nThe LINK provided by the [Polygon (Matic) Bridge](https://wallet.polygon.technology/bridge) is not ERC-677 compatible, so cannot be used with Chainlink oracles. However, it can be [**converted to the official LINK token on Polygon (Matic) using Chainlink's PegSwap service**](https://pegswap.chain.link/)\n:::\n\n| Item                  | Value                                                                                                                                                                                                               |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| LINK Token            | <a class=\"erc-token-address\" id=\"137_0xb0897686c545045aFc77CF20eC7A532E3120E0F1\" href=\"https://polygonscan.com/address/0xb0897686c545045aFc77CF20eC7A532E3120E0F1\">`0xb0897686c545045aFc77CF20eC7A532E3120E0F1`</a> |\n| VRF Coordinator       | [`0xAE975071Be8F8eE67addBC1A82488F1C24858067`](https://polygonscan.com/address/0xAE975071Be8F8eE67addBC1A82488F1C24858067)                                                                                          |\n| 200 gwei Key Hash     | `0x6e099d640cde6de9d40ac749b4b594126b0169747122711109c9985d47751f93`                                                                                                                                                |\n| 500 gwei Key Hash     | `0xcc294a196eeeb44da2888d17c0625cc88d70d9760a69d58d853ba6581a9ab0cd`                                                                                                                                                |\n| 1000 gwei Key Hash    | `0xd729dc84e21ae57ffb6be0053bf2b0668aa2aaf300a2a7b2ddf7dc0bb6e875a8`                                                                                                                                                |\n| Premium               | 0.0005 LINK                                                                                                                                                                                                         |\n| Max Gas Limit         | 2,500,000                                                                                                                                                                                                           |\n| Minimum Confirmations | 3                                                                                                                                                                                                                   |\n| Maximum Confirmations | 200                                                                                                                                                                                                                 |\n| Maximum Random Values | 500                                                                                                                                                                                                                 |\n\n### Polygon (Matic) Mumbai testnet\n\n:::note[Mumbai Faucet]\nTestnet LINK and MATIC are available from [the Polygon faucet](https://faucet.polygon.technology/) and https://faucets.chain.link/mumbai.\n:::\n\n| Item                  | Value                                                                                                                                                                                                                         |\n| --------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| LINK Token            | <a class=\"erc-token-address\" id=\"80001_0x326C977E6efc84E512bB9C30f76E30c160eD06FB\" href=\"https://mumbai.polygonscan.com/address/0x326C977E6efc84E512bB9C30f76E30c160eD06FB\">`0x326C977E6efc84E512bB9C30f76E30c160eD06FB `</a> |\n| VRF Coordinator       | [`0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed`](https://mumbai.polygonscan.com/address/0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed)                                                                                             |\n| 500 gwei Key Hash     | `0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f`                                                                                                                                                          |\n| Premium               | 0.0005 LINK                                                                                                                                                                                                                   |\n| Max Gas Limit         | 2,500,000                                                                                                                                                                                                                     |\n| Minimum Confirmations | 3                                                                                                                                                                                                                             |\n| Maximum Confirmations | 200                                                                                                                                                                                                                           |\n| Maximum Random Values | 500                                                                                                                                                                                                                           |\n\n### Avalanche mainnet\n\n| Item                  | Value                                                                                                                                                                                                              |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| LINK Token            | <a class=\"erc-token-address\" id=\"43114_0x5947BB275c521040051D82396192181b413227A3\" href=\"https://snowtrace.io/address/0x5947BB275c521040051D82396192181b413227A3\">`0x5947BB275c521040051D82396192181b413227A3`</a> |\n| VRF Coordinator       | [`0xd5D517aBE5cF79B7e95eC98dB0f0277788aFF634`](https://snowtrace.io/address/0xd5D517aBE5cF79B7e95eC98dB0f0277788aFF634)                                                                                            |\n| 200 gwei Key Hash     | `0x83250c5584ffa93feb6ee082981c5ebe484c865196750b39835ad4f13780435d`                                                                                                                                               |\n| 500 gwei Key Hash     | `0x89630569c9567e43c4fe7b1633258df9f2531b62f2352fa721cf3162ee4ecb46`                                                                                                                                               |\n| 1000 gwei Key Hash    | `0x06eb0e2ea7cca202fc7c8258397a36f33d88568d2522b37aaa3b14ff6ee1b696`                                                                                                                                               |\n| Premium               | 0.005 LINK                                                                                                                                                                                                         |\n| Max Gas Limit         | 2,500,000                                                                                                                                                                                                          |\n| Minimum Confirmations | 1                                                                                                                                                                                                                  |\n| Maximum Confirmations | 200                                                                                                                                                                                                                |\n| Maximum Random Values | 500                                                                                                                                                                                                                |\n\n### Avalanche Fuji testnet\n\n:::note[Avax Fuji Faucet]\nTestnet LINK is available from https://faucets.chain.link/fuji\n:::\n\n| Item                  | Value                                                                                                                                                                                                                      |\n| --------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| LINK Token            | <a class=\"erc-token-address\" id=\"43113_0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846\" href=\"https://testnet.snowtrace.io/address/0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846\">`0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846`</a> |\n| VRF Coordinator       | [`0x2eD832Ba664535e5886b75D64C46EB9a228C2610`](https://testnet.snowtrace.io/address/0x2eD832Ba664535e5886b75D64C46EB9a228C2610)                                                                                            |\n| 300 gwei Key Hash     | `0x354d2f95da55398f44b7cff77da56283d9c6c829a4bdf1bbcaf2ad6a4d081f61`                                                                                                                                                       |\n| Premium               | 0.005 LINK                                                                                                                                                                                                                 |\n| Max Gas Limit         | 2,500,000                                                                                                                                                                                                                  |\n| Minimum Confirmations | 1                                                                                                                                                                                                                          |\n| Maximum Confirmations | 200                                                                                                                                                                                                                        |\n| Maximum Random Values | 500                                                                                                                                                                                                                        |\n\n### Fantom mainnet\n\n:::tip[Important]\nYou must use ERC-677 LINK on Fantom. ERC-20 LINK will not work with Chainlink services.<br/>\nUse [bridge.multichain.org](https://bridge.multichain.org/#/router) to send LINK to the Fantom network and be sure to select LINK-ERC677 as the token you will receive on the Fantom mainnet.\n:::\n\n| Item                  | Value                                                                                                                                                                                                         |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| LINK Token            | <a class=\"erc-token-address\" id=\"250_0x6F43FF82CCA38001B6699a8AC47A2d0E66939407\" href=\"https://ftmscan.com/token/0x6F43FF82CCA38001B6699a8AC47A2d0E66939407\">`0x6F43FF82CCA38001B6699a8AC47A2d0E66939407`</a> |\n| VRF Coordinator       | [`0xd5D517aBE5cF79B7e95eC98dB0f0277788aFF634`](https://ftmscan.com/address/0xd5d517abe5cf79b7e95ec98db0f0277788aff634)                                                                                        |\n| 4000 gwei Key Hash    | `0xb4797e686f9a1548b9a2e8c68988d74788e0c4af5899020fb0c47784af76ddfa`                                                                                                                                          |\n| 10000 gwei Key Hash   | `0x5881eea62f9876043df723cf89f0c2bb6f950da25e9dfe66995c24f919c8f8ab`                                                                                                                                          |\n| 20000 gwei Key Hash   | `0x64ae04e5dba58bc08ba2d53eb33fe95bf71f5002789692fe78fb3778f16121c9`                                                                                                                                          |\n| Premium               | 0.0005 LINK                                                                                                                                                                                                   |\n| Max Gas Limit         | 2,500,000                                                                                                                                                                                                     |\n| Minimum Confirmations | 1                                                                                                                                                                                                             |\n| Maximum Confirmations | 200                                                                                                                                                                                                           |\n| Maximum Random Values | 500                                                                                                                                                                                                           |\n\n### Fantom testnet\n\n:::note[Fantom Testnet Faucet]\nTestnet LINK is available from https://faucets.chain.link/fantom-testnet\n:::\n\n| Item                  | Value                                                                                                                                                                                                                    |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| LINK Token            | <a class=\"erc-token-address\" id=\"4002_0xfaFedb041c0DD4fA2Dc0d87a6B0979Ee6FA7af5F\" href=\"https://testnet.ftmscan.com/address/0xfaFedb041c0DD4fA2Dc0d87a6B0979Ee6FA7af5F\">`0xfaFedb041c0DD4fA2Dc0d87a6B0979Ee6FA7af5F`</a> |\n| VRF Coordinator       | [`0xbd13f08b8352A3635218ab9418E340c60d6Eb418`](https://testnet.ftmscan.com/address/0xbd13f08b8352a3635218ab9418e340c60d6eb418)                                                                                           |\n| 3000 gwei Key Hash    | `0x121a143066e0f2f08b620784af77cccb35c6242460b4a8ee251b4b416abaebd4`                                                                                                                                                     |\n| Premium               | 0.0005 LINK                                                                                                                                                                                                              |\n| Max Gas Limit         | 2,500,000                                                                                                                                                                                                                |\n| Minimum Confirmations | 1                                                                                                                                                                                                                        |\n| Maximum Confirmations | 200                                                                                                                                                                                                                      |\n| Maximum Random Values | 500                                                                                                                                                                                                                      |\n\n### Klaytn Baobab testnet\n\n:::note[Klaytn Testnet Faucet]\nTestnet LINK is available from [faucets.chain.link](https://faucets.chain.link/klaytn-testnet). Use the [KLAY Faucet](https://baobab.wallet.klaytn.foundation/faucet) to obtain testnet KLAY.\n:::\n\n| Item                  | Value                                                                                                                                                                                                                      |\n| --------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| LINK Token            | <a class=\"erc-token-address\" id=\"1001_0x04c5046A1f4E3fFf094c26dFCAA75eF293932f18\" href=\"https://baobab.scope.klaytn.com/token/0x04c5046A1f4E3fFf094c26dFCAA75eF293932f18\">`0x04c5046A1f4E3fFf094c26dFCAA75eF293932f18`</a> |\n| VRF Coordinator       | [`0x771143FcB645128b07E41D79D82BE707ad8bDa1C`](https://baobab.scope.klaytn.com/address/0x771143FcB645128b07E41D79D82BE707ad8bDa1C)                                                                                         |\n| 750 gwei Key Hash     | `0x9be50e2346ee6abe000e6d3a34245e1d232c669703efc44660a413854427027c`                                                                                                                                                       |\n| Premium               | 0.005 LINK                                                                                                                                                                                                                 |\n| Max Gas Limit         | 2,500,000                                                                                                                                                                                                                  |\n| Minimum Confirmations | 1                                                                                                                                                                                                                          |\n| Maximum Confirmations | 200                                                                                                                                                                                                                        |\n| Maximum Random Values | 500                                                                                                                                                                                                                        |\n"
    },
    {
      "title": "Subscription Manager User Interface",
      "headings": [
        {
          "depth": 2,
          "slug": "overview",
          "text": "Overview"
        },
        {
          "depth": 2,
          "slug": "consumers",
          "text": "Consumers"
        },
        {
          "depth": 2,
          "slug": "pending",
          "text": "Pending"
        },
        {
          "depth": 2,
          "slug": "history",
          "text": "History"
        },
        {
          "depth": 3,
          "slug": "recent-fulfillments",
          "text": "Recent fulfillments"
        },
        {
          "depth": 3,
          "slug": "events",
          "text": "Events"
        },
        {
          "depth": 3,
          "slug": "failed-requests",
          "text": "Failed requests"
        }
      ],
      "url": "/vrf/v2/subscription/ui",
      "section": "ethereum",
      "description": "Walkthrough Subscription Manager User Interface",
      "content": "\n<VrfCommon callout=\"subscription\"/>\n\nThe VRF v2 Subscription Manager is available at [vrf.chain.link](https://vrf.chain.link/). The Subscription Manager lets you create a subcription and pre-pay for VRF v2 so you don't need to provide funding each time your application requests randomness. This guide walks you through the main sections of the UI.\n\n:::tip[Troubleshooting]\nRead the [pending](#pending) and [failed requests](#failed-requests) sections to learn how to troubleshoot your VRF requests.\n:::\n\n**Topics**\n\n- [Overview](#overview)\n- [Consumers](#consumers)\n- [Pending](#pending)\n- [History](#history)\n  - [Recent fulfillments](#recent-fulfillments)\n  - [Events](#events)\n  - [Failed requests](#failed-requests)\n\n## Overview\n\n![VRF v2 UI overview](/images/vrf/v2-ui-overview.png)\n\nSubscription components:\n\n- **Status**: Indicates if the subscription is still active or not.\n- **ID**: The unique subscription identifier. Approved consuming contracts use LINK from this subscription to pay for each randomness request.\n- **Admin**: The account address that owns this subscription ID.\n- **Consumers**: The number of consuming contracts that are approved to make VRF requests using this subscription.\n- **Fulfillment**: The number of successful randomness requests that are already completed.\n- **Balance**: The amount of LINK remaining to be used for requests that use this subscription.\n\nYou can cancel your subscription in the user interface. When you cancel your subscription, specify the account address to receive the remaining balance. See the clean up instructions in the [Get a Random Number](/vrf/v2/subscription/examples/get-a-random-number/#clean-up) guide to learn more.\n\n## Consumers\n\n![VRF v2 UI consumers](/images/vrf/v2-ui-consumers.png)\n\nThe **Consumers** section lists the contracts that are allowed to use your subscription to pay for requests.\n\n- **Address**: The address of the consuming contract.\n- **Added**: The time when the consumer was added to the subscription.\n- **Last fulfillment**: The last time a VRF request was fulfilled for the consumer.\n- **Total spent**: The total amount of LINK that has been used by the consuming contract.\n\nYou can use this section to add or remove consumers.\n\n## Pending\n\n![VRF v2 UI pending](/images/vrf/v2-ui-pending.png)\n\nThe **Pending** list appears if there are requests currently being processed.\n\n- **Time**: The time when the pending VRF request was made.\n- **Consumer**: The address of the consuming contract.\n- **Transaction hash**: The transaction hash of the pending VRF request.\n- **Status**: A timer that informs you when the pending VRF request will move to a failed status. **Note**: Pending requests fail after 24h.\n- **Max Cost**: The calculated total gas cost in LINK based on the configuration. See [VRF v2 Subscription Limits](/vrf/v2/subscription/#limits) for details.\n- **Projected Balance**: This indicates when the subscription is underfunded and how many LINK tokens are required to fund the subscription.\n\n## History\n\n### Recent fulfillments\n\n![VRF v2 UI recent fulfill](/images/vrf/v2-ui-recent-fulfill.png)\n\nThe **Recent fulfillments** tab shows the details for successful VRF fulfillments.\n\n- **Time**: The time and block number indicating when the VRF request was successfully fulfilled.\n- **Consumer**: The address of the consuming contract that initiated the VRF request.\n- **Transaction Hash**: The transaction hash of the VRF callback.\n- **Status**: The status of the request. Recent fulfillments always show _Success_.\n- **Spent**: The total amount of LINK spent to fulfill the VRF request.\n- **Balance**: The LINK balance of the subscription after the VRF request was fulfilled.\n\n### Events\n\n![VRF v2 ui history events](/images/vrf/v2-ui-history-events.png)\n\nThe **Events** tab displays events linked to the subscription. There are five main events:\n\n- Subscription created\n- Subscription funded\n- Consumer added\n- Consumer removed\n- Subscription canceled\n\nComponents of VRF events:\n\n- **Time**: The time when the event happened.\n- **Event**: The type of the event.\n- **Transaction Hash**: The transaction hash for the event.\n- **Consumer**: The address of the consuming contract. This is used only for _Consumer added_ and _Consumer canceled_ events.\n- **Amount**:\n  - For _Subscription funded_ events, this indicates the amount of LINK added to the subscription balance.\n  - For _Subscription canceled_ events, this indicates the amount of LINK withdrawn from the subscription balance.\n- **Balance**:\n  - For _Subscription funded_ events, this indicates the LINK balance of the subscription after it was funded.\n  - For _Subscription canceled_ events, this field should display _0_.\n\n### Failed requests\n\n![VRF v2 UI history failed](/images/vrf/v2-ui-history-failed.png)\n\nThe **Failed requests** tab displays failed VRF requests.\n\n- **Time**: The time when the VRF request was made.\n- **Transaction Hash**: This can be either the transaction hash of the originating VRF request if the request was pending for over 24 hours _or_ the transaction hash of the VRF callback if the callback failed.\n- **Status**: The status of the request. Failed requests always show _Failed_.\n- **Reason**: The reason why the request failed. Requests fail for one of the following reasons:\n  - Pending for over 24 hours\n  - Wrong key hash specified\n  - Callback gas limit set too low\n"
    },
    {
      "title": "DNS Ownership Oracle",
      "headings": [
        {
          "depth": 2,
          "slug": "requirements",
          "text": "Requirements"
        },
        {
          "depth": 2,
          "slug": "dns-ownership-contract",
          "text": "DNS ownership contract"
        },
        {
          "depth": 2,
          "slug": "network-details",
          "text": "Network details"
        },
        {
          "depth": 4,
          "slug": "ethereum-mainnet",
          "text": "Ethereum Mainnet"
        },
        {
          "depth": 4,
          "slug": "ethereum-goerli-testnet",
          "text": "Ethereum Goerli Testnet"
        },
        {
          "depth": 4,
          "slug": "bnb-chain-mainnet",
          "text": "BNB Chain mainnet"
        },
        {
          "depth": 4,
          "slug": "polygon-matic-mainnet",
          "text": "Polygon (Matic) mainnet"
        },
        {
          "depth": 2,
          "slug": "job",
          "text": "Job"
        }
      ],
      "url": "/any-api/data-providers/dns-ownership",
      "section": "ethereum",
      "content": "---\r\nlayout: ../../../layouts/MainLayout.astro\r\nsection: ethereum\r\ndate: Last Modified\r\ntitle: \"DNS Ownership Oracle\"\r\npermalink: \"docs/any-api/data-providers/dns-ownership/\"\r\n---\r\n\r\nimport { variables } from \"@variables\"\r\nimport CodeSample from \"@components/CodeSample/CodeSample.astro\"\r\n\r\nThis oracle checks Google’s DNS service to determine if a given domain is owned by a given blockchain address. Each address is stored in a _TXT record_.\r\nThis guide explains how to call the _DNS ownership oracle_ and verify that a given address owns a specific domain. For instance, we will confirm that the address _0xf75519f611776c22275474151a04183665b7feDe_ owns _www5.infernos.io_. **Note** that the source of data is [Google DNS](https://dns.google/resolve?name=www5.infernos.io&type=TXT).\r\n\r\n## Requirements\r\n\r\nThis guide assumes that you know how to create and deploy smart contracts on the Goerli Testnet using the following tools:\r\n\r\n- [The Remix IDE](https://remix.ethereum.org/)\r\n- [MetaMask](https://metamask.io/)\r\n- [Goerli Link tokens](/resources/link-token-contracts/#goerli-testnet)\r\n\r\nYou should be familiar with the [Chainlink Basic Request Model](/architecture-overview/architecture-request-model). If you are new to developing smart contracts on Ethereum, see the [Getting Started](/getting-started/conceptual-overview/) guide to learn the basics.\r\n\r\n## DNS ownership contract\r\n\r\nThis example operates using the following steps:\r\n\r\n1. When you deploy the contract, the `constructor()` initializes the address of `oracle`, the `jobId`, and the fees `oraclePayment`. The code example is configured for the _Goerli testnet_. Check the [Network Details section](#network-details) for other networks.\r\n1. Fund the contract with LINK tokens. Each request requires 0.1 LINK.\r\n1. Run the `requestProof()` function to check that an address owns a domain name. For this example, you can use `www5.infernos.io` for the `_name` and `0xf75519f611776c22275474151a04183665b7feDe` for the `_record`. Notice how these parameters are used to build the Chainlink request. The selector of the `fulfill()` function is also passed so that the oracle knows which function to call back with the `proof`.\r\n1. After few seconds, check the value of `proof`. It should return `true`.\r\n\r\n<CodeSample src=\"samples/DataProviders/DnsOwnership.sol\" />\r\n\r\n## Network details\r\n\r\nThe [DNS Ownership Contract example](#dns-ownership-contract) works on the _Goerli Testnet_. Below are the configuration for other chains.\r\n\r\n#### Ethereum Mainnet\r\n\r\n- Payment Amount: 2 LINK\r\n- LINK Token Address: <code>{variables.MAINNET_LINK_TOKEN}</code>\r\n- Oracle Address: `0x1152c76A0B3acC9856B1d8ee9EbDf2A2d0a01cC3`\r\n- JobID: `6ca2e68622bd421d98c648f056ee7c76`\r\n\r\n#### Ethereum Goerli Testnet\r\n\r\n- Payment Amount: 0.1 LINK\r\n- LINK Token Address: <code>{variables.GOERLI_LINK_TOKEN}</code>\r\n- Oracle Address: `0xB9756312523826A566e222a34793E414A81c88E1`\r\n- JobID: `791bd73c8a1349859f09b1cb87304f71`\r\n\r\n#### BNB Chain mainnet\r\n\r\n- Payment Amount: 0.1 LINK\r\n- LINK Token address: <code>{variables.BINANCE_MAINNET_LINK_TOKEN}</code>\r\n- Oracle Address: `0x63f9459471804835E35EFeB296314153063c25E3`\r\n- JobID: `fb06afd5a9df4e6cb156f6b797b63a24`\r\n\r\n#### Polygon (Matic) mainnet\r\n\r\n- Payment Amount: 0.1 LINK\r\n- LINK Token Address: <code>{variables.MATIC_MAINNET_LINK_TOKEN}</code>\r\n- Oracle Address: `0x2984beb1d35d11B56973148A9022210Aecc26CE5`\r\n- JobID: `f3daed2990114e98906aaf21c4172da3`\r\n\r\n## Job\r\n\r\nThe _DNS Ownership_ node uses a [Chainlink v2 direct-request job](/chainlink-nodes/oracle-jobs/job-types/direct_request/). It is composed by the following taks:\r\n\r\n- [ETH ABI Decode Log](/chainlink-nodes/oracle-jobs/task-types/task_eth_abi_decode_log/)\r\n- [CBOR Parse](/chainlink-nodes/oracle-jobs/task-types/task_cborparse)\r\n- [DNS Proof external adapter](https://github.com/smartcontractkit/external-adapters-js/tree/develop/packages/sources/dns-query#dns-proof-endpoint)\r\n- [JSON Parse](/chainlink-nodes/oracle-jobs/task-types/task_jsonparse)\r\n- [ETH ABI Encode](/chainlink-nodes/oracle-jobs/task-types/task_eth_abi_encode)\r\n- [EthTx](/chainlink-nodes/oracle-jobs/task-types/task_eth_tx)\r\n\r\n```toml\r\ntype = \"directrequest\"\r\nschemaVersion = 1\r\ncontractAddress = \"0x0000000000000000000000000000000000000000\"\r\nmaxTaskDuration = \"0s\"\r\nobservationSource = \"\"\"\r\n    decode_log          [type=ethabidecodelog\r\n                         abi=\"OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)\"\r\n                         data=\"$(jobRun.logData)\"\r\n                         topics=\"$(jobRun.logTopics)\"]\r\n\r\n    decode_cbor         [type=cborparse data=\"$(decode_log.data)\"]\r\n\r\n    dnsproof            [type=bridge\r\n                         name=\"dnsproof\"\r\n                         requestData=\"{\\\\\"data\\\\\": {\\\\\"endpoint\\\\\": \\\\\"dnsProof\\\\\", \\\\\"name\\\\\": $(decode_cbor.name), \\\\\"record\\\\\": $(decode_cbor.record)}}\"]\r\n\r\n\r\n    result_parse        [type=jsonparse data=\"$(dnsproof)\" path=\"result\"]\r\n\r\n    encode_data         [type=ethabiencode\r\n                         abi=\"(bool _result)\"\r\n                         data=\"{\\\\\"_requestId\\\\\": $(decode_log.requestId),\\\\\"_result\\\\\": $(result_parse)}\"]\r\n\r\n    encode_tx           [type=ethabiencode\r\n                         abi=\"fulfillOracleRequest(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes32 data)\"\r\n                         data=\"{\\\\\"requestId\\\\\": $(decode_log.requestId),\\\\\"payment\\\\\": $(decode_log.payment),\\\\\"callbackAddress\\\\\": $(decode_log.callbackAddr),\\\\\"callbackFunctionId\\\\\": $(decode_log.callbackFunctionId),\\\\\"expiration\\\\\": $(decode_log.cancelExpiration),\\\\\"data\\\\\": $(encode_data)}\"]\r\n\r\n    submit_tx           [type=ethtx to=\"0x0000000000000000000000000000000000000000\" data=\"$(encode_tx)\" minConfirmations=\"2\"]\r\n\r\n    decode_log -> decode_cbor -> dnsproof -> result_parse -> encode_data -> encode_tx -> submit_tx\r\n\"\"\"\r\n```\r\n"
    },
    {
      "title": "Supported Blockchain Networks",
      "headings": [
        {
          "depth": 2,
          "slug": "parameters",
          "text": "Parameters"
        },
        {
          "depth": 2,
          "slug": "configurations",
          "text": "Configurations"
        }
      ],
      "url": "/chainlink-automation/supported-networks",
      "section": "ethereum",
      "content": "---\nlayout: ../../layouts/MainLayout.astro\nsection: ethereum\ndate: Last Modified\ntitle: \"Supported Blockchain Networks\"\nwhatsnext:\n  {\n    \"Automation Economics\": \"/chainlink-automation/automation-economics/\",\n    \"FAQs\": \"/chainlink-automation/faqs/\",\n  }\n---\n\nimport { AutomationConfigList } from \"@features/chainlink-automation\"\n\nChainlink Automation is available on the following networks:\n\n- [Ethereum](#ethereum):\n  - Mainnet\n  - Goerli testnet\n- [BNB Chain](#bnb-chain):\n  - Mainnet\n  - Testnet\n- [Polygon (Matic)](#polygon-matic):\n  - Mainnet\n  - Mumbai testnet\n- [Avalanche](#avalanche-mainnet):\n  - Mainnet\n  - Fuji testnet\n- [Fantom](#fantom):\n  - Mainnet\n  - Testnet\n- [Arbitrum](#arbitrum)\n  - Mainnet\n\nIf you are interested in using Chainlink Automation but need it on a different blockchain or network, [contact us](https://forms.gle/WadxnzzjHPtta5Zd9) and let us know.\n\n**Topics**\n\n- [Parameters](#parameters)\n- [Configurations](#configurations)\n\n## Parameters\n\n- **Payment Premium %** (`paymentPremiumPPB`): This percentage premium compensates the Chainlink Automation Network for monitoring and performing your upkeep. Every time a transaction is submitted for your upkeep, your LINK balance is reduced by the cost plus this percentage premium.\n- **Block Count Per Turn** (`blockCountPerTurn`): The number of blocks in each turn before the Upkeep is rotated to the next Automation Node.\n- **Check Gas Limit** (`checkGasLimit`): The maximum amount of gas that can be used by your checkUpkeep for off-chain computation.\n- **Call Gas Limit** (`callGasLimit`): The maximum amount of gas that can be used by the client contract’s `performUpkeep` function for the on-chain transaction. You can set an upper limit on your upkeep during registration, but this number must not exceed the call gas limit on the `KeeperRegistry` contract.\n- **Gas Ceiling Multiplier** (`gasCeilingMultiplier`): Establishes a ceiling for the maximum price based on the on-chain fast gas feed.\n\n## Configurations\n\n<AutomationConfigList />\n"
    },
    {
      "title": "Chainlink Nodes",
      "headings": [],
      "url": "/chainlink-nodes",
      "section": "nodeOperator",
      "content": "---\nlayout: ../layouts/MainLayout.astro\nsection: nodeOperator\ntitle: Chainlink Nodes\n---\n\nimport button from \"@chainlink/design-system/button.module.css\"\nimport styles from \"@features/landing/styles/EthereumLandingPage.module.css\"\n\nOperating a Chainlink node allows you to be part of the Chainlink Network, helping developers build hybrid smart contracts, giving them access to real-world data and services.\n\nLearn more about Chainlink nodes with our step‑by‑step tutorials and documentation:\n\n<div class={styles.productCardGrid}>\n  <section class=\"card\" >\n    <img\n    src=\"https://uploads-ssl.webflow.com/5e444500cbc42eeb5198206f/5e7898724c71bddf6749df17_DeFi2.svg\"      class=\"cl-image-featured\"\n      style=\"width: 48px\"\n    />\n    <h3 class={styles.cardTitle}>Set Up a Chainlink Node</h3>\n    <p>\n      Install and Run your own node on a local machine or remote server.\n    </p>\n    <a\n      href=\"/chainlink-nodes/running-a-chainlink-node\"\n      class={button.secondary}\n      style=\"margin-top: var(--space-4x); display: inline-flex;\"\n    >\n      {\"Learn More\"}\n      <img\n        class=\"cta-learnmore-arrow\"\n        src=\"/images/card-icons/navigation-arrow-right.svg\"\n        loading=\"lazy\"\n        alt=\"Right arrow\"\n        style=\"height: 16px\"\n      />\n    </a>\n\n  </section>\n  <section class=\"card\">\n    <div>\n      <img\n        src=\"https://uploads-ssl.webflow.com/5e444500cbc42eeb5198206f/5e7898724c71bd62c149df16_Example.svg\"\n        class=\"cl-image-featured\"\n        style=\"width: 48px\"\n      />\n      <h3 class={styles.cardTitle}>Fulfill Your First Job Request</h3>\n      <p>              \n        Deploy an Oracle contract and make job requests to your node.\n      </p>\n      <a\n        href=\"/chainlink-nodes/fulfilling-requests\"\n        class={button.secondary}\n        style=\"margin-top: var(--space-4x); display: inline-flex;\"\n      >\n        {\"Learn More\"}\n        <img\n          class=\"cta-learnmore-arrow\"\n          src=\"/images/card-icons/navigation-arrow-right.svg\"\n          loading=\"lazy\"\n          alt=\"Right arrow\"\n          style=\"height: 16px\"\n        />\n      </a>\n    </div>\n\n  </section>\n  <section class=\"card\">\n      <img\n        src=\"https://uploads-ssl.webflow.com/5e444500cbc42eeb5198206f/5e7894ddbc6262c7a18da684_RequestSmall.svg\"        class=\"cl-image-featured\"\n        height=\"50\"\n      />\n      <h3 class={styles.cardTitle}>Add External Adapters to Your Node</h3>\n      <p>\n        Bring high-quality data and premium web APIs to contract developers.\n      </p>\n      <a href=\"/chainlink-nodes/external-adapters/node-operators\"\n        class={button.secondary}\n        style=\"margin-top: var(--space-4x); display: inline-flex;\"\n      >\n        {\"Learn More\"}\n        <img\n          class=\"cta-learnmore-arrow\"\n          src=\"/images/card-icons/navigation-arrow-right.svg\"\n          loading=\"lazy\"\n          alt=\"Right arrow\"\n          style=\"height: 16px\"\n        />\n      </a>\n\n  </section>\n</div>\n\n<section class=\"card\" style=\"text-align: center;\">\n  <div class=\"cl-card-text\">\n    <div class=\"card-icon-wrapper\">\n      <img\n        src=\"/images/card-icons/5f96ab4b4db522072b7ff30c_book-bookmark.svg\"\n        class=\"cl-image-featured\"\n      ></img>\n    </div>\n    <h2>New to Chainlink and Smart Contracts?</h2>\n    <p>\n      Learn the basics in the Getting Started Guide. Build your first smart\n      contract on Ethereum.\n    </p>\n    <a\n      href=\"/getting-started/conceptual-overview/\"\n      class={button.secondary}\n      style=\"margin-top: var(--space-4x);\"\n    >\n      {\"Getting Started Guide\"}\n    </a>\n  </div>\n</section>\n\n<div class={styles.clSection}>\n  <h3>Explore Chainlink Node Tools</h3>\n  <div class={styles.clSectionCards}>\n    <a class={styles.clProductCard} href=\"https://market.link\" target=\"_blank\">\n      <img src=\"https://uploads-ssl.webflow.com/5e444500cbc42eeb5198206f/5e711675d22595473f1c0c20_Contract.svg\" />\n      <h5>Chainlink Market</h5>\n    </a>\n    <a\n      class={styles.clProductCard}\n      href=\"https://reputation.link/\"\n      target=\"_blank\"\n    >\n      <img src=\"https://uploads-ssl.webflow.com/5e444500cbc42eeb5198206f/5e711677c777c0bd0c747109_Nodes.svg\" />\n      <h5>Chainlink Oracle Reputation</h5>\n    </a>\n  </div>\n</div>\n"
    },
    {
      "title": "Using ENS with Data Feeds",
      "headings": [
        {
          "depth": 2,
          "slug": "lookup",
          "text": "Lookup"
        },
        {
          "depth": 2,
          "slug": "manual-lookup",
          "text": "Manual Lookup"
        },
        {
          "depth": 2,
          "slug": "naming-structure",
          "text": "Naming Structure"
        },
        {
          "depth": 3,
          "slug": "subdomains",
          "text": "Subdomains"
        },
        {
          "depth": 2,
          "slug": "naming-structure-1",
          "text": "Naming Structure"
        },
        {
          "depth": 3,
          "slug": "subdomains-1",
          "text": "Subdomains"
        },
        {
          "depth": 2,
          "slug": "architecture",
          "text": "Architecture"
        },
        {
          "depth": 3,
          "slug": "resolver",
          "text": "Resolver"
        },
        {
          "depth": 3,
          "slug": "listening-for-address-changes",
          "text": "Listening for Address Changes"
        },
        {
          "depth": 2,
          "slug": "obtaining-addresses",
          "text": "Obtaining Addresses"
        },
        {
          "depth": 3,
          "slug": "javascript",
          "text": "Javascript"
        },
        {
          "depth": 3,
          "slug": "solidity",
          "text": "Solidity"
        }
      ],
      "url": "/data-feeds/ens",
      "section": "ethereum",
      "content": "---\nlayout: ../../layouts/MainLayout.astro\nsection: ethereum\ndate: Last Modified\ntitle: \"Using ENS with Data Feeds\"\nexcerpt: \"Ethereum Name Service\"\n---\n\nimport { EnsLookupForm } from \"../../features/ens/components/EnsLookupForm.tsx\"\nimport { EnsManualLookupForm } from \"../../features/ens/components/EnsManualLookupForm.tsx\"\nimport CodeSample from \"@components/CodeSample/CodeSample.astro\"\n\n## Lookup\n\n<EnsLookupForm client:idle />\n\n## Manual Lookup\n\n<EnsManualLookupForm client:idle />\n\n## Naming Structure\n\nChainlink Data Feeds fall under the `data.eth` naming suffix. To obtain a specific feed address, prefix this with the assets in the feed, separated by a dash (-).\n\n| Pair      | ENS Domain Name    |\n| :-------- | :----------------- |\n| ETH / USD | `eth-usd.data.eth` |\n| BTC / USD | `btc-usd.data.eth` |\n| ...       | `...`              |\n\n### Subdomains\n\nBy default, the base name structure (`eth-usd.data.eth`) returns the proxy address for that feed. However, subdomains enable callers to retrieve other associated contract addresses, as shown in the following table.\n\n| Contract Addresses    | Subdomain Prefix | Example                       |\n| :-------------------- | :--------------- | :---------------------------- |\n| Proxy                 | `proxy`          | `proxy.eth-usd.data.eth`      |\n| Underlying aggregator | `aggregator`     | `aggregator.eth-usd.data.eth` |\n| Proposed aggregator   | `proposed`       | `proposed.eth-usd.data.eth`   |\n\n## Naming Structure\n\nChainlink data feeds fall under the `data.eth` naming suffix. To obtain a specific feed address, prefix this with the assets in the feed, separated by a dash (-).\n\n| Pair      | ENS Domain Name    |\n| :-------- | :----------------- |\n| ETH / USD | `eth-usd.data.eth` |\n| BTC / USD | `btc-usd.data.eth` |\n| ...       | `...`              |\n\n### Subdomains\n\nBy default, the base name structure (`eth-usd.data.eth`) returns the proxy address for that feed. However, subdomains enable callers to retrieve other associated contract addresses, as shown in the following table.\n\n| Contract Addresses    | Subdomain Prefix | Example                       |\n| :-------------------- | :--------------- | :---------------------------- |\n| Proxy                 | `proxy`          | `proxy.eth-usd.data.eth`      |\n| Underlying aggregator | `aggregator`     | `aggregator.eth-usd.data.eth` |\n| Proposed aggregator   | `proposed`       | `proposed.eth-usd.data.eth`   |\n\n## Architecture\n\n### Resolver\n\nFor each network, there is a single Chainlink resolver, which does not change. Its address can be obtained using the `data.eth` domain. This resolver manages the subdomains associated with `data.eth`.\n\n| Network          | Resolver Address                                                                                                         |\n| :--------------- | :----------------------------------------------------------------------------------------------------------------------- |\n| Ethereum Mainnet | [0x122eb74f9d0F1a5ed587F43D120C1c2BbDb9360B](https://app.ens.domains/address/0x122eb74f9d0F1a5ed587F43D120C1c2BbDb9360B) |\n\n### Listening for Address Changes\n\nWhen a new aggregator is deployed for a specific feed, it is first proposed, and when accepted becomes the aggregator for that feed. During this process, the `proposed` and `aggregator` subdomains for that feed will change. With each change, the resolver emits an `AddrChanged` event, using the feed subdomain (for example: `eth-usd.data.eth`) as the indexed parameter.\n\n**Example**: If you want to listen for when the aggregator of the ETH / USD feed changes, set up a listener to track the `AddrChanged` event on the resolver, using a filter like this: `ethers.utils.namehash('aggregator.eth-usd.data.eth')`.\n\n## Obtaining Addresses\n\n:::caution[ Reverse Lookup]\n\nReverse lookup is not supported.\n\n:::\n\n### Javascript\n\nThe example below uses Javascript Web3 library to interact with ENS. See the [ENS documentation](https://docs.ens.domains/dapp-developer-guide/resolving-names) for the full list of languages and libraries libraries that support ENS.\n\nThis example logs the address of the data feed on the Ethereum mainnet for ETH / USD prices.\n\n<CodeSample src=\"samples/PriceFeeds/ENSConsumer.js\" />\n\n### Solidity\n\nIn Solidity, the address of the ENS registry must be known. According to [ENS documentation](https://docs.ens.domains/ens-deployments), this address is the same across Mainnet and Goerli networks:\n\nENS registry address: [0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e](https://etherscan.io/address/0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e).\n\nAlso, instead of using readable string names like `eth-usd.data.eth`, resolvers accept bytes32 hash IDs for names. Hash IDs can be retrieved from [this subgraph](https://thegraph.com/explorer/subgraph/ensdomains/ens) or via this npm package [eth-ens-namehash](https://www.npmjs.com/package/@ensdomains/eth-ens-namehash).\n\n\"ETH / USD\" hash: `0xf599f4cd075a34b92169cf57271da65a7a936c35e3f31e854447fbb3e7eb736d`\n\n<CodeSample src=\"samples/PriceFeeds/ENSConsumer.sol\" />\n"
    },
    {
      "title": "Feed Registry",
      "headings": [
        {
          "depth": 2,
          "slug": "base-and-quote",
          "text": "Base and Quote"
        },
        {
          "depth": 3,
          "slug": "denominations-library",
          "text": "Denominations library"
        },
        {
          "depth": 2,
          "slug": "code-examples",
          "text": "Code Examples"
        },
        {
          "depth": 3,
          "slug": "solidity",
          "text": "Solidity"
        },
        {
          "depth": 3,
          "slug": "solidity-hardhat-example",
          "text": "Solidity Hardhat Example"
        },
        {
          "depth": 3,
          "slug": "javascript",
          "text": "Javascript"
        },
        {
          "depth": 2,
          "slug": "contract-addresses",
          "text": "Contract Addresses"
        }
      ],
      "url": "/data-feeds/feed-registry",
      "section": "ethereum",
      "description": "The Chainlink Feed Registry is an on-chain mapping of assets to feeds. It allows users and DeFi protocols to query Chainlink data feeds from a given pair of asset and denomination addresses.",
      "content": "---\r\nlayout: ../../../layouts/MainLayout.astro\r\nsection: ethereum\r\ndate: Last Modified\r\ntitle: \"Feed Registry\"\r\nmetadata:\r\n  title: \"How to Use Chainlink Feed Registry\"\r\n  description: \"The Chainlink Feed Registry is an on-chain mapping of assets to feeds. It allows users and DeFi protocols to query Chainlink data feeds from a given pair of asset and denomination addresses.\"\r\nwhatsnext:\r\n  {\r\n    \"Read the Feed Registry API Reference\": \"/data-feeds/feed-registry/feed-registry-functions/\",\r\n    \"See the FeedRegistryInterface contract on GitHub\": \"https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol\",\r\n  }\r\n---\r\n\r\nimport { RegistryPrice, registryAdddresses } from \"@features/feeds\"\r\nimport { Aside } from \"@components\"\r\nimport CodeSample from \"@components/CodeSample/CodeSample.astro\"\r\n\r\nThe Chainlink Feed Registry is an on-chain mapping of assets to feeds. It enables you to query Chainlink data feeds from asset addresses directly, without needing to know the feed contract addresses. They enable smart contracts to get the latest price of an asset in a single call, from a single contract.\r\n\r\n![Feed Registry Diagram](/files/feed-registry.png)\r\n\r\n<Aside type=\"note\" title=\"Note\">\r\n  The Feed Registry only lists feeds with a canonical token address on a\r\n  network. Non-token feeds such as stock indexes are not supported because they\r\n  do not have a canonical token address.\r\n</Aside>\r\n\r\nFor a complete list of functions and parameters for the `FeedRegistryInterface` contract, see the [Feed Registry API Reference](/data-feeds/feed-registry/feed-registry-functions/).\r\n\r\n## Base and Quote\r\n\r\nThe Feed Registry fully supports the [`AggregatorV3Interface`](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol) API for multiple feeds. It maps feeds from `base` and `quote` address pairs. To get the latest LINK / USD round data from the registry, call:\r\n\r\n```solidity\r\nlatestRoundData(address base, address quote)\r\n```\r\n\r\nFor example, to get the latest LINK / USD price:\r\n\r\n- `base`: The LINK token address on that network e.g. `0x514910771AF9Ca656af840dff83E8264EcF986CA` for LINK on Ethereum mainnet\r\n- `quote`: A `Denominations.USD` address (`0x0000000000000000000000000000000000000348`), which is based on [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).\r\n\r\n```solidity Mainnet\r\nlatestRoundData(0x514910771AF9Ca656af840dff83E8264EcF986CA, 0x0000000000000000000000000000000000000348)\r\n```\r\n\r\nTo get the latest LINK / ETH price on Ethereum:\r\n\r\n- `base`: The LINK token address on that network e.g. `0x514910771AF9Ca656af840dff83E8264EcF986CA` for LINK on Ethereum mainnet\r\n- `quote`: A `Denominations.ETH` address (`0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE`)\r\n\r\n```solidity Mainnet\r\nlatestRoundData(0x514910771AF9Ca656af840dff83E8264EcF986CA, 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n```\r\n\r\n### Denominations library\r\n\r\nA [`Denominations`](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/Denominations.sol) Solidity library is available for you to fetch currency identifiers which lack a canonical Ethereum address:\r\n\r\n<CodeSample src=\"samples/FeedRegistry/Denominations.sol\" />\r\n\r\n## Code Examples\r\n\r\n### Solidity\r\n\r\nTo consume price data from the Feed Registry, your smart contract should reference [`FeedRegistryInterface`](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol), which defines the external functions implemented by the Feed Registry.\r\n\r\n<CodeSample src=\"samples/FeedRegistry/PriceConsumer.sol\" />\r\n\r\n### Solidity Hardhat Example\r\n\r\n<Aside type=\"note\" title=\"Note\">\r\n  You can find a working Feed Registry Hardhat project\r\n  [here](https://github.com/smartcontractkit/feed-registry-example). Clone the\r\n  repo and follow the setup instructions to run the example locally.\r\n</Aside>\r\n\r\n### Javascript\r\n\r\n<CodeSample src=\"samples/FeedRegistry/PriceConsumer.js\" />\r\n\r\n<RegistryPrice\r\n  client:idle\r\n  registryAddress={registryAdddresses[\"link-usd\"].network.mainnet.address}\r\n  baseSymbol={registryAdddresses[\"link-usd\"].baseSymbol}\r\n  baseAddress={registryAdddresses[\"link-usd\"].network.mainnet.baseAddress}\r\n  quoteSymbol={registryAdddresses[\"link-usd\"].quoteSymbol}\r\n  quoteAddress={registryAdddresses[\"link-usd\"].network.mainnet.quoteAddress}\r\n  supportedChain=\"ETHEREUM_MAINNET\"\r\n/>\r\n\r\n## Contract Addresses\r\n\r\nThis section lists the blockchains that Chainlink Feed Registry are currently available on.\r\n\r\n| Network          | Address                                                                                                                 |\r\n| ---------------- | ----------------------------------------------------------------------------------------------------------------------- |\r\n| Ethereum Mainnet | [`0x47Fb2585D2C56Fe188D0E6ec628a38b74fCeeeDf`](https://etherscan.io/address/0x47Fb2585D2C56Fe188D0E6ec628a38b74fCeeeDf) |\r\n"
    },
    {
      "title": "Chainlink Data Feeds Documentation",
      "headings": [
        {
          "depth": 2,
          "slug": "types-of-data-feeds",
          "text": "Types of data feeds"
        },
        {
          "depth": 3,
          "slug": "price-feeds",
          "text": "Price Feeds"
        },
        {
          "depth": 3,
          "slug": "proof-of-reserve-feeds",
          "text": "Proof of Reserve Feeds"
        },
        {
          "depth": 3,
          "slug": "nft-floor-pricing-feeds",
          "text": "NFT Floor Pricing Feeds"
        },
        {
          "depth": 3,
          "slug": "l2-sequencer-uptime-feeds",
          "text": "L2 sequencer uptime feeds"
        },
        {
          "depth": 2,
          "slug": "components-of-a-data-feed",
          "text": "Components of a data feed"
        },
        {
          "depth": 2,
          "slug": "reading-proxy-and-aggregator-configurations",
          "text": "Reading proxy and aggregator configurations"
        },
        {
          "depth": 2,
          "slug": "components-of-an-aggregator",
          "text": "Components of an aggregator"
        },
        {
          "depth": 2,
          "slug": "updates-to-proxy-and-aggregator-contracts",
          "text": "Updates to proxy and aggregator contracts"
        },
        {
          "depth": 2,
          "slug": "monitoring-data-feeds",
          "text": "Monitoring data feeds"
        },
        {
          "depth": 3,
          "slug": "check-the-latest-answer-against-reasonable-limits",
          "text": "Check the latest answer against reasonable limits"
        },
        {
          "depth": 3,
          "slug": "check-the-timestamp-of-the-latest-answer",
          "text": "Check the timestamp of the latest answer"
        }
      ],
      "url": "/data-feeds",
      "section": "ethereum",
      "description": "Add data to your smart contracts and applications. Chainlink data feeds include BTC/USD, BTC/ETH, ETH/USD and more!",
      "content": "---\r\nlayout: ../../layouts/MainLayout.astro\r\nsection: ethereum\r\ndate: Last Modified\r\ntitle: \"Chainlink Data Feeds Documentation\"\r\nwhatsnext:\r\n  {\r\n    \"Get the latest price of a Data Feed\": \"/data-feeds/price-feeds/\",\r\n    \"Learn more about API references for using Data Feeds\": \"/data-feeds/price-feeds/api-reference/\",\r\n    \"Retrieve contract addresses to use Data Feeds\": \"/data-feeds/price-feeds/addresses/\",\r\n  }\r\nmetadata:\r\n  title: \"Chainlink Data Feeds Documentation\"\r\n  description: \"Add data to your smart contracts and applications. Chainlink data feeds include BTC/USD, BTC/ETH, ETH/USD and more!\"\r\n---\r\n\r\nimport button from \"@chainlink/design-system/button.module.css\"\r\n\r\n![Chainlink Abstract Banner](/files/2306b8b-Decentralized_Oracles_V3.png)\r\n\r\n**Chainlink Data Feeds** are the quickest way to connect your smart contracts to the real-world data such as asset prices, reserve balances, and L2 sequencer health.\r\n\r\nIf you already have a project started and would like to integrate Chainlink, you can [add Chainlink to your existing project](/resources/create-a-chainlinked-project/#install-into-existing-projects) by using the [`@chainlink/contracts` NPM package](https://www.npmjs.com/package/@chainlink/contracts).\r\n\r\n## Types of data feeds\r\n\r\nData feeds provide many different types of data for your applications.\r\n\r\n- [Price Feeds](#price-feeds)\r\n- [Proof of Reserve Feeds](#proof-of-reserve-feeds)\r\n- [L2 sequencer uptime feeds](#l2-sequencer-uptime-feeds)\r\n\r\n### Price Feeds\r\n\r\nSee the [Data Feeds Contract Addresses](/data-feeds/price-feeds/addresses/) page for a list of networks and proxy addresses.\r\n\r\nSmart contracts often act in real-time on data such as prices of assets. This is especially true in [DeFi](https://defi.chain.link/).\r\n\r\nFor example, [Synthetix](https://www.synthetix.io/) uses Data Feeds to determine prices on their derivatives platform. Lending and borrowing platforms like [AAVE](https://aave.com/) use Data Feeds to ensure the total value of the collateral.\r\n\r\nData Feeds aggregate many data sources and publish them on-chain using a combination of the [Decentralized Data Model](/architecture-overview/architecture-decentralized-model/) and [Off-Chain Reporting](/architecture-overview/off-chain-reporting/).\r\n\r\nTo learn how to use Price Feeds, see the [Price Feeds](/data-feeds/price-feeds/) documentation.\r\n\r\n<a href=\"/docs/data-feeds/price-feeds/\" class={button.primary}>\r\n  {\"Price Feeds\"}\r\n</a>\r\n\r\n### Proof of Reserve Feeds\r\n\r\nProof of Reserves feeds provide the status of reserves for stablecoins, wrapped assets, and real world assets. Proof of Reserve Feeds operate similarly to Price Feeds, but provide answers in units of measurement such as ounces (oz) or number of tokens.\r\n\r\nTo learn more about Proof of Reserve Feeds, see the [Proof of Reserve](/data-feeds/proof-of-reserve/) documentation.\r\n\r\n<a href=\"/docs/data-feeds/proof-of-reserve/\" class={button.primary}>\r\n  {\"Proof of Reserve Feeds\"}\r\n</a>\r\n\r\n### NFT Floor Pricing Feeds\r\n\r\nNFT Floor Pricing Feeds provide the price of the lowest priced NFT available in a collection. These feeds operate similarly to [Price Feeds](/data-feeds/price-feeds/) so you can use the [AggregatorV3Interface.sol](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol) contract to retrieve price answers.\r\n\r\nTo learn more, see the [NFT Floor Pricing Feeds](/data-feeds/nft-floor-price/) documentation.\r\n\r\n<a href=\"/docs/data-feeds/nft-floor-price/\" class={button.primary}>\r\n  {\"NFT Floor Pricing Feeds\"}\r\n</a>\r\n\r\n### L2 sequencer uptime feeds\r\n\r\nL2 sequencer feeds track the last known status of the sequencer on an L2 network at a given point in time. This helps you prevent mass liquidations by providing a grace period to allow customers to react to these events.\r\n\r\nTo learn how to use L2 sequencer uptime feeds feeds, see the [L2 Sequencer Uptime Feeds](/data-feeds/l2-sequencer-feeds/) documentation.\r\n\r\n<a href=\"/docs/data-feeds/l2-sequencer-feeds/\" class={button.primary}>\r\n  {\"L2 Sequencer Uptime Feeds\"}\r\n</a>\r\n\r\n## Components of a data feed\r\n\r\nData Feeds are an example of a decentralized oracle network and include the following components:\r\n\r\n- **Consumer**: A consumer is an on-chain or off-chain application that uses Data Feeds. Consumer contracts use the [`AggregatorV3Interface`](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol) to call functions on the proxy contract and retrieve information from the aggregator contract. For a complete list of functions available in the `AggregatorV3Interface`, see the [Data Feeds API Reference](/data-feeds/price-feeds/api-reference/#aggregatorv3interface).\r\n- **Proxy contract**: Proxy contracts are on-chain proxies that point to the aggregator for a particular data feed. Using proxies enables the underlying aggregator to be upgraded without any service interruption to consuming contracts. Proxy contracts can vary from one data feed to another, but the [`AggregatorProxy.sol` contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/dev/AggregatorProxy.sol) on Github is a common example.\r\n- **Aggregator contract**: An aggregator is a contract that receives periodic data updates from the oracle network. Aggregators store aggregated data on-chain so that consumers can retrieve it and act upon it within the same transaction. For a complete list of functions and variables available on most aggregator contracts, see the [Data Feeds API Reference](/data-feeds/price-feeds/api-reference/#accesscontrolledoffchainaggregator).\r\n\r\nTo learn how to create a consumer contract that uses an existing data feed, read the [Using Data Feeds](/data-feeds/price-feeds/) documentation.\r\n\r\n## Reading proxy and aggregator configurations\r\n\r\nBecause the proxy and aggregator contracts are all on-chain, you can see the current configuration by reading the variables through an [ABI](https://docs.soliditylang.org/en/latest/abi-spec.html) or using a blockchain explorer for your network. For example, you can see the [BTC/USD proxy configuration](https://etherscan.io/address/0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c#readContract) on the Ethereum network using Etherscan.\r\n\r\nIf you read the BTC/USD proxy configuration, you can query all of the functions and variables that are publicly accessible for that contract including the `aggregator` address, `latestRoundData()` function, `latestAnswer` variable, `owner` address, `latestTimestamp` variable, and several others. To see descriptions for the proxy contract variables and functions, see the source code for your specific data feed on [Etherscan](https://etherscan.io/address/0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c#code#L568).\r\n\r\nThe proxy contract points to an aggregator. This allows you to retrieve data through the proxy even if the aggregator is upgraded. If you view the `aggregator` address defined in the proxy configuration, you can see the aggregator and its configuration. For example, see the [BTC/USD aggregator contract](https://etherscan.io/address/0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c#code) in Etherscan. This contract includes several variables and functions, including another `latestRoundData()`. To see descriptions for the aggregator variables and functions, see the source code on [GitHub](https://github.com/smartcontractkit/libocr/blob/master/contract/AccessControlledOffchainAggregator.sol) or [Etherscan](https://etherscan.io/address/0xae74faa92cb67a95ebcab07358bc222e33a34da7#code#F1#L1).\r\n\r\nYou can call the `latestRoundData()` function directly on the aggregator, but it is a best practice to use the proxy instead so that changes to the aggregator do not affect your application. Similar to the proxy contract, the aggregator contract has a `latestAnswer` variable, `owner` address, `latestTimestamp` variable, and several others.\r\n\r\n## Components of an aggregator\r\n\r\nThe aggregator contract has several variables and functions that might be useful for your application. Although aggregator contracts are similar for each data feed, some aggregators have different variables. Use the `typeAndVersion()` function on the aggregator to identify what type of aggregator it is and what version it is running.\r\n\r\nAlways check the contract source code and configuration to understand how specific data feeds operate. For example, the [aggregator contract for BTC/USD on Arbitrum](https://arbiscan.io/address/0x942d00008d658dbb40745bbec89a93c253f9b882#code) is different from the aggregators on other networks.\r\n\r\nFor examples of the contracts that are typically used in aggregator deployments, see the [libocr repository](https://github.com/smartcontractkit/libocr/blob/master/contract/) on GitHub.\r\n\r\nFor a complete list of functions and variables available on most aggregator contracts, see the [Data Feeds API Reference](/data-feeds/price-feeds/api-reference/#accesscontrolledoffchainaggregator).\r\n\r\n## Updates to proxy and aggregator contracts\r\n\r\nTo accommodate the dynamic nature of off-chain environments, Chainlink Data Feeds are updated from time to time to add new features and capabilities as well as respond to externalities such as token migrations, protocol rebrands, extreme market events, and upstream issues with data or node operations.\r\n\r\nThese updates include changes to the aggregator configuration or a complete replacement of the aggregator that the proxy uses. If you consume data feeds through the proxy, your applications can continue to operate during these changes.\r\n\r\nProxy and aggregator contracts all have an `owner` address that has permission to change variables and functions. For example, if you read the [BTC/USD proxy contract](https://etherscan.io/address/0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c#readContract) in Etherscan, you can see the `owner` address. This address is a [multi-signature safe](https://docs.gnosis-safe.io/introduction/the-programmable-account/gnosis-safe) (multisig) that you can also inspect.\r\n\r\nIf you [view the multisig contract](https://etherscan.io/address/0x21f73d42eb58ba49ddb685dc29d3bf5c0f0373ca#readProxyContract) in Etherscan using the _Read as Proxy_ feature, you can see the full details of the multisig including the list of addresses that can sign and the number of signers required for the multisig to approve actions on any contracts that it owns.\r\n\r\nThe multisig-coordinated upgradability of Chainlink Data Feeds involves time-tested processes that balance collusion-resistance with the flexibility required to implement improvements and swiftly react to external conditions. The approach taken to upgradability will continue to evolve over time to meet user requirements.\r\n\r\n## Monitoring data feeds\r\n\r\nWhen you build applications and protocols that depend on data feeds, include monitoring and safeguards to protect against the negative impact of extreme market events, possible malicious activity on third-party venues or contracts, potential delays, and outages.\r\n\r\nCreate your own monitoring alerts based on deviations in the answers that data feeds provide. This will notify you when potential issues occur so you can respond to them.\r\n\r\n### Check the latest answer against reasonable limits\r\n\r\nThe data feed aggregator includes both [`minAnswer` and `maxAnswer` values](https://github.com/smartcontractkit/libocr/blob/9e4afd8896f365b964bdf769ca28f373a3fb0300/contract/AccessControlledOffchainAggregator.sol#L33). These variables prevent the aggregator from updating the `latestAnswer` outside the agreed range of acceptable values, but they do not stop your application from reading the most recent answer.\r\n\r\nConfigure your application to detect when the reported answer is close to reaching `minAnswer` or `maxAnswer` and issue an alert so you can respond to a potential market event. Separately, configure your application to detect and respond to extreme price volatility or prices that are outside of your acceptable limits.\r\n\r\n### Check the timestamp of the latest answer\r\n\r\nChainlink Price Feeds do not provide streaming data. Rather, the aggregator updates its `latestAnswer` when the value deviates beyond a specified threshold or when the heartbeat idle time has passed. You can find the heartbeat and deviation values for each data feed at [data.chain.link](https://data.chain.link/) or in the [Contract Addresses](/data-feeds/price-feeds/addresses/) lists.\r\n\r\nYour application should track the `latestTimestamp` variable or use the `updatedAt` value from the `latestRoundData()` function to make sure that the latest answer is recent enough for your application to use it. If your application detects that the reported answer is not updated within the heartbeat or within time limits that you determine are acceptable for your application, pause operation or switch to an alternate operation mode while identifying the cause of the delay.\r\n\r\nDuring periods of low volatility, the heartbeat triggers updates to the latest answer. Some heartbeats are configured to last several hours, so your application should check the timestamp and verify that the latest answer is recent enough for your application.\r\n\r\nTo learn more about the heartbeat and deviation threshold, read the [Decentralized Data Model](/architecture-overview/architecture-decentralized-model#aggregator) page.\r\n"
    },
    {
      "title": "Historical Price Data",
      "headings": [
        {
          "depth": 2,
          "slug": "historical-rounds",
          "text": "Historical Rounds"
        },
        {
          "depth": 3,
          "slug": "roundid-in-aggregator-aggregatorroundid",
          "text": "roundId in Aggregator (aggregatorRoundId)"
        },
        {
          "depth": 3,
          "slug": "roundid-in-proxy",
          "text": "roundId in Proxy"
        },
        {
          "depth": 3,
          "slug": "getrounddata-return-values",
          "text": "getRoundData return values"
        },
        {
          "depth": 3,
          "slug": "solidity",
          "text": "Solidity"
        },
        {
          "depth": 3,
          "slug": "javascript",
          "text": "Javascript"
        },
        {
          "depth": 3,
          "slug": "python",
          "text": "Python"
        }
      ],
      "url": "/data-feeds/price-feeds/historical-data",
      "section": "ethereum",
      "description": "How to use Chainlink Data Feeds to retrieve historical data in your smart contracts.",
      "content": "---\r\nlayout: ../../../layouts/MainLayout.astro\r\nsection: ethereum\r\ndate: Last Modified\r\ntitle: \"Historical Price Data\"\r\npermalink: \"docs/data-feeds/price-feeds/historical-data/\"\r\nwhatsnext:\r\n  {\r\n    \"API Reference\": \"/data-feeds/price-feeds/api-reference/\",\r\n    \"Contract Addresses\": \"/data-feeds/\",\r\n  }\r\nmetadata:\r\n  title: \"Get Historical Data\"\r\n  description: \"How to use Chainlink Data Feeds to retrieve historical data in your smart contracts.\"\r\n---\r\n\r\nimport { HistoricalPrice, priceFeedAddresses } from \"@features/feeds\"\r\nimport { Aside } from \"@components\"\r\nimport CodeSample from \"@components/CodeSample/CodeSample.astro\"\r\nimport button from \"@chainlink/design-system/button.module.css\"\r\n\r\nThe most common use case for Data Feeds is to [Get the Latest Data](/data-feeds/price-feeds/) from a feed. However, the [AggregatorV3Interface.sol](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol) also has functions to retrieve data of a previous round IDs.\r\n\r\nThere are two parameters that can cause Chainlink nodes to update:\r\n\r\n| Name                | Description                                                                                                                                     |\r\n| ------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| Deviation Threshold | Chainlink nodes are monitoring data off-chain. The deviation of the real-world data beyond a certain interval triggers all the nodes to update. |\r\n| Heartbeat Threshold | If the data values stay within the deviation parameters, it will only trigger an update every _X_ minutes / hours.                              |\r\n\r\nYou can find these parameters at [data.chain.link](https://data.chain.link/) on an example like [ETH / USD](https://data.chain.link/ethereum/mainnet/crypto-usd/eth-usd).\r\n\r\nTo learn how data feeds update, see the [Decentralized Data Model](/architecture-overview/architecture-decentralized-model#aggregator) page.\r\n\r\n## Historical Rounds\r\n\r\nAs shown in the [decentralized model](/architecture-overview/architecture-decentralized-model/), the consumer contracts call the proxy contract, which abstracts the underlying aggregator contract. The main advantage is to enable upgrades of the aggregator without impacting the consumer contracts. That also means that historical data can can be stored in different aggregators.\r\nAs show in the following sequence diagram, to get historical data, call the `getRoundData` [function](/data-feeds/price-feeds/api-reference/#getrounddata) function and provide `roundId` as a parameter.\r\n\r\n![getRoundData Sequence Diagram](/images/data-feed/getRoundData-sequence.png)\r\n\r\nNote that roundIds have different meanings in proxy contracts and in aggregator contracts.\r\n\r\n### `roundId` in Aggregator (aggregatorRoundId)\r\n\r\nOracles provide periodic data updates to the aggregators. Data feeds are updated in **rounds**. Rounds are identified by their `roundId`, which increases with each new round. This increase may not be monotonic. Knowing the `roundId` of a previous round allows contracts to consume historical data.\r\n\r\nThe examples in this document name the aggregator `roundId` as `aggregatorRoundId` to differentiate it from the proxy `roundId`.\r\n\r\n### `roundId` in Proxy\r\n\r\nBecause a proxy has references to current and all previous underlying aggregators, it needs a way to fetch data from the correct aggregator. The `roundId` is computed in the [proxy contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/dev/AggregatorProxy.sol) as shown in the following example:\r\n\r\n```solidity\r\nroundId = uint80((uint256(phaseId) << 64) | aggregatorRoundId);\r\n```\r\n\r\nwhere:\r\n\r\n- `phaseId` is incremented each time the underlying aggregator implementation is updated. It is used as key to find the aggregator address.\r\n- `aggregatorRoundId` is the aggregator `roundId`. The id starts at 1.\r\n- `roundId` is the computed round id. From the above formula, you can think of it as a large number containing the `phaseId` and the `aggregatorRoundId`.\r\n\r\n<Aside type=\"note\" title=\"Note\">\r\n  The example formula above ensures that no matter how many times the underlying\r\n  aggregator changes, the proxy `roundId` will always increase.\r\n</Aside>\r\n\r\n**Example:**\r\n\r\nWhen you query historical data, it is important to know when you reach the end of the history of the underlying aggregator. As an example, if the `latestRoundData` [function](/data-feeds/price-feeds/api-reference/#latestrounddata) of the [LINK / USD feed on Ethereum Mainnet](/data-feeds/price-feeds/addresses/?network=ethereum) returns `roundId = 92233720368547771158`, you can use this value to compute the `phaseId` and `aggregatorRoundId`:\r\n\r\n- `phaseId = 92233720368547771158 >> 64`: Right shifting an integer by 64 bits is equivalent to dividing it by 2^64: `phaseId = 92233720368547771158/ 2^64 = 5`. The current phase id is 5 , which means that this proxy has had 5 underlying aggregators since its initial deployment.\r\n- `aggregatorRoundId = uint64(92233720368547771158)`: This retrieves the first 64 bits from the right. To calculate this off-chain, you can use the following JavaScript example:\r\n\r\n```javascript\r\n// First parse to BigInt to perform computation with big integers\r\nconst num = BigInt(\"92233720368547771158\")\r\nconst num2 = BigInt(\"0xFFFFFFFFFFFFFFFF\") // Largest 64bits integer\r\n\r\nconsole.log(Number(num >> 64n)) // returns 5 (phaseId)\r\nconsole.log(Number(num & num2)) // returns 13078 (aggregatorRoundId) . Use & (AND bitwise operator) which sets each bit to _1_ if both bits are _1_\r\n```\r\n\r\nUsing _13078_ as the current aggregator's round, get its historical data by looping over the [`getRoundData` function](/data-feeds/price-feeds/api-reference/#getrounddata):\r\n\r\n- Start from the first round: _92233720368547758081_ (result of _92233720368547771158 - 13078 + 1_)\r\n- Continue until the current round: _92233720368547771158_\r\n\r\nTo get the historical data for previous aggregators, decrement the `phaseId` and start from round _1_. For phase _4_, get the starting `roundId` off-chain using the following JavaScript example:\r\n\r\n```javascript\r\nconst phaseId = BigInt(\"4\")\r\nconst aggregatorRoundId = BigInt(\"1\")\r\n\r\nroundId = (phaseId << 64n) | aggregatorRoundId // returns 73786976294838206465n\r\n```\r\n\r\nLoop over the [`getRoundData` function](/data-feeds/price-feeds/api-reference/#getrounddata). Start at _73786976294838206465_ and increment it until you get a revert. This means that you reached the last round for the underlying aggregator. The same process could be repeated for previous `phaseIds` (3,2,1).\r\n\r\n<Aside type=\"caution\" title=\"Looping on-chain\">\r\n  The examples showed how to loop off-chain to fetch all historical data from a\r\n  given proxy. You could also write a similar code on-chain, but be aware that\r\n  this could cause **very high gas prices** if a state is changed within the\r\n  same function.\r\n</Aside>\r\n\r\n### `getRoundData` return values\r\n\r\nThe [`getRoundData` function](/data-feeds/price-feeds/api-reference/#getrounddata) returns the following values:\r\n\r\n- `roundId`: The combination of `aggregatorRoundId` and `phaseId` (see explanation above). The `roundId` can jump significantly when the `phaseId` is updated.\r\n- `answer` is the price.\r\n- `answeredInRound`: The combination of `aggregatorAnsweredInRound` and `phaseId`. `aggregatorAnsweredInRound`: The round the answer was updated in. You can check `answeredInRound` against the current `roundId`. If `answeredInRound` is less than `roundId`, the answer is being carried over. If `answeredInRound` is equal to `roundId`, then the answer is fresh.\r\n- `startedAt`: The timestamp when the round started.\r\n- `updatedAt`: The timestamp when the answer was computed.\r\n\r\n<Aside type=\"caution\" title=\"Important\">\r\n  A read can revert if the caller is requesting the details of a round that was\r\n  invalid or has not yet been answered. If you are deriving a round ID without\r\n  having observed it before, the round might not be complete. To check the\r\n  round, validate that the timestamp on that round is not 0. In a best-case\r\n  scenario, rounds update chronologically. However, a round can time out if it\r\n  doesn't reach consensus. Technically, that is a timed out round that carries\r\n  over the answer from the previous round.\r\n</Aside>\r\n\r\n### Solidity\r\n\r\n<CodeSample src=\"samples/PriceFeeds/HistoricalPriceConsumer.sol\" />\r\n\r\n### Javascript\r\n\r\n<CodeSample src=\"samples/PriceFeeds/HistoricalPriceConsumer.js\" />\r\n\r\n<HistoricalPrice\r\n  client:idle\r\n  feedAddress={priceFeedAddresses.btc.usd.goerli.address}\r\n  roundId={priceFeedAddresses.btc.usd.goerli.historicalRound}\r\n  supportedChain=\"ETHEREUM_GOERLI\"\r\n/>\r\n\r\n### Python\r\n\r\n<CodeSample src=\"samples/PriceFeeds/HistoricalPriceConsumer.py\" />\r\n<a href=\"https://repl.it/@DwightLyle/GetHistoricalPriceWeb3PY\" class={button.primary}>\r\n  {\"Run this Python example\"}\r\n</a>\r\n"
    },
    {
      "title": "Using Price Feeds",
      "headings": [
        {
          "depth": 2,
          "slug": "solidity",
          "text": "Solidity"
        },
        {
          "depth": 2,
          "slug": "vyper",
          "text": "Vyper"
        },
        {
          "depth": 2,
          "slug": "javascript",
          "text": "Javascript"
        },
        {
          "depth": 2,
          "slug": "python",
          "text": "Python"
        },
        {
          "depth": 2,
          "slug": "golang",
          "text": "Golang"
        },
        {
          "depth": 2,
          "slug": "getting-a-different-price-denomination",
          "text": "Getting a different price denomination"
        },
        {
          "depth": 2,
          "slug": "how-do-data-feeds-get-their-data",
          "text": "How Do Data Feeds Get Their Data?"
        },
        {
          "depth": 2,
          "slug": "more-aggregator-functions",
          "text": "More Aggregator Functions"
        }
      ],
      "url": "/data-feeds/price-feeds",
      "section": "ethereum",
      "description": "How to use Chainlink Data Feeds in your smart contracts.",
      "content": "---\r\nlayout: ../../../layouts/MainLayout.astro\r\nsection: ethereum\r\ndate: Last Modified\r\ntitle: \"Using Price Feeds\"\r\npermalink: \"docs/data-feeds/price-feeds/\"\r\nwhatsnext:\r\n  {\r\n    \"Historical Price Data\": \"/data-feeds/price-feeds/historical-data/\",\r\n    \"Price Feeds API Reference\": \"/data-feeds/price-feeds/api-reference/\",\r\n    \"Price Feed Contract Addresses\": \"/data-feeds/price-feeds/addresses/\",\r\n  }\r\nmetadata:\r\n  title: \"Using Data Feeds\"\r\n  description: \"How to use Chainlink Data Feeds in your smart contracts.\"\r\n---\r\n\r\nimport { LatestPrice, priceFeedAddresses } from \"@features/feeds\"\r\nimport { Aside } from \"@components\"\r\nimport { Tabs } from \"@components/Tabs\"\r\nimport button from \"@chainlink/design-system/button.module.css\"\r\nimport CodeSample from \"@components/CodeSample/CodeSample.astro\"\r\n\r\nChainlink Data Feeds are the quickest way to connect your smart contracts to the real-world market prices of assets. For example, one use for data feeds is to enable smart contracts to retrieve the latest pricing data of an asset in a single call.\r\n\r\nThis guide applies specifically to using data feeds on EVM Chains. To get the full list of Chainlink Price Feeds running on the EVM Chains, see the [Contract Addresses](/data-feeds/price-feeds/addresses/) page.\r\n\r\n<Aside type=\"caution\" title=\"Select quality data feeds\">\r\n  Be aware of the quality of the data that you use. [Learn more about making\r\n  responsible data quality decisions.](/data-feeds/selecting-data-feeds/)\r\n</Aside>\r\n\r\nFor important updates regarding the use of Chainlink Price Feeds, users should join the official Chainlink Discord and subscribe to the data-feeds-user-notifications channel: [https://discord.gg/Dqy5N9UbsR](https://discord.gg/Dqy5N9UbsR)\r\n\r\nThese examples show you how to get the price of Ethereum (ETH) on the Ethereum Goerli testnet, but you can modify the examples to work on other chains as well. The list of price feeds for each network are available on the [Data Feed Contracts](/data-feeds/price-feeds/addresses/) page. For development, use testnet data feeds such as the [BTC / USD feed](https://goerli.etherscan.io/address/0xA39434A63A52E749F02807ae27335515BA4b07F7) on the Goerli testnet.\r\n\r\nYou can write smart contracts that consume Price Feeds using several languages, but this guide shows examples using the following languages:\r\n\r\n- [Solidity](#solidity)\r\n- [Vyper](#vyper)\r\n- [Javascript](#javascript) with [web3.js](https://web3js.readthedocs.io/)\r\n- [Python](#python) with [Web3.py](https://web3py.readthedocs.io/en/stable/)\r\n- [Golang](#golang) with [go-ethereum](https://github.com/ethereum/go-ethereum)\r\n\r\n## Solidity\r\n\r\nTo consume price data, your smart contract should reference [`AggregatorV3Interface`](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol), which defines the external functions implemented by Data Feeds.\r\n\r\n<CodeSample src=\"samples/PriceFeeds/PriceConsumerV3.sol\" />\r\n\r\nThe `latestRoundData` function returns five values representing information about the latest price data. See the [Data Feeds API Reference](/data-feeds/price-feeds/api-reference/) for more details.\r\n\r\n## Vyper\r\n\r\nTo consume price data, your smart contract should import `AggregatorV3Interface` which defines the external functions implemented by Data Feeds. You can find it [here](https://github.com/smartcontractkit/apeworx-starter-kit/blob/main/contracts/interfaces/AggregatorV3Interface.vy).\r\nYou can find a `PriceConsumer` example [here](https://github.com/smartcontractkit/apeworx-starter-kit/blob/main/contracts/PriceConsumer.vy). Read the _**apeworx-starter-kit**_ [README](https://github.com/smartcontractkit/apeworx-starter-kit) to learn how to run the example.\r\n\r\n## Javascript\r\n\r\nThis example uses [web3.js](https://web3js.readthedocs.io/) to retrieve feed data from the [BTC / USD feed](https://goerli.etherscan.io/address/0xA39434A63A52E749F02807ae27335515BA4b07F7) on the Goerli testnet.\r\n\r\n<Tabs client:visible>\r\n  <Fragment slot=\"tab.1\">web3.js</Fragment>\r\n  <Fragment slot=\"tab.2\">ethers.js</Fragment>\r\n  <Fragment slot=\"panel.1\">\r\n    <CodeSample src=\"samples/PriceFeeds/PriceConsumerV3.js\" />\r\n  </Fragment>\r\n  <Fragment slot=\"panel.2\">\r\n    <CodeSample src=\"samples/PriceFeeds/PriceConsumerV3Ethers.js\" />\r\n  </Fragment>\r\n</Tabs>\r\n\r\n<LatestPrice\r\n  client:idle\r\n  feedAddress={priceFeedAddresses.btc.usd.goerli.address}\r\n  supportedChain=\"ETHEREUM_GOERLI\"\r\n/>\r\n\r\n## Python\r\n\r\nThis example uses [Web3.py](https://web3py.readthedocs.io/en/stable/) to retrieve feed data from the [BTC / USD feed](https://goerli.etherscan.io/address/0xA39434A63A52E749F02807ae27335515BA4b07F7) on the Goerli testnet.\r\n\r\n<CodeSample src=\"samples/PriceFeeds/PriceConsumerV3.py\" />\r\n<a href=\"https://repl.it/@DwightLyle/GetLatestPriceWeb3PY\" class={button.primary}>\r\n  {\"Run this Python example\"}\r\n</a>\r\n\r\n## Golang\r\n\r\nYou can find an example with all the source files [here](https://github.com/smartcontractkit/smart-contract-examples/tree/main/pricefeed-golang). This example uses [go-ethereum](https://github.com/ethereum/go-ethereum) to retrieve feed data from the [BTC / USD feed](https://goerli.etherscan.io/address/0xA39434A63A52E749F02807ae27335515BA4b07F7) on the Goerli testnet.\r\nTo learn how to run the example, see the [README](https://github.com/smartcontractkit/smart-contract-examples/blob/main/pricefeed-golang/README.md).\r\n\r\n<Aside type=\"note\" title=\"New Feed Registry\">\r\n  You can use the [Feed Registry](/data-feeds/feed-registry/) to reference data\r\n  feed assets by name or currency identifier instead of by pair/proxy address.\r\n</Aside>\r\n\r\n## Getting a different price denomination\r\n\r\nChainlink Data Feeds can be used in combination to derive denominated price pairs in other currencies.\r\n\r\nIf you require a denomination other than what is provided, you can use two data feeds to derive the pair that you need. For example, if you needed a BTC / EUR price, you could take the BTC / USD feed and the EUR / USD feed and derive BTC / EUR using division.\r\n\r\n![Request Model Diagram](/images/price-feed-conversion-equation.gif)\r\n\r\n<Aside type=\"caution\" title=\"Important\">\r\nIf your contracts require Solidity versions that are `>=0.6.0 <0.8.0`, use [OpenZeppelin's SafeMath version 3.4](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.4/contracts/math/SafeMath.sol).\r\n</Aside>\r\n\r\n<CodeSample src=\"samples/PriceFeeds/PriceConverter.sol\" />\r\n\r\n## How Do Data Feeds Get Their Data?\r\n\r\nData Feeds are aggregated from many data sources by a decentralized set of independent Node Operators. The [Decentralized Data Model](/architecture-overview/architecture-decentralized-model/) describes this in detail.\r\n\r\n## More Aggregator Functions\r\n\r\nGetting the latest price is not the only data that aggregators can retrieve. You can also retrieve historical price data. To learn more, see the [Historical Price Data](/data-feeds/price-feeds/historical-data/) page.\r\n\r\nTo understand different use cases for Chainlink Price Feeds, refer to [Other Tutorials](/getting-started/other-tutorials/).\r\n"
    },
    {
      "title": "Chainlink on EVM (Ethereum) Chains",
      "headings": [],
      "url": "/ethereum",
      "section": "ethereum",
      "content": "---\nlayout: ../layouts/MainLayout.astro\nsection: ethereum\ntitle: \"Chainlink on EVM (Ethereum) Chains\"\n---\n\nimport button from \"@chainlink/design-system/button.module.css\"\nimport styles from \"@features/landing/styles/EthereumLandingPage.module.css\"\n\nChainlink turns your smart contracts into hybrid smart contracts, giving\nthem access to real-world data and services while maintaining the security\nand reliability guarantees inherent to blockchain technology.\n\n<div class={styles.productCardGrid}>\n  <section class=\"card\" >\n    <img\n      src=\"https://uploads-ssl.webflow.com/5e444500cbc42eeb5198206f/5e7898724c71bddf6749df17_DeFi2.svg\"\n      class=\"cl-image-featured\"\n      style=\"width: 48px\"\n    />\n    <h3 class={styles.cardTitle}>Get Data Feeds in your Smart Contracts</h3>\n    <p>\n      Retrieve the latest prices and data points of assets in your smart\n      contracts.\n    </p>\n    <a\n      href=\"/data-feeds/\"\n      class={button.secondary}\n      style=\"margin-top: var(--space-4x); display: inline-flex;\"\n    >\n      {\"Learn More\"}\n      <img\n        class=\"cta-learnmore-arrow\"\n        src=\"/images/card-icons/navigation-arrow-right.svg\"\n        loading=\"lazy\"\n        alt=\"Right arrow\"\n        style=\"height: 16px\"\n      />\n    </a>\n\n  </section>\n  <section class=\"card\">\n    <div>\n      <img\n        src=\"https://uploads-ssl.webflow.com/5e444500cbc42eeb5198206f/5e7898724c71bd62c149df16_Example.svg\"\n        class=\"cl-image-featured\"\n        style=\"width: 48px\"\n      />\n      <h3 class={styles.cardTitle}>Generate Verifiable Random Numbers (VRF)</h3>\n      <p>Use Chainlink VRF to consume randomness in your smart contracts.</p>\n      <a\n        href=\"/vrf/v2/introduction/\"\n        class={button.secondary}\n        style=\"margin-top: var(--space-4x); display: inline-flex;\"\n      >\n        {\"Learn More\"}\n        <img\n          class=\"cta-learnmore-arrow\"\n          src=\"/images/card-icons/navigation-arrow-right.svg\"\n          loading=\"lazy\"\n          alt=\"Right arrow\"\n          style=\"height: 16px\"\n        />\n      </a>\n    </div>\n\n  </section>\n  <section class=\"card\">\n      <img\n        src=\"https://uploads-ssl.webflow.com/5e444500cbc42eeb5198206f/5e7894ddbc6262c7a18da684_RequestSmall.svg\"\n        class=\"cl-image-featured\"\n        height=\"50\"\n      />\n      <h3 class={styles.cardTitle}>Call External APIs from Smart Contracts</h3>\n      <p>\n        Request &amp; Receive data from any API using the Chainlink contract\n        library.\n      </p>\n      <a href=\"/any-api/introduction/\"  \n        class={button.secondary}\n        style=\"margin-top: var(--space-4x); display: inline-flex;\"\n      >\n        {\"Learn More\"}\n        <img\n          class=\"cta-learnmore-arrow\"\n          src=\"/images/card-icons/navigation-arrow-right.svg\"\n          loading=\"lazy\"\n          alt=\"Right arrow\"\n          style=\"height: 16px\"\n        />\n      </a>\n  </section>\n</div>\n\n<section class=\"card\" style=\"text-align: center;\">\n  <div class=\"cl-card-text\">\n    <div class=\"card-icon-wrapper\">\n      <img\n        src=\"/images/card-icons/5f96ab4b4db522072b7ff30c_book-bookmark.svg\"\n        class=\"cl-image-featured\"\n      ></img>\n    </div>\n    <h2>New to Chainlink and Smart Contracts?</h2>\n    <p>\n      Learn the basics in the Getting Started Guide. Build your first smart\n      contract on Ethereum.\n    </p>\n    <a\n      href=\"/getting-started/conceptual-overview/\"\n      class={button.secondary}\n      style=\"margin-top: var(--space-4x);\"\n    >\n      {\"Getting Started Guide\"}\n    </a>\n  </div>\n</section>\n<section class=\"card\" style=\"text-align: center;\">\n  <div class=\"cl-card-text\">\n    <img\n      src=\"/images/contract-devs/automation/icon-automation.svg\"\n      class=\"cl-image-featured\"\n      height=\"80\"\n      style=\"max-width:80px\"\n    />\n    <h3>Automate and Maintain with Chainlink Automation</h3>\n    <p>\n      Chainlink Automation provides smart contract developers, decentralized\n      applications (dApps), and decentralized autonomous organizations (DAOs)\n      with a highly reliable, decentralized, and cost-efficient method of\n      automating smart contract functions and regular contract maintenance.\n    </p>\n    <a\n      href=\"/chainlink-automation/introduction/\"\n      class={button.secondary}\n      style=\"margin-top: var(--space-4x);\"\n    >\n      {\"Learn More\"}\n    </a>\n  </div>\n</section>\n\n<div class={styles.clSection}>\n    <h3>Explore Additional Resources</h3>\n    <p>Find all the right resources to get the most out of Chainlink.</p>\n    <div class={styles.clSectionCards}>\n      <a\n        class={styles.clProductCard}\n        href=\"/architecture-overview/architecture-overview/\"\n        target=\"_blank\"\n      >\n          <img\n            src=\"/images/card-icons/5f85d14b6782933bd5a70060_decentralized.svg\"\n            width=\"150px\"\n          />\n          <h5>Data Feeds Architecture</h5>\n      </a>\n      <a class={styles.clProductCard} href=\"/getting-started/other-tutorials/\" target=\"_blank\">\n          <img\n            src=\"/images/card-icons/5f75e7d3f8ef05758ce8c1f5_bulb.svg\"\n            width=\"150px\"\n          />\n          <h5>Videos and Tutorials</h5>\n      </a>\n      <a class={styles.clProductCard}href=\"https://blog.chain.link/\" target=\"_blank\">\n        <div>\n          <img\n            src=\"/images/card-icons/61163fe987f45b67ab88bcfe_common-file-text-chainlink.svg\"\n            width=\"150px\"\n          />\n          <h5>Chainlink Blog</h5>\n        </div>\n      </a>\n      <a\n        class={styles.clProductCard}\n        href=\"https://chain.link/community\"\n        target=\"_blank\"\n      >\n          <img\n            src=\"/images/card-icons/5f75ccd99b524261854d093d_multiple-users-network.svg\"\n            width=\"150px\"\n          />\n          <h5>Join the Community</h5>\n      </a>\n\n  </div>\n</div>\n<div class={styles.clSection}>\n  <h3>Explore Chainlink Developer Tools</h3>\n  <div class={styles.clSectionCards}>\n      <a\n        class={styles.clProductCard}\n        href=\"https://www.npmjs.com/package/@chainlink/contracts\"\n        target=\"_blank\"\n      >\n          <img src=\"https://uploads-ssl.webflow.com/5e444500cbc42eeb5198206f/5e711675d22595473f1c0c20_Contract.svg\" />\n          <h5>Contracts</h5>\n      </a>\n      <a\n        class={styles.clProductCard}\n        href=\"https://www.npmjs.com/package/@chainlink/test-helpers\"\n        target=\"_blank\"\n      >\n          <img src=\"https://uploads-ssl.webflow.com/5e444500cbc42eeb5198206f/5e7116765b27d4521f92bac6_Tester.svg\" />\n          <h5>Test Helpers</h5>\n      </a>\n    </div>\n</div>\n"
    },
    {
      "title": "Overview",
      "headings": [
        {
          "depth": 1,
          "slug": "mdx",
          "text": "MDX"
        },
        {
          "depth": 2,
          "slug": "features",
          "text": "Features"
        },
        {
          "depth": 2,
          "slug": "commands-cheatsheet",
          "text": "Commands Cheatsheet"
        },
        {
          "depth": 2,
          "slug": "new-to-astro",
          "text": "New to Astro?"
        },
        {
          "depth": 2,
          "slug": "customize-this-theme",
          "text": "Customize This Theme"
        },
        {
          "depth": 3,
          "slug": "site-metadata",
          "text": "Site metadata"
        },
        {
          "depth": 3,
          "slug": "css-styling",
          "text": "CSS styling"
        },
        {
          "depth": 2,
          "slug": "page-metadata",
          "text": "Page metadata"
        },
        {
          "depth": 3,
          "slug": "sidebar-navigation",
          "text": "Sidebar navigation"
        },
        {
          "depth": 3,
          "slug": "multiple-languages-support",
          "text": "Multiple Languages support"
        },
        {
          "depth": 3,
          "slug": "what-if-i-dont-plan-to-support-multiple-languages",
          "text": "What if I don’t plan to support multiple languages?"
        },
        {
          "depth": 3,
          "slug": "search-powered-by-algolia",
          "text": "Search (Powered by Algolia)"
        }
      ],
      "url": "/rc",
      "section": "gettingStarted",
      "content": "---\nlayout: ../layouts/MainLayout.astro\nsection: gettingStarted\ndate: Last Modified\ntitle: \"Overview\"\nexcerpt: \"Smart Contracts\"\nwhatsnext:\n  {\n    \"Deploy Your First Smart Contract\": \"/getting-started/deploy-your-first-contract/\",\n    \"Consuming Data Feeds\": \"/getting-started/consuming-data-feeds/\",\n  }\nclientSideToc: false\n---\n\nimport { Aside, ClickToZoom, CodeSample } from \"@components\"\nimport { Tabs } from \"@components/Tabs\"\n\n<h2 id=\"test\">test heading</h2>\n\n<Tabs client:visible>\n  <Fragment slot=\"tab.1\">web3.js</Fragment>\n  <Fragment slot=\"tab.2\">ethers.js</Fragment>\n  <Fragment slot=\"panel.1\">\n    <CodeSample src=\"samples/PriceFeeds/PriceConsumerV3.js\" />\n  </Fragment>\n  <Fragment slot=\"panel.2\">\n    <CodeSample src=\"samples/PriceFeeds/PriceConsumerV3Ethers.js\" />\n  </Fragment>\n</Tabs>\n\n<ClickToZoom src=\"/files/8c35025-Request__Receive_Data.png\" />\n<ClickToZoom src=\"/images/card-icons/5f75cc9f74f7124d70ad4f0a_file-code-check.svg\" />\n\n# MDX\n\n```bash\nnpm init astro -- --template docs\n```\n\n<Aside title=\"note\">this is a note</Aside>\n\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/withastro/astro/tree/latest/examples/docs)\n\n## Features\n\n- ✅ **Full Markdown support**\n- ✅ **Responsive mobile-friendly design**\n- ✅ **Sidebar navigation**\n- ✅ **Search (powered by Algolia)**\n- ✅ **Multi-language i18n**\n- ✅ **Automatic table of contents**\n- ✅ **Automatic list of contributors**\n- ✅ (and, best of all) **dark mode**\n\n## Commands Cheatsheet\n\nAll commands are run from the root of the project, from a terminal:\n\n| Command           | Action                                       |\n| :---------------- | :------------------------------------------- |\n| `npm install`     | Installs dependencies                        |\n| `npm run dev`     | Starts local dev server at `localhost:3000`  |\n| `npm run build`   | Build your production site to `./dist/`      |\n| `npm run preview` | Preview your build locally, before deploying |\n\nTo deploy your site to production, check out our [Deploy an Astro Website](https://docs.astro.build/guides/deploy) guide.\n\n## New to Astro?\n\nWelcome! Check out [our documentation](https://docs.astro.build) or jump into our [Discord server](https://astro.build/chat).\n\n## Customize This Theme\n\n### Site metadata\n\n`src/config.ts` contains several data objects that describe metadata about your site like title, description, default language, and Open Graph details. You can customize these to match your project.\n\n### CSS styling\n\nThe theme's look and feel is controlled by a few key variables that you can customize yourself. You'll find them in the `public/theme.css` CSS file.\n\nIf you've never worked with CSS variables before, give [MDN's guide on CSS variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties) a quick read.\n\nThis theme uses a \"cool blue\" accent color by default. To customize this for your project, change the `--theme-accent` variable to whatever color you'd like:\n\n```diff\n/* public/theme.css */\n:root {\n  color-scheme: light;\n-  --theme-accent: hsla(var(--color-blue), 1);\n+  --theme-accent: hsla(var(--color-red), 1);   /* or: hsla(#FF0000, 1); */\n```\n\n## Page metadata\n\nAstro uses frontmatter in Markdown pages to choose layouts and pass properties to those layouts. If you are using the default layout, you can customize the page in many different ways to optimize SEO and other things. For example, you can use the `title` and `description` properties to set the document title, meta title, meta description, and Open Graph description.\n\n```markdown\n---\ntitle: Example title\ndescription: Really cool docs example that uses Astro\nlayout: ../../layouts/MainLayout.astro\n---\n\n# Page content...\n```\n\nFor more SEO related properties, look at `src/components/HeadSEO.astro`\n\n### Sidebar navigation\n\nThe sidebar navigation is controlled by the `SIDEBAR` variable in your `src/config.ts` file. You can customize the sidebar by modifying this object. A default, starter navigation has already been created for you.\n\n```ts\nexport const SIDEBAR = {\n  en: [\n    { text: \"Section Header\", header: true },\n    { text: \"Introduction\", link: \"en/introduction\" },\n    { text: \"Page 2\", link: \"en/page-2\" },\n    { text: \"Page 3\", link: \"en/page-3\" },\n\n    { text: \"Another Section\", header: true },\n    { text: \"Page 4\", link: \"en/page-4\" },\n  ],\n}\n```\n\nNote the top-level `en` key: This is needed for multi-language support. You can change it to whatever language you'd like, or add new languages as you go. More details on this below.\n\n### Multiple Languages support\n\nThe Astro docs template supports multiple langauges out of the box. The default theme only shows `en` documentation, but you can enable multi-language support features by adding a second language to your project.\n\nTo add a new language to your project, you'll want to extend the current `src/pages/[lang]/...` layout:\n\n```diff\n 📂 src/pages\n ┣ 📂 en\n ┃ ┣ 📜 page-1.md\n ┃ ┣ 📜 page-2.md\n ┃ ┣ 📜 page-3.astro\n+ ┣ 📂 es\n+ ┃ ┣ 📜 page-1.md\n+ ┃ ┣ 📜 page-2.md\n+ ┃ ┣ 📜 page-3.astro\n```\n\nYou'll also need to add the new language name to the `KNOWN_LANGUAGES` map in your `src/config.ts` file. This will enable your new language switcher in the site header.\n\n```diff\n// src/config.ts\nexport const KNOWN_LANGUAGES = {\n  English: 'en',\n+  Spanish: 'es',\n};\n```\n\nLast step: you'll need to add a new entry to your sidebar, to create the table of contents for that language. While duplicating every page might not sound ideal to everyone, this extra control allows you to create entirely custom content for every language.\n\n> Make sure the sidebar `link` value points to the correct language!\n\n```diff\n// src/config.ts\nexport const SIDEBAR = {\n  en: [\n    { text: 'Section Header', header: true, },\n    { text: 'Introduction', link: 'en/introduction' },\n    // ...\n  ],\n+  es: [\n+    { text: 'Encabezado de sección', header: true, },\n+    { text: 'Introducción', link: 'es/introduction' },\n+    // ...\n+  ],\n};\n\n// ...\n```\n\nIf you plan to use Spanish as the the default language, you just need to modify the redirect path in `src/pages/index.astro`:\n\n```diff\n<script>\n- window.location.pathname = `/en/introduction`;\n+ window.location.pathname = `/es/introduction`;\n</script>\n```\n\nYou can also remove the above script and write a landing page in Spanish instead.\n\n### What if I don't plan to support multiple languages?\n\nThat's totally fine! Not all projects need (or can support) multiple languages. You can continue to use this theme without ever adding a second language.\n\nIf that single language is not English, you can just replace `en` in directory layouts and configurations with the preferred language.\n\n### Search (Powered by Algolia)\n\n[Algolia](https://www.algolia.com/) offers a free service to qualified open source projects called [DocSearch](https://docsearch.algolia.com/). If you are accepted to the DocSearch program, provide your API Key & index name in `src/config.ts` and a search box will automatically appear in your site header.\n\nNote that Aglolia and Astro are not affiliated. We have no say over acceptance to the DocSearch program.\n\nIf you'd prefer to remove Algolia's search and replace it with your own, check out the `src/components/Header.astro` component to see where the component is added.\n"
    },
    {
      "title": "Chainlink on Solana",
      "headings": [
        {
          "depth": 2,
          "slug": "use-data-feeds-on-solana",
          "text": "Use Data Feeds on Solana"
        },
        {
          "depth": 2,
          "slug": "new-to-chainlink-and-smart-contracts",
          "text": "New to Chainlink and Smart Contracts?"
        }
      ],
      "url": "/solana",
      "section": "solana",
      "content": "---\nlayout: ../layouts/MainLayout.astro\nsection: solana\ntitle: \"Chainlink on Solana\"\n---\n\nimport button from \"@chainlink/design-system/button.module.css\"\n\nChainlink turns your smart contracts into hybrid smart contracts, giving\nthem access to real-world data and services.\n\n<section class=\"card cl-featuredcard\" style=\"text-align: center\">\n    <img src=\"/assets/chains/solana.svg\" style=\"height: 48px\" />\n    ## Use Data Feeds on Solana\n\n    Solana is a high-throughput blockchain. You can use Chainlink Data Feeds on\n    the Solana network to connect your smart contracts to the real-world market\n    prices of assets.\n\n    <a href=\"/solana/using-data-feeds-solana/\" class={button.secondary} style=\"margin-top: var(--space-4x)\">\n        {\"Data feeds on Solana\"}\n    </a>\n\n</section>\n\n<section class=\"card cl-featuredcard\" style=\"text-align: center\">\n  <img\n    src=\"/images/card-icons/5f96ab4b4db522072b7ff30c_book-bookmark.svg\"\n    style=\"width: 48px\"\n  />\n  ## New to Chainlink and Smart Contracts?\n  <p>\n    Learn the basics in the Getting Started Guide. Build your first smart\n    contract on Ethereum.\n  </p>\n  <a\n    href=\"/getting-started/conceptual-overview/\"\n    class={button.secondary}\n    style=\"margin-top: var(--space-4x)\"\n  >\n    {\"Getting Started Guide\"}\n  </a>\n</section>\n"
    }
  ]
}
